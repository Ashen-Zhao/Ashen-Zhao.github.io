---
layout: post
title: "iOS 多语言版本的开发（二）"
date: 2016-01-15 05:13:56 +0800
comments: true
keywords: iOS本地化, iOS多语言开发, 多语言开发
description: 如何实现,iOS多语言开发
categories: i|OS
---
###题记  

&emsp;&emsp;[iOS 多语言版本的开发（一）](/blog/2016/01/14/localized01/) 中我们完成了让应用跟随系统语言进行切换，而用户自己却不能切换的功能，也基本上算是实现了多语言版本；可是，对于某些应用来说，实现跟随系统语言切换的同时， 也想要实现让用户自己选择应用语言版本的功能；针对这种情况，利用这篇文章来写写如何让用户自己切换应用语言版本；  

###语言文件存在的形式  
想要实现用户自己手动切换语言版本，就先要了解语言文件在资源文件中存在的形式;  

![多语言](/images/localized09.png)  

如图中，不管是英语（en.lproj）、简体（zh-Hans.lproj）、还是繁体（zh-Hant.lproj）都是以`.lproj` 的文件夹形式存在, 所以当我们要切换语言的时候，其实也就是做到去取这些`.lproj` 文件夹中的`ASLocalized.strings`文件； 
<!--more--> 
&emsp;到这里，原理应该懂了，接下来就是动手实现了；  

###根据语言获取 ASLocalized.strings  
这时候，需要根据不同的`语言.lproj` 获取到对应的`ASLocalized.strings`语言文件, 从而让页面显示对应的语言内容;  
这里暂且先根据English获取英语的语言文件，English 的.lproj存在的形式是`en.lproj`  
<pre><code>
NSString *path = [[NSBundle mainBundle] pathForResource:@"en" ofType:@"lproj"];
NSString *showValue = [[NSBundle bundleWithPath:path] localizedStringForKey:@"showTxt" value:nil table:@"ASLocalized"];
NSLog(@"result: %@", showValue);
 </code></pre>
输出结果：result: this is test text  

以上代码，只是以English 为语言文件，是写死的，如果想要让用户自己手动改变，只需要替换掉 `[[NSBundle mainBundle] pathForResource:@"en" ofType:@"lproj"] ` 中的`en` 为其他的语言标识就好了； 既然是用户手动切换，那就需要写代码去实现了；

到这里，有一个问题，***如何让用户选择后一个语言后，即使程序退出后，下次进入依然保留呢***， 既然需要保存数据，就要涉及到本地存储了，对于少量的保存我们可以使用`NSUserDefaults` 来操作，简单方便快捷；至于其他的存储方式四大基本对象的write方法，归档，sqllite，CoreData 需要的同学，可以自己去脑补，这里我不多介绍了；
###使用NSUserDefaults 记录选择的语言  

这里我简单写了个界面，作为辅助讲解  

<img src="/images/localized10.png" alt="多语言" width="300" height="450">

<pre><code>
- (IBAction)changeLanguage:(UIButton *)sender {
    
    switch (sender.tag) {
        case 101: { //简体
            [[NSUserDefaults standardUserDefaults] setObject:@"zh-Hans" forKey:appLanguage];
        }
            break;
        case 102: { //繁体
            [[NSUserDefaults standardUserDefaults] setObject:@"zh-Hant" forKey:appLanguage];
        }
            break;
        case 103: { //English
            [[NSUserDefaults standardUserDefaults] setObject:@"en" forKey:appLanguage];
        }
            break;
        default:
            break;
    }
}
</code></pre>  

以上方法，是图中三种语言的点击事件，分别将对应的语言标识，记录到`NSUserDefaults` 对应的 `appLanguage` key 中  

既然重新选择了语言，就需要重新加载控件的内容，因为是Demo🐴，这里直接将给控件赋值写成一个方法，如下：  
<pre><code>
- (void)showLbl {
    NSString *lanType =[NSString stringWithFormat:@"%@", [[NSUserDefaults standardUserDefaults] objectForKey:@"appLanguage"]];
    
    NSString *path = [[NSBundle mainBundle] pathForResource:lanType ofType:@"lproj"];
    
    NSString *showValue = [[NSBundle bundleWithPath:path] localizedStringForKey:@"showTxt" value:nil table:@"ASLocalized"];
    NSLog(@"result: %@", showValue);
    self.lblShowTxt.text = showValue;
}

</code></pre>  

可将此方法在点击事件中调用下，即可；  

Demo效果图：  

![多语言](/images/localized11.gif)  

###首次进入应用的考虑
到这里，还没有完，这时我们需要考虑下，用户第一次进来时，该显示什么样的语言，是跟随系统，还是我们给一种默认的语言；  
####1、给一种默认语言  
这种处理很简单，只需要在`didFinishLaunchingWithOptions` 方法中，进行判断本地是否记录了语言标识，如果没有给一种默认即可，代码如下：  
<pre>`
if (![[NSUserDefaults standardUserDefaults] objectForKey:appLanguage]) { 
	 [[NSUserDefaults standardUserDefaults] setObject:@"zh-Hans" 	forKey:appLanguage];
}`</pre>  

####2、跟随系统语言  
这种处理相对来说，比较复杂写，首页需要获取系统的首选语言顺序，然后取第一个首选语言，其次，还要判断你要做的语言版本，首选语言组中存在与否；  
获取首选语言：`  NSArray  *languages = [NSLocale preferredLanguages];`  
获取第一个首选语言：`  NSString *language = [languages objectAtIndex:0];`  

处理过程如下：  
<pre><code>
if (![[NSUserDefaults standardUserDefaults] objectForKey:appLanguage]) {
        NSArray  *languages = [NSLocale preferredLanguages];
        NSString *language = [languages objectAtIndex:0];
        if ([language hasPrefix:@"zh-Hans"]) {
            [[NSUserDefaults standardUserDefaults] setObject:@"zh-Hans" forKey:appLanguage];
        } else if ([language hasPrefix:@"zh-TW"] || [language hasPrefix:@"zh-HK"] || [language hasPrefix:@"zh-Hant"]) {
            [[NSUserDefaults standardUserDefaults] setObject:@"zh-Hant" forKey:appLanguage];
        } else if ([language hasPrefix:@"en"]) {
            [[NSUserDefaults standardUserDefaults] setObject:@"en" forKey:appLanguage];
        }else{
            [[NSUserDefaults standardUserDefaults] setObject:@"zh-Hans" forKey:appLanguage];
        }
    }
</code></pre>  

注：由于繁体又有台湾繁体和香港繁体之分，所以代码中也做出了相应的处理；  

╮(╯▽╰)╭ 到了这里基本上算是完成了多语言版本的工作了，但是，但是，但是，这只是完成了项目起步期，项目中还不存在大量的中文字符串的情况；暂时先不考虑项目已经开发完成的情况，接下来先来优化下，我们刚刚写过的代码；  
对于 `showLbl` 方法中的内容，可以定义成宏，以供项目中，任何地方需要多元化时的使用;  
<pre><code> 
 #define ASLocalizedString(key)  [NSString stringWithFormat:@"%@", [[NSBundle bundleWithPath:[[NSBundle mainBundle] pathForResource:[NSString stringWithFormat:@"%@",[[NSUserDefaults standardUserDefaults] objectForKey:@"appLanguage"]] ofType:@"lproj"]] localizedStringForKey:(key) value:nil table:@"ASLocalized"]]
</code> </pre>  
为了方便，我将`showLbl` 中取key对应的语言内容，封装进了一个带参数的宏中；  

使用起来就很Easy了，只需要这样使用即可： `ASLocalizedString(@"showTxt")`    

我在github上，上传了本篇[Demo](https://github.com/Ashen-Zhao/easyLocalized) 以供辅助参考；  

[查看Demo 点击这里](https://github.com/Ashen-Zhao/easyLocalized)   

>####相关文章  
####[iOS 多语言版本的开发（一）](/blog/2016/01/14/localized01/)
