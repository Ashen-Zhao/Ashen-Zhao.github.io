<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS | 啊神的技术博客]]></title>
  <link href="http://ashen-zhao.github.io/blog/categories/i/atom.xml" rel="self"/>
  <link href="http://ashen-zhao.github.io/"/>
  <updated>2016-03-01T08:45:21+08:00</updated>
  <id>http://ashen-zhao.github.io/</id>
  <author>
    <name><![CDATA[Ashen]]></name>
    <email><![CDATA[zhaoashen@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS之支付功能]]></title>
    <link href="http://ashen-zhao.github.io/blog/2016/01/26/pay/"/>
    <updated>2016-01-26T11:15:35+08:00</updated>
    <id>http://ashen-zhao.github.io/blog/2016/01/26/pay</id>
    <content type="html"><![CDATA[<h3>先挖个坑，埋点土，近期推出支付开发（微信、支付宝、paypal，可能还有银联卡支付），记得时刻关注哦</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[仿照微博、微信弹出ActionSheet样式]]></title>
    <link href="http://ashen-zhao.github.io/blog/2016/01/22/assheet/"/>
    <updated>2016-01-22T15:08:16+08:00</updated>
    <id>http://ashen-zhao.github.io/blog/2016/01/22/assheet</id>
    <content type="html"><![CDATA[<p>&emsp;iOS 开发中，很多应用都会用到从屏幕底部弹出的UIActionSheet, 但是使用的过程中，总感觉系统的样式怪怪的，或者与自己开发的App的UI不是很协调，总之与自己的App搭配就一个字：丑。 说起ActionSheet样式，应该来看看主流的微博与微信是什么样式的；</p>

<p><img src="http://ashen-zhao.github.io/images/assheet02.PNG" width="200" height="370" alt="微信">
<img src="http://ashen-zhao.github.io/images/assheet01.PNG" width="200" height="370" alt="微博"></p>

<p>看上去的确挺自然，一点也不像系统自带的，给人的感觉就是不协调，不协调的</p>

<!--more-->


<p><img src="http://ashen-zhao.github.io/images/assheet03.png" width="200" height="370" alt="微信"></p>

<p>看吧,系统的与人家设计的，看上去就逊色许多。
出于比较喜欢微博、微信这种设计，就自己动手鼓弄着也写了个<a href="https://github.com/Ashen-Zhao/ASSheet">工具类</a>，为以后使用做准备，使用起来很简单，只需传入titles 数组，以及实现一个Block 点击回调，就可以很快的实现像微博微信那样的样式，先看看效果图吧：</p>

<p><img src="/images/assheet04.gif" alt="ActionSheet" /></p>

<h3>我是如何实现的</h3>

<p>&emsp;写一个继承自UIView的类，用这个view 来做为弹出后的幕布（也就是半透明的背景），然后给这个view 添加一个单击手势，手势方法就是讲该view移除隐藏的方法，然后将次view 背景色设置成半透明, 用 <code>[self setBackgroundColor:[UIColor colorWithWhite:0.5 alpha:0.5]]</code> 来设置半透明背景色。<br/>
&emsp;然后再定义个UIview *titleBgkView属性，该view 用来当titles 的幕布， 随后创建该view， 并且将此view 的frame 根据titles 的多少进行动态调整，我这里重写了大幕布的init 方法<code>- (instancetype)initWithFrame:(CGRect)frame titleArr:(NSArray *)titleArr</code> 传入titles 数组。 <br/>
&emsp;再然后，根据传入的titles 进行创建title按钮，将创建的按钮添加到titleBgkView 上。<br/>
噗，我这是写的啥，我还是直接上代码吧，对不住各位了，实在写不下去了，程序员嘛还是直接看代码来的最直接，对吧。
这是我的.m 文件实现代码</p>

<pre> <code> 
- (instancetype)initWithFrame:(CGRect)frame titleArr:(NSArray *)titleArr {
    self = [super initWithFrame:frame];
    size = [UIScreen mainScreen].bounds.size;
    [self setBackgroundColor:[UIColor colorWithWhite:0.5 alpha:0.5]];
    UITapGestureRecognizer *tap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(hiddenSheet)];
    [self addGestureRecognizer:tap];
    [self makeBaseUIWithTitleArr:titleArr];
    
    return self;
}

- (void)makeBaseUIWithTitleArr:(NSArray *)titleArr{
   
    self.bgkView = [[UIView alloc] initWithFrame:CGRectMake(0, size.height, size.width, titleArr.count * 50 + 55)];
    _bgkView.backgroundColor = [UIColor colorWithRed:0xe9/255.0 green:0xe9/255.0 blue:0xe9/255.0 alpha:1.0];
    [self addSubview:_bgkView];

    CGFloat y = [self createBtnWithTitle:@"取消" origin_y: _bgkView.frame.size.height - 50 tag:-1 action:@selector(hiddenSheet)] - 55;
    for (int i = 0; i < titleArr.count; i++) {
        y = [self createBtnWithTitle:titleArr[i] origin_y:y tag:i action:@selector(click:)];
    }
    [UIView animateWithDuration:0.3 animations:^{
        CGRect frame = _bgkView.frame;
        frame.origin.y -= frame.size.height;
        _bgkView.frame = frame;
    }];
   
}

- (CGFloat)createBtnWithTitle:(NSString *)title origin_y:(CGFloat)y tag:(NSInteger)tag action:(SEL)method {
    UIButton *btn = [UIButton buttonWithType:UIButtonTypeCustom];
    [btn setTitle:title forState:UIControlStateNormal];
    btn.frame = CGRectMake(0, y, size.width, 50);
    btn.backgroundColor = [UIColor whiteColor];
    btn.tag = tag;
    [btn setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];
    [btn addTarget:self action:method forControlEvents:UIControlEventTouchUpInside];
    [_bgkView addSubview:btn];
    return y -= tag == -1 ? 0 : 50.4;
}
- (void)hiddenSheet {
    [UIView animateWithDuration:0.3 animations:^{
        CGRect frame = _bgkView.frame;
        frame.origin.y += frame.size.height;
        _bgkView.frame = frame;
    }];
    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.3 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
        [self removeFromSuperview];
    });
}

- (void)click:(UIButton *)btn {
    if (self.Click) {
        _Click(btn.tag);
    }
}

</code> </pre>


<p></p>

<p>这是.h 文件代码</p>

<pre> <code> 
@property (nonatomic, copy) void (^Click)(NSInteger clickIndex);
- (instancetype)initWithFrame:(CGRect)frame titleArr:(NSArray *)titleArr;
- (void)hiddenSheet;

</code></pre>


<p></p>

<p>看吧，这多简单方便，有代码直接上，废话少说，程序员对代码的情结不容小觑，哼哈哈。</p>

<p>这里我也把使用的代码给贴出来吧，慢慢观察，仔细看，哈哈，使用起来很容易</p>

<pre> <code>
- (IBAction)showSheet:(id)sender {
    AS_Sheet *a = [[AS_Sheet alloc] initWithFrame:self.view.bounds titleArr:@[@"从手机相册选择", @"拍照", @"小视频"]];
    __weak typeof(a) weakA = a;
    a.Click = ^(NSInteger clickIndex) {
        switch (clickIndex) {
            case 0:
                NSLog(@"相册选择");
                break;
            case 1:
                NSLog(@"拍照");
                break;
            case 2:
                NSLog(@"小视频");
                break;
            default:
                break;
        }
        [weakA hiddenSheet];
    };
    [self.navigationController.view addSubview:a];
}

</code></pre>


<p></p>

<p>最后，老规矩我还是把<a href="https://github.com/Ashen-Zhao/ASSheet">Demo附上</a>，以供辅助</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[简单实现双击tabBarItem刷新页面]]></title>
    <link href="http://ashen-zhao.github.io/blog/2016/01/20/doubleclick/"/>
    <updated>2016-01-20T17:44:11+08:00</updated>
    <id>http://ashen-zhao.github.io/blog/2016/01/20/doubleclick</id>
    <content type="html"><![CDATA[<h3>如何实现双击tabbarItem刷新页面？</h3>

<p>&emsp;在网上寻找了一圈，众说纷纭，大差不差，而且基本上实现的不是双击才刷新，而是双击刷新一次后，只要再次单击就会刷新，这样很容易造成用户不小心点着，降低用户体验；见于这种局面，我花费了近一个小时，鼓捣出来了，只有双击的时候，才会去刷新页面（其实是伪双击，也就是单击两次，没有做两次单击时间间隔限制），废话不说了，直接上代码：</p>

<pre><code>
int i = 0;
- (BOOL)tabBarController:(UITabBarController *)tabBarController shouldSelectViewController:(UIViewController *)viewController{
    i++;
    UIViewController *tbSelectedController = tabBarController.selectedViewController;
    if ([tbSelectedController isEqual:viewController]) {
        if (currentIndex == 1 && tabBarController.selectedIndex == 1 && i % 2 != 0) {
            UINavigationController *nav = self.viewControllers[1];
            TestViewController *tVC = nav.viewControllers[0];
            [tVC doubleClickRefrsh];
        }
        currentIndex = tabBarController.selectedIndex;
        return NO;
    }
    i = 1;
    return YES;
}
</code></pre>


<p>
这里是 <code>UITabBarDelegate</code> 的代理方法，实现的是双击第二个tabBarItem，则刷新其对应的第一个视图的节目数据;<br/>
至于<code>i</code>的存在，是为了记录是否是双击，我是根据<code>i</code>是偶数还是奇数来进行判断的；<br/>
就酱紫吧，不清楚的只管拿去用就行了，我就不多解释了，只有这几行代码，真没啥解释的了(^o^)/~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 多语言版本的开发（三）]]></title>
    <link href="http://ashen-zhao.github.io/blog/2016/01/18/localized03/"/>
    <updated>2016-01-18T16:06:48+08:00</updated>
    <id>http://ashen-zhao.github.io/blog/2016/01/18/localized03</id>
    <content type="html"><![CDATA[<h3>写在前面</h3>

<p>&emsp;<a href="/blog/2016/01/15/localized02/">iOS 多语言版本的开发（二）</a> 中我们实现了如何让用户自己去切换系统语言的功能，我们还写了<a href="https://github.com/Ashen-Zhao/easyLocalized">Demo</a> 以供辅助学习；但是，继以上两篇文章都是建立在项目刚刚启动或启动不久，项目中存在的中文字符串还不是很多，手动改起来也还可以接受; 那么问题来了，如果项目已经竣工或者已经迭代几个版本了，那该如何实现了？手动改起来也不太现实，耗时耗力不讨好的手动，在这里就不用考虑了。 不让考虑，是因为我有更简单快捷高效的方法，让我慢慢与您道来；</p>

<h3>如何辨别项目中的中文字符串?</h3>

<p>&emsp;既然要替换项目中使用到的中文字符串，那么前提就必须要先找到这些个字符串，然后将这些字符串，替换成我们定义的<strong>宏</strong>， 为了替换方便，可将这些字符串自身作为<code>key</code>， 这里不理解的不要紧，下面我还会讲到。 既然是辨别中文字符串，那也就是说在项目文件中进行匹配查找，说到匹配，那就需要正则表达式了，用正则表达式匹配Xcode中的使用的中文字符串，使用<code>(@"[^"]*[\u4E00-\u9FA5]+[^"\n]*?")\s*</code> 即可， 打开你的Xcode 试试看，切记find 后面的选项要选择 <code>Regular Expression</code>, 默认选中的是<code>Text</code>, 如图</p>

<!--more-->


<p><img src="/images/localized301.png" alt="多语言" /></p>

<h3>如何取出识别到的中文字符串？</h3>

<p>&emsp;我们已经知道如何识别项目中的字符串了，但是如何取出来使用呢？ 这就需要遍历项目中所有的指定后缀（e.g:  .h、.m等）的文件，然后利用正则表达匹配所有使用到的中文字符串，并写入文件中。为了方便起见，我将此过程写了一个Mac客户端<a href="https://github.com/Ashen-Zhao/ReadChinese">小应用</a>，可直接将选中的项目中所有的中文字符串，导出到指定的路径下；该应用还可以选择对于重复出现的中文字符串进行处理，以及还可以将中文字符串导出为繁体； <a href="https://github.com/Ashen-Zhao/ReadChinese">小应用</a>更值得关注的是它导出的文件，可以直接拿来当做多语言文件中的<code>key=value</code> 使用，非常简单，喜欢的可以去<a href="https://github.com/Ashen-Zhao/ReadChinese">下载看看</a>， 含有源码的哦；小应用运行图如下：</p>

<p><img src="/images/readChinese.jpg" alt="多语言" /></p>

<h3>如何使用取出的中文字符串？</h3>

<p>&emsp;已经拿到取出的中文字符串文件，这个文件是可以直接拿来用做多语言文件使用的，小应用导出的文件，只可以用于中文以及繁体多语言文件，而对于其他的语言，就需要你拿着导出的文件，找你们公司的翻译人员，进行翻译； 拿繁体版来举个例子，导出来的繁体文件如下（收留我App导出的文件）：</p>

<p><img src="/images/localized303.png" alt="多语言" /></p>

<p>这个繁体文件，可以直接作为繁体多语言使用，如何想要翻译成英文，可以将此文件拷贝一份，交给翻译人员，让其翻译。翻译的时候，你一定要给翻译人员沟通好，让其只翻译<code>value</code>, 也就是图中<code>=</code> 后面双引号中的内容，格式什么的也不要让他乱改，否则容易出现问题，导致key与value对不上号。 一切沟通妥当后，等翻译把文件给你后，直接将文件中的内容，复制到多语言文件的英语文件中即可；</p>

<h3>如何将项目中的中文字符串进行替换</h3>

<p>&emsp;多语言文件已经配置完成，到了这里，那么问题来了，我们只是取出项目中使用的中文字符串，然后将字符串封装成多语言文件，但是对于项目中使用的中文字符串依然还是中文字符串，我们还并没有进行替换处理。当然，这一步我们是不能够忘了，由于是替换项目中所有的使用中文字符串，我们还是谨慎为好，首先将你的项目进行<strong>备份、备份、备份</strong>，非常重要的事情说三篇，切记一定要备份。备份好后，我们就可以开始替换工作了，没有备份的不要往下看了，赶紧备份去；<br/>
&emsp;假设你已经备份好了，你就可以开始替换工作了，前面我们说过让中文字符串自身作为<code>key</code> 进行替换，之所以让其自身作为key, 是因为这样可以大大减轻替换的困难度，而且还有利于代码的可读性，基本上算是保持原有代码；既然要替换项目中的使用中文字符串，就要用到Xcode 自带的字符串替换功能，首先还需要使用正则表达式<code>(@"[^"]*[\u4E00-\u9FA5]+[^"\n]*?")\s*</code>，匹配出项目中使用的中文字符串，然后在对其进行替换处理。</p>

<p>&emsp;由于我们在<a href="/blog/2016/01/15/localized02/">iOS 多语言版本的开发（二）</a>中，对取key对应的语言内容，进行了宏的封装, 这里我们可以将匹配到的使用中文字符直接替换成我们定义的宏的使用</p>

<pre><code>#define ASLocalizedString(key)  [NSString stringWithFormat:@"%@", [[NSBundle bundleWithPath:[[NSBundle mainBundle] pathForResource:[NSString stringWithFormat:@"%@",[[NSUserDefaults standardUserDefaults] objectForKey:@"appLanguage"]] ofType:@"lproj"]] localizedStringForKey:(key) value:nil table:@"ASLocalized"]] </code></pre>


<p>
以上是宏的定义，我们需要将字符串进行替换成宏的使用，如：<br/>
&emsp;替换前是这样的<code>_lbl.text = @"我是多语言";</code><br/>
&emsp;替换后<code>_lbl.text = ASLocalizedString(@"我是多语言")</code></p>

<p>替换规则如图：</p>

<p><img src="/images/localized304.png" alt="多语言" /></p>

<p>这次选中的是<code>Replace</code>, 不是<code>Find</code>。按图中所示，选择完毕后，点击<code>ReplaceAll</code>, 会出来一个弹框，不用管它直接继续，即可，然后你在看项目中使用到的中文字符串是否已经替换掉了，到这里基本上大功告成了；</p>

<h3>遗留问题</h3>

<p>1、正则表达式，不懂得可以先照文章里写就行，然后再去学习下，<a href="http://deerchao.net/tutorials/regex/regex.htm">这里有篇基础文章</a><br/>
2、ASLocalizedString(key) ， 该宏使用面积广，可以将其定义成公共头文件中，然后用时引用头文件即可，也可将文件封装进pch文件中，这样无需使用头文件接口使用<br/>
3、替换后，可能会有些地方报错，command + b 编译下，看看报错的地方，进行相应修改即可。报错原因：a. 可能是你定义的常量字符串； b. 可能是定义的宏；  c.  可能是替换后没有换行； 基本上报的错误很明显，进行修改即可；<br/>
4、在迭代版本中，再次使用中文字符串，就需要使用<code>ASLocalizedString(key)</code>， 来代替了，然后再多语言文件中，进行<code>key=value</code> 配置；</p>

<blockquote><h4>相关文章</h4>

<h4><a href="/blog/2016/01/14/localized01/">iOS 多语言版本的开发（一）</a></h4>

<h4><a href="/blog/2016/01/15/localized02/">iOS 多语言版本的开发（二）</a></h4></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 多语言版本的开发（二）]]></title>
    <link href="http://ashen-zhao.github.io/blog/2016/01/15/localized02/"/>
    <updated>2016-01-15T05:13:56+08:00</updated>
    <id>http://ashen-zhao.github.io/blog/2016/01/15/localized02</id>
    <content type="html"><![CDATA[<h3>题记</h3>

<p>&emsp;&emsp;<a href="/blog/2016/01/14/localized01/">iOS 多语言版本的开发（一）</a> 中我们完成了让应用跟随系统语言进行切换，而用户自己却不能切换的功能，也基本上算是实现了多语言版本；可是，对于某些应用来说，实现跟随系统语言切换的同时， 也想要实现让用户自己选择应用语言版本的功能；针对这种情况，利用这篇文章来写写如何让用户自己切换应用语言版本；</p>

<h3>语言文件存在的形式</h3>

<p>想要实现用户自己手动切换语言版本，就先要了解语言文件在资源文件中存在的形式;</p>

<p><img src="/images/localized09.png" alt="多语言" /></p>

<p>如图中，不管是英语（en.lproj）、简体（zh-Hans.lproj）、还是繁体（zh-Hant.lproj）都是以<code>.lproj</code> 的文件夹形式存在, 所以当我们要切换语言的时候，其实也就是做到去取这些<code>.lproj</code> 文件夹中的<code>ASLocalized.strings</code>文件；</p>

<!--more-->


<p>
&emsp;到这里，原理应该懂了，接下来就是动手实现了；</p>

<h3>根据语言获取 ASLocalized.strings</h3>

<p>这时候，需要根据不同的<code>语言.lproj</code> 获取到对应的<code>ASLocalized.strings</code>语言文件, 从而让页面显示对应的语言内容;<br/>
这里暂且先根据English获取英语的语言文件，English 的.lproj存在的形式是<code>en.lproj</code></p>

<pre><code>
NSString *path = [[NSBundle mainBundle] pathForResource:@"en" ofType:@"lproj"];
NSString *showValue = [[NSBundle bundleWithPath:path] localizedStringForKey:@"showTxt" value:nil table:@"ASLocalized"];
NSLog(@"result: %@", showValue);
 </code></pre>


<p>输出结果：result: this is test text</p>

<p>以上代码，只是以English 为语言文件，是写死的，如果想要让用户自己手动改变，只需要替换掉 <code>[[NSBundle mainBundle] pathForResource:@"en" ofType:@"lproj"]</code> 中的<code>en</code> 为其他的语言标识就好了； 既然是用户手动切换，那就需要写代码去实现了；</p>

<p>到这里，有一个问题，<strong><em>如何让用户选择后一个语言后，即使程序退出后，下次进入依然保留呢</em></strong>， 既然需要保存数据，就要涉及到本地存储了，对于少量的保存我们可以使用<code>NSUserDefaults</code> 来操作，简单方便快捷；至于其他的存储方式四大基本对象的write方法，归档，sqllite，CoreData 需要的同学，可以自己去脑补，这里我不多介绍了；</p>

<h3>使用NSUserDefaults 记录选择的语言</h3>

<p>这里我简单写了个界面，作为辅助讲解</p>

<p><img src="http://ashen-zhao.github.io/images/localized10.png" alt="多语言" width="300" height="450"></p>

<pre><code>
- (IBAction)changeLanguage:(UIButton *)sender {
    
    switch (sender.tag) {
        case 101: { //简体
            [[NSUserDefaults standardUserDefaults] setObject:@"zh-Hans" forKey:appLanguage];
        }
            break;
        case 102: { //繁体
            [[NSUserDefaults standardUserDefaults] setObject:@"zh-Hant" forKey:appLanguage];
        }
            break;
        case 103: { //English
            [[NSUserDefaults standardUserDefaults] setObject:@"en" forKey:appLanguage];
        }
            break;
        default:
            break;
    }
}
</code></pre>


<p></p>

<p>以上方法，是图中三种语言的点击事件，分别将对应的语言标识，记录到<code>NSUserDefaults</code> 对应的 <code>appLanguage</code> key 中</p>

<p>既然重新选择了语言，就需要重新加载控件的内容，因为是Demo🐴，这里直接将给控件赋值写成一个方法，如下：</p>

<pre><code>
- (void)showLbl {
    NSString *lanType =[NSString stringWithFormat:@"%@", [[NSUserDefaults standardUserDefaults] objectForKey:@"appLanguage"]];
    
    NSString *path = [[NSBundle mainBundle] pathForResource:lanType ofType:@"lproj"];
    
    NSString *showValue = [[NSBundle bundleWithPath:path] localizedStringForKey:@"showTxt" value:nil table:@"ASLocalized"];
    NSLog(@"result: %@", showValue);
    self.lblShowTxt.text = showValue;
}

</code></pre>


<p></p>

<p>可将此方法在点击事件中调用下，即可；</p>

<p>Demo效果图：</p>

<p><img src="/images/localized11.gif" alt="多语言" /></p>

<h3>首次进入应用的考虑</h3>

<p>到这里，还没有完，这时我们需要考虑下，用户第一次进来时，该显示什么样的语言，是跟随系统，还是我们给一种默认的语言；</p>

<h4>1、给一种默认语言</h4>

<p>这种处理很简单，只需要在<code>didFinishLaunchingWithOptions</code> 方法中，进行判断本地是否记录了语言标识，如果没有给一种默认即可，代码如下：</p>

<pre>`
if (![[NSUserDefaults standardUserDefaults] objectForKey:appLanguage]) { 
     [[NSUserDefaults standardUserDefaults] setObject:@"zh-Hans"    forKey:appLanguage];
}`</pre>


<p></p>

<h4>2、跟随系统语言</h4>

<p>这种处理相对来说，比较复杂写，首页需要获取系统的首选语言顺序，然后取第一个首选语言，其次，还要判断你要做的语言版本，首选语言组中存在与否；<br/>
获取首选语言：<code> NSArray  *languages = [NSLocale preferredLanguages];</code><br/>
获取第一个首选语言：<code> NSString *language = [languages objectAtIndex:0];</code></p>

<p>处理过程如下：</p>

<pre><code>
if (![[NSUserDefaults standardUserDefaults] objectForKey:appLanguage]) {
        NSArray  *languages = [NSLocale preferredLanguages];
        NSString *language = [languages objectAtIndex:0];
        if ([language hasPrefix:@"zh-Hans"]) {
            [[NSUserDefaults standardUserDefaults] setObject:@"zh-Hans" forKey:appLanguage];
        } else if ([language hasPrefix:@"zh-TW"] || [language hasPrefix:@"zh-HK"] || [language hasPrefix:@"zh-Hant"]) {
            [[NSUserDefaults standardUserDefaults] setObject:@"zh-Hant" forKey:appLanguage];
        } else if ([language hasPrefix:@"en"]) {
            [[NSUserDefaults standardUserDefaults] setObject:@"en" forKey:appLanguage];
        }else{
            [[NSUserDefaults standardUserDefaults] setObject:@"zh-Hans" forKey:appLanguage];
        }
    }
</code></pre>


<p></p>

<p>注：由于繁体又有台湾繁体和香港繁体之分，所以代码中也做出了相应的处理；</p>

<p>╮(╯▽╰)╭ 到了这里基本上算是完成了多语言版本的工作了，但是，但是，但是，这只是完成了项目起步期，项目中还不存在大量的中文字符串的情况；暂时先不考虑项目已经开发完成的情况，接下来先来优化下，我们刚刚写过的代码；<br/>
对于 <code>showLbl</code> 方法中的内容，可以定义成宏，以供项目中，任何地方需要多元化时的使用;</p>

<pre><code> 
 #define ASLocalizedString(key)  [NSString stringWithFormat:@"%@", [[NSBundle bundleWithPath:[[NSBundle mainBundle] pathForResource:[NSString stringWithFormat:@"%@",[[NSUserDefaults standardUserDefaults] objectForKey:@"appLanguage"]] ofType:@"lproj"]] localizedStringForKey:(key) value:nil table:@"ASLocalized"]]
</code> </pre>


<p>
为了方便，我将<code>showLbl</code> 中取key对应的语言内容，封装进了一个带参数的宏中；</p>

<p>使用起来就很Easy了，只需要这样使用即可： <code>ASLocalizedString(@"showTxt")</code></p>

<p>我在github上，上传了本篇<a href="https://github.com/Ashen-Zhao/easyLocalized">Demo</a> 以供辅助参考；</p>

<p><a href="https://github.com/Ashen-Zhao/easyLocalized">查看Demo 点击这里</a></p>

<blockquote><h4>相关文章</h4>

<h4><a href="/blog/2016/01/14/localized01/">iOS 多语言版本的开发（一）</a></h4>

<h4><a href="/blog/2016/01/18/localized03/">iOS 多语言版本的开发（三）</a></h4></blockquote>
]]></content>
  </entry>
  
</feed>
