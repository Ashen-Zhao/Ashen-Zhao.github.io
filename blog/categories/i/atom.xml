<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS | 啊神的技术博客]]></title>
  <link href="http://ashen-zhao.github.io/blog/categories/i/atom.xml" rel="self"/>
  <link href="http://ashen-zhao.github.io/"/>
  <updated>2019-02-14T11:55:34+08:00</updated>
  <id>http://ashen-zhao.github.io/</id>
  <author>
    <name><![CDATA[Ashen]]></name>
    <email><![CDATA[zhaoashen@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[一行代码搞定UITextField的输入格式限制]]></title>
    <link href="http://ashen-zhao.github.io/blog/2018/08/16/textfield/"/>
    <updated>2018-08-16T14:00:16+08:00</updated>
    <id>http://ashen-zhao.github.io/blog/2018/08/16/textfield</id>
    <content type="html"><![CDATA[<h3>ZASTextFieldFormat开发背景</h3>

<p>   在开发的过程中，每次写到UITextField，就不由得心里不爽，因为要考虑到各种输入限制，实现代理、通知等一些麻烦繁琐的东西，就心中不爽，所以才写了这个<a href="https://github.com/ashen-zhao/uitextfieldformat">ZASTextFieldFormat</a>简单的轮子，先暂时用着，等后期在慢慢优化完善。</p>

<h3>ZASTextFieldFormat 简介</h3>

<p>一行代码，设置UITextField的输入格式限制，比如手机号、身份证号、银行卡号格式以及输入字符类型个数的限制等；</p>

<h3>接口说明</h3>

<pre><code>
/**
 * ZASTextFieldFormatDelegate代理
 *
 */
@property (nonatomic, assign) id&lt;ZASTextFieldFormatDelegate&gt; zasDelegate;

/**
 * 设置浮点类型,只允许输入两位小数的浮点类型（default=NO）
 * 
 */
@property (nonatomic, assign) Boolean isFloat;

/**
 * 设置正则匹配模式（如果设置正则模式，则忽略其他格式限制）
 *
 */
@property (nonatomic, copy) NSString * pattern;

/**
 * 设置UITextFiled格式控制的入口 (注：这个入口必须被调用)
 * format=nil或者""则不限制格式, charactersInString=nil或者""则不限制字符, maxLimit=0则不限制个数
 *
 * 示例: 以手机号为例
 * @param format              格式，eg: ### #### ####
 * @param charactersInString  支持输入的字符，eg: 0123456789
 * @param maxLimit            最大输入限制个数，eg: 11
 * 结果输入：159 1234 5678
 */
 - (void)textFieldWithFormat:(NSString *)format charactersInString:(NSString *)charactersInString maxLimit:(NSInteger)maxLimit;
</code></pre>

<h3>具体使用</h3>

<p>使原有UITextField继承自ZASTextFieldFormat，然后调用如何接口即可；</p>

<pre><code>[_tfPhone textFieldWithFormat:@"### #### ####" charactersInString:@"0123456789" maxLimit:11];
</code></pre>

<h3>参考Demo</h3>

<p><a href="https://github.com/ashen-zhao/uitextfieldformat">点击此处获取Demo</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自动生成混淆文件(swift版)]]></title>
    <link href="http://ashen-zhao.github.io/blog/2018/07/10/zi-dong-sheng-cheng-swifthun-yao-wen-jian/"/>
    <updated>2018-07-10T14:00:16+08:00</updated>
    <id>http://ashen-zhao.github.io/blog/2018/07/10/zi-dong-sheng-cheng-swifthun-yao-wen-jian</id>
    <content type="html"><![CDATA[<h3>起因</h3>

<p>你们都知道，AppStore审核机制，多款类似的APP，会被4.3拒绝，至于如何规避4.3，这里我只写如何给项目添加混淆代码（又叫垃圾代码），当然只添加垃圾代码，应该是规避不了4.3的，但至少可以迷惑机审，加大通过机审的概率，至于其他方法，不予多说。 我这里使用python脚本，自动生成swift垃圾文件代码，文件名随机，每个文件中含有少量变量，方法等。</p>

<h3>实现原理</h3>

<p>实现原理很简单，就是创建文件，向文件中，添加swift语言的字符串即可。</p>

<h3>实现代码</h3>

<p><a href="https://github.com/ashen-zhao/createSwift">获取代码Demo文件点击此处</a> 以下为实现代码</p>

<!--more-->


<pre><code># -*- coding: utf-8 -*-

import random

import os,sys

import string

#创建.swift文件

def createSwift(fileNmae,propertyNumber,methodArray):

    full_path =  sys.path[0] + '/SwiftFiles/' + fileNmae + '.swift'

    file = open(full_path, 'w')

    file.write('//\n//  '+fileNmae+'.swift\n//  Orange\n\n//  Created by Ashen on 18/06/06.\n//  Copyright ©  2018年 BeiLian. All rights reserved.\n//\n\n')

    file.write('import UIKit \n\n' + 'class '+fileNmae+': UIViewController {\n\n')

    propryNameArray = []

    for index in range(1,propertyNumber):

        propryNameArray.append(random.choice(array))

    propryNameArray = list(set(propryNameArray))

    for propertyName in propryNameArray:

        file.write('    public var '+propertyName+':'+random.choice(classArray)+'!\n')

    file.write('\n\n')

    file.write('    override func viewDidLoad() {\n        super.viewDidLoad()\n    }\n\n')


    for methodName in methodArray:

        file.write('    public func '+methodName+'TOVC() {\n\n       var realArr = Array&lt;String&gt;()\n')

        number = random.randint(3, 10)

        for i in range(1,number):

            file.write('       realArr.append("'+random.choice(array)+'")\n')

        file.write('\n    }\n\n')

    file.write('}')

    file.close()

    print('Done')


def createClassName():

    first = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"

    second = "abcdefghijklmnopqrstuvwxyz"

    index = 0

    array = []

    # 设置生成多少个类
    classNumber = 3
    for i in range(classNumber):

        final=(random.choice(first))

        index = random.randint(3, 5)

        for i in range(index):

            final+=(random.choice(second))

        final += (random.choice(first))

        for i in range(index):

            final+=(random.choice(second))

        array.append(final)
    return array

#属性类型
classArray = ['UIColor','UILabel','UITableView','UISlider','UIScrollView','UIView','UIButton']

array = createClassName()

array = list(set(array))

for name in array:

    number = random.randint(3, 10)

    methodArray = []

    for i in range(1,5):

        methodArray.append(random.choice(array))

    methodArray = list(set(methodArray))#数组去重

    createSwift(name+'VController',number,methodArray)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[工具篇之自定义检查版本更新提示弹框]]></title>
    <link href="http://ashen-zhao.github.io/blog/2018/03/14/geng-xin/"/>
    <updated>2018-03-14T18:06:58+08:00</updated>
    <id>http://ashen-zhao.github.io/blog/2018/03/14/geng-xin</id>
    <content type="html"><![CDATA[<h3>引言</h3>

<p>对于一些app的更新弹框，使用系统自带的Alert弹框，文字排版总是对不齐，没有美观，像我这样有点强迫症的，看到都别扭，更别说去点击更新了，于是乎，就自己动手做了一个，不管怎么样，看着舒服多了。</p>

<h3>此处不废话，看效果</h3>

<p><img src="/images/checkUpdate.png" alt="" /></p>

<h3>使用</h3>

<p>由于这个工具开发过于简单，我这里就不讲述如何开发实现的了，想要看具体实现的，我已在github上公开源码（<a href="https://github.com/ashen-zhao/ZASUpdateAlert">ZASUpdateAlert</a>），可自行查看去吐槽。</p>

<!--more-->


<p>本着学习的态度，写了这个工具，又本着学习的态度，上传到了cocoapods上面，也是人生第一次上传代码到cocoapods，着实搞了一个下午，传了删，删了又传，最终也算是成功了。</p>

<p>鉴于我搞了半天才搞定如何上传自己的库到cocoapods，后续我会写一篇基础教材，到底该如何上传，同时也为自己以后再次使用时，少走坑，快速实现人生理想。</p>

<h4>CocoaPods安装</h4>

<pre><code>pod 'ZASUpdateAlert', '~&gt; 0.1.0'
</code></pre>

<h4>手动安装</h4>

<p>只需将<code>ZASUpdateAlert</code>文件夹拖到项目中。</p>

<h4>使用示例</h4>

<p>如果是使用的是CocoaPods，第一步需要先导入ZASUpdateAlert
<code>
import ZASUpdateAlert
</code></p>

<pre><code>ZASUpdateAlert.show(version: "V1.6", content: "1.全新UI界面\n2.更好的性能体验\n3.投诉系统极速反馈\n4.多个BUG虫的尸体都不复存在", appId: "xxxxxxxx", isMustUpdate: false)
</code></pre>

<h4>示例源代码</h4>

<p><a href="https://github.com/ashen-zhao/ZASUpdateAlert">点击查看ZASUpdateAlert源码去吐槽喽</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode修改版权Copyright、统一配置类前缀]]></title>
    <link href="http://ashen-zhao.github.io/blog/2017/12/01/copyright/"/>
    <updated>2017-12-01T13:51:07+08:00</updated>
    <id>http://ashen-zhao.github.io/blog/2017/12/01/copyright</id>
    <content type="html"><![CDATA[<h4>修改类的Copyright、类前缀</h4>

<p>对于已经在项目中的文件，想要修改版权信息，使用全局替换就可以了，而对于新文件来说，想让Xcode帮你自动填充版权方，也是很方便的，之前都是傻瓜式的替换，现在发现了新大陆，就来这里记录下吧，具体操作流程如下图：<br/>
<img src="/images/copyright.png" alt="版权、前缀" /></p>

<p>顺便加点料，对于有些项目，需要为每个类加一个前缀，也是可以按照这个流程来做的，设置上图中的<code>Class prefix</code>就可以了，这样Xcode会在新建的类的时候自动填充这个前缀了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React-Native初体验]]></title>
    <link href="http://ashen-zhao.github.io/blog/2017/08/23/react-native/"/>
    <updated>2017-08-23T17:25:41+08:00</updated>
    <id>http://ashen-zhao.github.io/blog/2017/08/23/react-native</id>
    <content type="html"><![CDATA[<h3>我的学习之React-Native</h3>

<p>练习项目：<a href="https://github.com/ashen-zhao/react-native">https://github.com/ashen-zhao/react-native</a></p>

<h4>目前还在学习阶段，日后有时间有精力了，再来补充这篇文章吧（偷笑中），又来欺骗自己了，啥时候来补充呀，这个还真不知道呀，谁让咱都是性情中人呢。</h4>
]]></content>
  </entry>
  
</feed>
