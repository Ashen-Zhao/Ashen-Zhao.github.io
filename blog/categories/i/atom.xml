<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS | 追风之影]]></title>
  <link href="http://ashen-zhao.github.io/blog/categories/i/atom.xml" rel="self"/>
  <link href="http://ashen-zhao.github.io/"/>
  <updated>2020-03-10T11:07:39+08:00</updated>
  <id>http://ashen-zhao.github.io/</id>
  <author>
    <name><![CDATA[Ashen]]></name>
    <email><![CDATA[zhaoashen@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS进阶之逆向工程（越狱、砸壳、反编译）]]></title>
    <link href="http://ashen-zhao.github.io/blog/2019/08/14/ni-xiang-bian-cheng/"/>
    <updated>2019-08-14T17:51:57+08:00</updated>
    <id>http://ashen-zhao.github.io/blog/2019/08/14/ni-xiang-bian-cheng</id>
    <content type="html"><![CDATA[<h3>背景</h3>

<p>这篇文章只是我的一个记录，记录我是如何一步一步的，从越狱一部手机到反编译一个APP，故不作为教程文章，只为自己以后方便复现，文章内容大部分从别人文章中采集整合，如若使用，仅供参考。</p>

<h3>第一步、越狱</h3>

<p>关于越狱看<a href="https://baijiahao.baidu.com/s?id=1626241403987098895&amp;wfr=spider&amp;for=pc">这篇文章</a>足以，这里简单对这篇文章做下记录：<br/>
1、用苹果手机自带的Safari浏览器打开app.ignition.fun<br/>
2、进去后点击中间的按钮<br/>
3、点击Jailbreaks<br/>
4、点击Jailbreaks进去后拉倒最后点击Pwn20wnd<br/>
5、点击GET然后点安装<br/>
6、去设置信任证书，如果无法信息，卸载重新下载<br/>
7、打开刚才安装的unc0ver APP<br/>
8、点击「Jailbreak」按钮，越狱过程可能会重启三次，每次重启后再打开unc0ver APP点击Jailbreak按钮。<br/>
9、出现Cydia后代表越狱成功<br/>
注：如果越狱过程中，卡住OTA问题上，请到设置->存储管理里删除已经下载好的系统文件，如果删除了还是不行的话，请自行谷歌或者百度, 我因为有部专门测试手机，我选择了直接重置手机。懒得去找其他办法了。</p>

<h3>第二步、砸壳</h3>

<h4>这里选择一键砸壳工具frida-ios-dump</h4>

<p>frida-ios-dump<a href="https://github.com/AloneMonkey/frida-ios-dump">下载地址</a></p>

<!--more-->


<h4>1、先安装frida</h4>

<h5>首页安装pip，打开终端，执行以下命令(如果已安装请跳过)</h5>

<p><code>sudo easy_install pip</code></p>

<h5>其次，执行以下命令安装frida</h5>

<p><code>sudo pip install frida-tools</code><br/>
如果安装报以下错误,<br/>
<code>Uninstalling a distutils installed project (six) has been deprecated and will be removed in a future version. This is due to the fact that uninstalling a distutils project will only partially uninstall the project.</code><br/>
执行以下命令，<br/>
<code>sudo pip install frida –upgrade –ignore-installed six</code><br/>
然后重新执行,<br/>
<code>sudo pip install frida-tools</code></p>

<h4>2、使用你的越狱手机，启动 Cydia，安装frida插件</h4>

<p>软件源 Sources-> 编辑 Edit（右上角）-> 添加 Add（左上角）-> 输入 <code>https://build.frida.re</code>，通过刚才添加的软件源安装 frida 插件。</p>

<h4>3、通过USB链接手机和电脑</h4>

<p>具体如何链接ssh这里<a href="https://blog.csdn.net/youshaoduo/article/details/81097802">有篇文章</a>, 我这里做简单记录：<br/>
1、在手机上打开<code>Cydia</code>，搜索<code>openssh</code>并安装<br/>
2、在Mac终端执行<code>brew install libimobiledevice</code><br/>
3、完成第二步后执行<code>iproxy 2222 22</code>,进行端口转换，此时终端界面显示<code>waiting for connection</code><br/>
4、打开新的终端执行<code>ssh -p 2222 root@127.0.0.1</code>, 这时候可能会出现   <code>The authenticity of host '[127.0.0.1]:2222 ([127.0.0.1]:2222)' can't be established.
ECDSA key fingerprint is SHA256:+0hOqiykO/N5kh9p+mYk2pb+2MAb5Q1DkFK9tTCZ7TU.
Are you sure you want to continue connecting (yes/no)?</code>.
输入yes后按回车，此时会提示你输入手机的root密码，默认密码是：alpine  ，然后之前的那个<code>waiting for connection</code>终端窗口，就显示连接成功了。</p>

<h4>4、执行<code>frida-ps -U</code> 查看手机上安装的app</h4>

<p>新开一个终端,执行<code>frida-ps -U</code> 即可在终端显示已安装app</p>

<h4>5、cd到已经下载的<code>frida-ios-dump</code>目录，执行以下命令安装依赖库  <code>sudo pip install -r requirements.txt --upgrade</code></h4>

<h4>6、开始砸壳</h4>

<p>终端执行以下命令<br/>
<code>./dump.py app名称</code><br/>
这里的app名称为在手机桌面上显示的名称，砸壳完成后，会在frida-ios-dump目录里生成一个已砸壳的ipa文件，即可脱壳的app。</p>

<h4>7、判断是否砸壳</h4>

<p>判断是否砸壳，进入app目录- otool -l WeChat  | grep crypt</p>

<h3>安装 MonkeyDev、Reavl、 Hopper</h3>

<h5>安装 <a href="https://github.com/AloneMonkey/MonkeyDev/wiki/%E5%AE%89%E8%A3%85">MonkeyDev</a></h5>

<h5>安装 <a href="https://www.jianshu.com/p/51c539f61ab0">Reveal</a></h5>

<h5>安装 <a href="https://download.csdn.net/download/arr0813/10600870">Hopper Disassemble</a></h5>

<p>先把工具安装了，后续可能会继续更新，如何使用。</p>

<h3>参考文章</h3>

<p><a href="https://baijiahao.baidu.com/s?id=1626241403987098895&amp;wfr=spider&amp;for=pc">https://baijiahao.baidu.com/s?id=1626241403987098895&amp;wfr=spider&amp;for=pc</a><br/>
<a href="https://blog.csdn.net/youshaoduo/article/details/81133492">https://blog.csdn.net/youshaoduo/article/details/81133492</a><br/>
<a href="https://blog.csdn.net/youshaoduo/article/details/81097802">https://blog.csdn.net/youshaoduo/article/details/81097802</a><br/>
<a href="http://mobile.51cto.com/hot-573146.htm">http://mobile.51cto.com/hot-573146.htm</a><br/>
<a href="https://www.jianshu.com/p/28eb7616fd3a">https://www.jianshu.com/p/28eb7616fd3a</a><br/>
<a href="https://blog.csdn.net/skylin19840101/article/details/54669815">https://blog.csdn.net/skylin19840101/article/details/54669815</a><br/>
<a href="http://kuailejim.com/2016/04/25/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E5%8F%8D%E7%BC%96%E8%AF%91%E5%88%AB%E4%BA%BA%E7%9A%84app/">http://kuailejim.com/2016/04/25/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E5%8F%8D%E7%BC%96%E8%AF%91%E5%88%AB%E4%BA%BA%E7%9A%84app/</a><br/>
<a href="http://www.alonemonkey.com/2018/01/30/frida-ios-dump/">http://www.alonemonkey.com/2018/01/30/frida-ios-dump/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一行代码搞定UITextField的输入格式限制]]></title>
    <link href="http://ashen-zhao.github.io/blog/2018/08/16/textfield/"/>
    <updated>2018-08-16T14:00:16+08:00</updated>
    <id>http://ashen-zhao.github.io/blog/2018/08/16/textfield</id>
    <content type="html"><![CDATA[<h3>ZASTextFieldFormat开发背景</h3>

<p>   在开发的过程中，每次写到UITextField，就不由得心里不爽，因为要考虑到各种输入限制，实现代理、通知等一些麻烦繁琐的东西，就心中不爽，所以才写了这个<a href="https://github.com/ashen-zhao/uitextfieldformat">ZASTextFieldFormat</a>简单的轮子，先暂时用着，等后期在慢慢优化完善。</p>

<h3>ZASTextFieldFormat 简介</h3>

<p>一行代码，设置UITextField的输入格式限制，比如手机号、身份证号、银行卡号格式以及输入字符类型个数的限制等；</p>

<h3>接口说明</h3>

<pre><code>
/**
 * ZASTextFieldFormatDelegate代理
 *
 */
@property (nonatomic, assign) id&lt;ZASTextFieldFormatDelegate&gt; zasDelegate;

/**
 * 设置浮点类型,只允许输入两位小数的浮点类型（default=NO）
 * 
 */
@property (nonatomic, assign) Boolean isFloat;

/**
 * 设置正则匹配模式（如果设置正则模式，则忽略其他格式限制）
 *
 */
@property (nonatomic, copy) NSString * pattern;

/**
 * 设置UITextFiled格式控制的入口 (注：这个入口必须被调用)
 * format=nil或者""则不限制格式, charactersInString=nil或者""则不限制字符, maxLimit=0则不限制个数
 *
 * 示例: 以手机号为例
 * @param format              格式，eg: ### #### ####
 * @param charactersInString  支持输入的字符，eg: 0123456789
 * @param maxLimit            最大输入限制个数，eg: 11
 * 结果输入：159 1234 5678
 */
 - (void)textFieldWithFormat:(NSString *)format charactersInString:(NSString *)charactersInString maxLimit:(NSInteger)maxLimit;
</code></pre>

<h3>具体使用</h3>

<p>使原有UITextField继承自ZASTextFieldFormat，然后调用如何接口即可；</p>

<pre><code>[_tfPhone textFieldWithFormat:@"### #### ####" charactersInString:@"0123456789" maxLimit:11];
</code></pre>

<h3>参考Demo</h3>

<p><a href="https://github.com/ashen-zhao/uitextfieldformat">点击此处获取Demo</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自动生成混淆文件(swift版)]]></title>
    <link href="http://ashen-zhao.github.io/blog/2018/07/10/zi-dong-sheng-cheng-swifthun-yao-wen-jian/"/>
    <updated>2018-07-10T14:00:16+08:00</updated>
    <id>http://ashen-zhao.github.io/blog/2018/07/10/zi-dong-sheng-cheng-swifthun-yao-wen-jian</id>
    <content type="html"><![CDATA[<h3>起因</h3>

<p>你们都知道，AppStore审核机制，多款类似的APP，会被4.3拒绝，至于如何规避4.3，这里我只写如何给项目添加混淆代码（又叫垃圾代码），当然只添加垃圾代码，应该是规避不了4.3的，但至少可以迷惑机审，加大通过机审的概率，至于其他方法，不予多说。 我这里使用python脚本，自动生成swift垃圾文件代码，文件名随机，每个文件中含有少量变量，方法等。</p>

<h3>实现原理</h3>

<p>实现原理很简单，就是创建文件，向文件中，添加swift语言的字符串即可。</p>

<h3>实现代码</h3>

<p><a href="https://github.com/ashen-zhao/createSwift">获取代码Demo文件点击此处</a> 以下为实现代码</p>

<!--more-->


<pre><code># -*- coding: utf-8 -*-

import random

import os,sys

import string

#创建.swift文件

def createSwift(fileNmae,propertyNumber,methodArray):

    full_path =  sys.path[0] + '/SwiftFiles/' + fileNmae + '.swift'

    file = open(full_path, 'w')

    file.write('//\n//  '+fileNmae+'.swift\n//  Orange\n\n//  Created by Ashen on 18/06/06.\n//  Copyright ©  2018年 BeiLian. All rights reserved.\n//\n\n')

    file.write('import UIKit \n\n' + 'class '+fileNmae+': UIViewController {\n\n')

    propryNameArray = []

    for index in range(1,propertyNumber):

        propryNameArray.append(random.choice(array))

    propryNameArray = list(set(propryNameArray))

    for propertyName in propryNameArray:

        file.write('    public var '+propertyName+':'+random.choice(classArray)+'!\n')

    file.write('\n\n')

    file.write('    override func viewDidLoad() {\n        super.viewDidLoad()\n    }\n\n')


    for methodName in methodArray:

        file.write('    public func '+methodName+'TOVC() {\n\n       var realArr = Array&lt;String&gt;()\n')

        number = random.randint(3, 10)

        for i in range(1,number):

            file.write('       realArr.append("'+random.choice(array)+'")\n')

        file.write('\n    }\n\n')

    file.write('}')

    file.close()

    print('Done')


def createClassName():

    first = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"

    second = "abcdefghijklmnopqrstuvwxyz"

    index = 0

    array = []

    # 设置生成多少个类
    classNumber = 3
    for i in range(classNumber):

        final=(random.choice(first))

        index = random.randint(3, 5)

        for i in range(index):

            final+=(random.choice(second))

        final += (random.choice(first))

        for i in range(index):

            final+=(random.choice(second))

        array.append(final)
    return array

#属性类型
classArray = ['UIColor','UILabel','UITableView','UISlider','UIScrollView','UIView','UIButton']

array = createClassName()

array = list(set(array))

for name in array:

    number = random.randint(3, 10)

    methodArray = []

    for i in range(1,5):

        methodArray.append(random.choice(array))

    methodArray = list(set(methodArray))#数组去重

    createSwift(name+'VController',number,methodArray)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[工具篇之自定义检查版本更新提示弹框]]></title>
    <link href="http://ashen-zhao.github.io/blog/2018/03/14/geng-xin/"/>
    <updated>2018-03-14T18:06:58+08:00</updated>
    <id>http://ashen-zhao.github.io/blog/2018/03/14/geng-xin</id>
    <content type="html"><![CDATA[<h3>引言</h3>

<p>对于一些app的更新弹框，使用系统自带的Alert弹框，文字排版总是对不齐，没有美观，像我这样有点强迫症的，看到都别扭，更别说去点击更新了，于是乎，就自己动手做了一个，不管怎么样，看着舒服多了。</p>

<h3>此处不废话，看效果</h3>

<p><img src="/images/checkUpdate.png" alt="" /></p>

<h3>使用</h3>

<p>由于这个工具开发过于简单，我这里就不讲述如何开发实现的了，想要看具体实现的，我已在github上公开源码（<a href="https://github.com/ashen-zhao/ZASUpdateAlert">ZASUpdateAlert</a>），可自行查看去吐槽。</p>

<!--more-->


<p>本着学习的态度，写了这个工具，又本着学习的态度，上传到了cocoapods上面，也是人生第一次上传代码到cocoapods，着实搞了一个下午，传了删，删了又传，最终也算是成功了。</p>

<p>鉴于我搞了半天才搞定如何上传自己的库到cocoapods，后续我会写一篇基础教材，到底该如何上传，同时也为自己以后再次使用时，少走坑，快速实现人生理想。</p>

<h4>CocoaPods安装</h4>

<pre><code>pod 'ZASUpdateAlert', '~&gt; 0.1.0'
</code></pre>

<h4>手动安装</h4>

<p>只需将<code>ZASUpdateAlert</code>文件夹拖到项目中。</p>

<h4>使用示例</h4>

<p>如果是使用的是CocoaPods，第一步需要先导入ZASUpdateAlert
<code>
import ZASUpdateAlert
</code></p>

<pre><code>ZASUpdateAlert.show(version: "V1.6", content: "1.全新UI界面\n2.更好的性能体验\n3.投诉系统极速反馈\n4.多个BUG虫的尸体都不复存在", appId: "xxxxxxxx", isMustUpdate: false)
</code></pre>

<h4>示例源代码</h4>

<p><a href="https://github.com/ashen-zhao/ZASUpdateAlert">点击查看ZASUpdateAlert源码去吐槽喽</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode修改版权Copyright、统一配置类前缀]]></title>
    <link href="http://ashen-zhao.github.io/blog/2017/12/01/copyright/"/>
    <updated>2017-12-01T13:51:07+08:00</updated>
    <id>http://ashen-zhao.github.io/blog/2017/12/01/copyright</id>
    <content type="html"><![CDATA[<h4>修改类的Copyright、类前缀</h4>

<p>对于已经在项目中的文件，想要修改版权信息，使用全局替换就可以了，而对于新文件来说，想让Xcode帮你自动填充版权方，也是很方便的，之前都是傻瓜式的替换，现在发现了新大陆，就来这里记录下吧，具体操作流程如下图：<br/>
<img src="/images/copyright.png" alt="版权、前缀" /></p>

<p>顺便加点料，对于有些项目，需要为每个类加一个前缀，也是可以按照这个流程来做的，设置上图中的<code>Class prefix</code>就可以了，这样Xcode会在新建的类的时候自动填充这个前缀了。</p>
]]></content>
  </entry>
  
</feed>
