<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[啊神的技术博客]]></title>
  <link href="http://ashen-zhao.github.io/atom.xml" rel="self"/>
  <link href="http://ashen-zhao.github.io/"/>
  <updated>2017-07-14T17:11:48+08:00</updated>
  <id>http://ashen-zhao.github.io/</id>
  <author>
    <name><![CDATA[Ashen]]></name>
    <email><![CDATA[zhaoashen@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Xcode代码全黑的另一种解决办法]]></title>
    <link href="http://ashen-zhao.github.io/blog/2017/07/14/xcodedai-ma-quan-hei/"/>
    <updated>2017-07-14T16:44:48+08:00</updated>
    <id>http://ashen-zhao.github.io/blog/2017/07/14/xcodedai-ma-quan-hei</id>
    <content type="html"><![CDATA[<h4>Xcode代码全黑且没有智能提示，应该算是开发中最烦恼的事之一了吧，一旦遇到这样问题，之前除了Clean项目，删除DerivedData文件夹，然而这样并没有什么用，偶尔重启Xcode或许运气好的话，彩色世界就会回来了。</h4>

<h4>运气为什么好就能回来了，联想到Xcode比较吃内存，在联想到我苦逼的4g内存，估计Xcode代码全黑，可内存有联系呀，瞬间茅塞顿开呀，赶紧打开活动监视器，看到占用内存最多的 SourceKitService，大概百度了下SourceKitService这个进程，也没发现有什么比较严重的东东，就退出SourceKitService这个进程，回到Xcode发现，代码不再是全黑了，又回到彩色世界了，世界又是那么的美好，编程也变得快乐了</h4>

<h4>总结，Xcode代码全黑的另一种解决办法，就是打开活动监视器，退出SourceKitService进程，就可以了。</h4>

<p>注：可能只针对内存比较小的电脑（另外：我的项目是swift项目）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UITableView重用机制导致CABasicAnimation动画失效]]></title>
    <link href="http://ashen-zhao.github.io/blog/2017/03/02/dong-hua-shi-xiao/"/>
    <updated>2017-03-02T18:24:49+08:00</updated>
    <id>http://ashen-zhao.github.io/blog/2017/03/02/dong-hua-shi-xiao</id>
    <content type="html"><![CDATA[<p>开发随记，再给cell上添加一个小动画图片时，遇到一个很蛋疼的问题，动画明明会动，而且退出后台在回来也会动，可就是拉出屏幕外，在回来时，动画失效了，不会动了。以下是动画代码，就是一个简单的摇摆动画</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>let rotationAnim = CABasicAnimation(keyPath: "transform.rotation.z")
</span><span class='line'>            rotationAnim.toValue = M_PI/5
</span><span class='line'>            rotationAnim.autoreverses = true
</span><span class='line'>            rotationAnim.repeatCount = MAXFLOAT
</span><span class='line'>            rotationAnim.duration = 0.2
</span><span class='line'>            rotationAnim.isRemovedOnCompletion = false
</span><span class='line'>            moveImgv.layer.add(rotationAnim, forKey: nil)</span></code></pre></td></tr></table></div></figure>


<!--more-->


<p>于是就开始看CABasicAnimation的类的属性说明，该设置的都设置了，可还是不行，百度，谷歌，搜狗统统找不到原因，全是CABasicAnimation的简单教程。</p>

<p>无奈至极呀，就开始检查代码，看有没有可以修改的地方，一通乱世只会，在上面代码中的最后一行<br/>
<code>moveImgv.layer.add(rotationAnim, forKey: nil)</code></p>

<p>我发现forkey是nil，可当我给它一个值的时候，</p>

<p><code>moveImgv.layer.add(rotationAnim, forKey: "moveanimation")</code><br/>
再次调试，却发现重用后，动画终于可以动了，原来我废了那么久的时间，却是这样的问题，真是想哭，又想笑😁。</p>

<p>就是这样的问题，在网上找了好久，却找不到结果，可能是大家都写了key了吧，在此写下这边文章，希望有遇到像我一样的问题的同学可以找到解决办法。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《自我营销七堂课》读书心得]]></title>
    <link href="http://ashen-zhao.github.io/blog/2017/02/24/zi-wo-ying-xiao-qi-tang-ke-du-hou-gan/"/>
    <updated>2017-02-24T14:55:48+08:00</updated>
    <id>http://ashen-zhao.github.io/blog/2017/02/24/zi-wo-ying-xiao-qi-tang-ke-du-hou-gan</id>
    <content type="html"><![CDATA[<p>为什么选择这本书来读呢？或许是自己错过太多表现自我的机会，亦或是有人说我不懂得自我营销，亦或者羡慕他人侃侃而谈&hellip;. 于是就本着学习自我营销的方法，来读这本书的，前前后后也差不多花了一个月的时间，中间是断断续续的，不管怎么着这也是个读书的开始，哪怕不是一个完美的开局，或许会有一个完美的结局。</p>

<!--more-->


<p>读一本简单，可写读书心得却不容易，不知写些什么，也不知从何写起，或许是没有把书读透。<br/>
我不打算对本书的每一章就行分析解读，我只是把我读书时的想法写出来，算是个读书笔记吧，亦或者一个引子，提醒自己以后看到这些个点点滴滴的记录，就会提醒自己读过这本书，再去回忆书中的内容，然后在考虑读这本书的意义以及成长。</p>

<p>“我承认认真是做好一件事的根本，可要想只有认真就想让别人认同你，远远不够，你需要去争取，更要圆滑点，不争即为输”<br/>
“抓住对方需要的情感，不就是揣摩对方心思么，需要了解对方需要什么，才能用对应的情感，感化他人吧”</p>

<p>“找不到对的，错的也不要选，就要结婚一样，遇不到对的人，错的选了也会出很多问题，工作也是一样，切莫拿错的来将就，那只会越来越糟糕”</p>

<p>“物虽相同，人不同，阶层改变了物的表象。同一款产品，不同的颜色，富人与穷人，价格却天壤之别，穷人买来用，富人买来让别人看，各有所需，各有所求，全看买的用处，价格之差也就没那么明显了”</p>

<p>“朦朦胧胧的读了近一半了，可却没有什么记忆深刻的，可能是本书本身就不是以故事为主题的，而是以一些案例为主题，案例很多，可都是已经成功的案例，不知道到成功背后经历过什么，或许拿成功案例来讲，就是本书的一种自我营销吧”</p>

<p>“有多少人可以没有一点不爽的接受别人的错误指责呢？或许是有的，那他一定也会很色吧”</p>

<p>“打造自己独特的特性，才能让人记住你，前提是你需要表现你的特性。不要告诉我，你喜欢沉默，可沉默不会告诉别人你有多厉害，除非你已经是很牛逼的人物了，那样沉默才是你的代名词”</p>

<p>“凡是有的，还要给他，使他更有，但凡没有的，连他所有的，也要夺去。工作亦是如此，你越表现突出，机会就会越多，越会让你表现，反倒你越是不爱表现，机会就会越少，到最后仅有的机会也会给你剥夺”</p>

<p>“第一次，就做第一名。给你的才能一次机会，让别人有机会就会想起你能做好”</p>

<p>“马太效应。好则越好，坏则越坏”</p>

<p>“原文：我们生于一个同质化产品过剩的时代，如果你不高调的展示出自己独特的个性符号，那么，你就很难有机会绽放光彩，过于低调的人生前途往往暗淡。”</p>

<p>“高调自我，谈何容易”</p>

<p>“生于忧患死于安乐，恰恰说明’狠角色‘，存在的价值，你要有危机感，才能促使自己不断的进步，而这个危机感，就是那个'狠角色', 他可能抢你风头，可能当众打击你，可能替代你&hellip;.,加油吧，尽可能的让自己成为狠角色”</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS自动打包上传脚本]]></title>
    <link href="http://ashen-zhao.github.io/blog/2017/02/22/autobuild/"/>
    <updated>2017-02-22T16:46:25+08:00</updated>
    <id>http://ashen-zhao.github.io/blog/2017/02/22/autobuild</id>
    <content type="html"><![CDATA[<p>自从将swift2.2升级到swift3.0, 每次使用Xcode8编译都很慢，很是不爽，于是有了研究下xcodebuild命令行打包的想法，起初不知道用shell，还是用python, 在网上大概搜了一下，关于python的比较多点，于是就先学习python的基础语法，然后再去看看大神的一些脚本，就开始专研命令行打包了。总之，过程很艰辛，结果很满意，以下便是我修改后的<a href="https://github.com/ashen-zhao/autobuild">python自动打包脚本</a>，命令行使用，打包完成会询问是否上传蒲公英平台，以及询问是否上传appstore，还有是否保留archive文件。<br/>
<a href="https://github.com/ashen-zhao/autobuild">自动打包脚本下载地址</a></p>

<!--more-->


<h3>使用方法</h3>

<p>1、下载完成后，将autobuild.py以及exportOptions.plist文件放到你的项目跟目录下（即与xx.xcworkspace或者xx.xcworkspace在同一个目录下）<br/>
2、打开autobuild.py，修改配置信息<br/>
3、打开命令终端，进入项目根目录<br/>
&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;a.如果你是xx.xcworkspace<br/>
&emsp;&emsp;    <code>./autobuild.py -p youproject.xcodeproj</code><br/>
&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;b.如果你是xx.xcworkspace<br/>
&emsp;&emsp; <code>./autobuild.py -w youproject.xcworkspace</code></p>

<p>4、等待终端回应，依据终端提示进行相关操作<br/>
5、最终会在桌面生成带有时间戳的文件夹，含义ipa以及xcarchive文件</p>

<pre>
#!/usr/bin/env python
# -*- coding:utf-8 -*-

#./autobuild.py -p youproject.xcodeproj
#./autobuild.py -w youproject.xcworkspace

import argparse
import subprocess
import requests
import os
import datetime

#configuration for iOS build setting
CONFIGURATION = "Release"
EXPORT_OPTIONS_PLIST = "exportOptions.plist"

#发布版本号
VERSION = '1.0.0'
BUILD = '17021803'

#要打包的TARGET名字
TARGET = 'ULife'

#Info.plist路径
PLIST_PATH = "xxxxxx/Info.plist"

#存放路径以时间命令
DATE = datetime.datetime.now().strftime('%Y-%m-%d_%H.%M.%S')

#会在桌面创建输出ipa文件的目录
EXPORT_MAIN_DIRECTORY = "~/Desktop/" + TARGET + DATE

#xcarchive文件路径（含有dsym），后续查找BUG用途
ARCHIVEPATH = EXPORT_MAIN_DIRECTORY + "/%s%s.xcarchive" %(TARGET,VERSION)

#ipa路径
IPAPATH = EXPORT_MAIN_DIRECTORY + "/%s.ipa" %(TARGET)

#苹果开发者账号
APPLEID = 'xxxxxx'
APPLEPWD = 'xxxxx'

# configuration for pgyer
PGYER_UPLOAD_URL = "http://www.pgyer.com/apiv1/app/upload"
DOWNLOAD_BASE_URL = "http://www.pgyer.com"
USER_KEY = "xxxxxx"
API_KEY = "xxxxx"
#设置从蒲公英下载应用时的密码
PYGER_PASSWORD = "xxxxx"

def cleanArchiveFile():
    cleanCmd = "rm -r %s" %(ARCHIVEPATH)
    process = subprocess.Popen(cleanCmd, shell = True)
    process.wait()
    print "cleaned archiveFile: %s" %(ARCHIVEPATH)

def uploadIpaToAppStore():
    print "iPA上传中...."
    altoolPath = "/Applications/Xcode.app/Contents/Applications/Application\ Loader.app/Contents/Frameworks/ITunesSoftwareService.framework/Versions/A/Support/altool"

    exportCmd = "%s --validate-app -f %s -u %s -p %s -t ios --output-format xml" % (altoolPath, IPAPATH, APPLEID,APPLEPWD)
    process = subprocess.Popen(exportCmd, shell=True)
    (stdoutdata, stderrdata) = process.communicate()

    validateResult = process.returncode
    if validateResult == 0:
        print '~~~~~~~~~~~~~~~~iPA验证通过~~~~~~~~~~~~~~~~'
        exportCmd = "%s --upload-app -f %s -u %s -p %s -t ios --output-format normal" % (
        altoolPath, IPAPATH, APPLEID, APPLEPWD)
        process = subprocess.Popen(exportCmd, shell=True)
        (stdoutdata, stderrdata) = process.communicate()

        uploadresult = process.returncode
        if uploadresult == 0:
            print '~~~~~~~~~~~~~~~~iPA上传成功'
        else:
            print '~~~~~~~~~~~~~~~~iPA上传失败'
    else:
        print "~~~~~~~~~~~~~~~~iPA验证失败~~~~~~~~~~~~~~~~"

def parserUploadResult(jsonResult):
    resultCode = jsonResult['code']
    if resultCode == 0:
        downUrl = DOWNLOAD_BASE_URL +"/"+jsonResult['data']['appShortcutUrl']
        print "Upload Success"
        print "DownUrl is:" + downUrl
    else:
        print "Upload Fail!"
        print "Reason:"+jsonResult['message']

def uploadIpaToPgyer(ipaPath):
    print "ipaPath:"+ipaPath
    ipaPath = os.path.expanduser(ipaPath)
    ipaPath = unicode(ipaPath, "utf-8")
    files = {'file': open(ipaPath, 'rb')}
    headers = {'enctype':'multipart/form-data'}
    payload = {'uKey':USER_KEY,'_api_key':API_KEY,'publishRange':'2','isPublishToPublic':'2', 'password':PYGER_PASSWORD}
    print "uploading...."
    r = requests.post(PGYER_UPLOAD_URL, data = payload ,files=files,headers=headers)
    if r.status_code == requests.codes.ok:
        result = r.json()
        parserUploadResult(result)
    else:
        print 'HTTPError,Code:'+r.status_code

def exportArchive():
    exportCmd = "xcodebuild -exportArchive -archivePath %s -exportPath %s -exportOptionsPlist %s" %(ARCHIVEPATH, EXPORT_MAIN_DIRECTORY, EXPORT_OPTIONS_PLIST)
    process = subprocess.Popen(exportCmd, shell=True)
    (stdoutdata, stderrdata) = process.communicate()

    signReturnCode = process.returncode
    if signReturnCode != 0:
        print "export %s failed" %(TARGET)
        return ""
    else:
        return EXPORT_MAIN_DIRECTORY

def buildProject(project):
    archiveCmd = 'xcodebuild -project %s -scheme %s -configuration %s archive -archivePath %s -destination generic/platform=iOS' %(project, TARGET, CONFIGURATION, ARCHIVEPATH)
    process = subprocess.Popen(archiveCmd, shell=True)
    process.wait()

    archiveReturnCode = process.returncode
    if archiveReturnCode != 0:
        print "archive project %s failed" %(project)
        cleanArchiveFile()

def buildWorkspace(workspace):
    archiveCmd = 'xcodebuild -workspace %s -scheme %s -configuration %s archive -archivePath %s -destination generic/platform=iOS' %(workspace, TARGET, CONFIGURATION, ARCHIVEPATH)
    process = subprocess.Popen(archiveCmd, shell=True)
    process.wait()

    archiveReturnCode = process.returncode
    if archiveReturnCode != 0:
        print "archive workspace %s failed" %(workspace)
        cleanArchiveFile()

def xcbuild(options):
    project = options.project
    workspace = options.workspace

    if project is None and workspace is None:
        pass
    elif project is not None:
        buildProject(project)
    elif workspace is not None:
        buildWorkspace(workspace)

    #导出ipa文件
    exportarchive = exportArchive()
    print "~~~~~~~~~~~~~~~~是否上传到蒲公英~~~~~~~~~~~~~~~~"
    print "        1 不上传 (默认)"
    print "        2 上传 "
    isuploadpgyer = raw_input("您的决定：")
    if isuploadpgyer == "2" and exportarchive != "":
        uploadIpaToPgyer(IPAPATH)

    print "~~~~~~~~~~~~~~~~是否上传到AppStore~~~~~~~~~~~~~~~~"
    print "        1 不上传 (默认)"
    print "        2 上传 "
    isuploadappstore = raw_input("您的决定：")
    if isuploadappstore == '2':
        uploadIpaToAppStore()
    else:
        print "~~~~~~~~~~~~~~~~是否删除archive文件~~~~~~~~~~~~~~~~"
        print "        1 保留 (默认)"
        print "        2 删除 "
        iscleararchive = raw_input("您的决定：")
        if iscleararchive == "2":
            cleanArchiveFile()


def main():

    parser = argparse.ArgumentParser()
    parser.add_argument("-w", "--workspace", help="Build the workspace name.xcworkspace.", metavar="name.xcworkspace")
    parser.add_argument("-p", "--project", help="Build the project name.xcodeproj.", metavar="name.xcodeproj")

    options = parser.parse_args()

    print "options: %s" % (options)

    os.system('/usr/libexec/PlistBuddy -c "Set:CFBundleShortVersionString %s" %s' % (VERSION,PLIST_PATH))
    os.system('/usr/libexec/PlistBuddy -c "Set:CFBundleVersion %s" %s' % (BUILD, PLIST_PATH))

    xcbuild(options)

if __name__ == '__main__':
    main()

</pre>


<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[集成友盟分享中遇到的奇怪的错误]]></title>
    <link href="http://ashen-zhao.github.io/blog/2017/02/14/qi-guai-de-cuo-wu/"/>
    <updated>2017-02-14T13:35:47+08:00</updated>
    <id>http://ashen-zhao.github.io/blog/2017/02/14/qi-guai-de-cuo-wu</id>
    <content type="html"><![CDATA[<h3>开发中遇到的一些看似不起眼的警告，往往却是问题的所在！</h3>

<hr />

<p>这不，这次我就遇到了这个坑，为了提醒自己不要轻易忽略警告，以此文章记录一下，埋坑的艰辛。</p>

<p>我是在集成友盟分享SDK的时候，使用<code>cocoapods</code>导入的友盟分享组件，在命令行敲下pod install只会，安装也完成了，就是出现以下一些警告，我大概浏览了一下，看不出所以然，就没管, 继续在集成。</p>

<!--more-->


<p><i>[!] The <code>ULife [Debug]</code> target overrides the <code>OTHER_LDFLAGS</code> build setting defined in <code>Pods/Target Support Files/Pods-ULife/Pods-ULife.debug.xcconfig'. This can lead to problems with the CocoaPods installation
    - Use the</code>$(inherited)` flag, or
    - Remove the build settings from the target.</p>

<p>[!] The <code>ULife [Release]</code> target overrides the <code>OTHER_LDFLAGS</code> build setting defined in <code>Pods/Target Support Files/Pods-ULife/Pods-ULife.release.xcconfig'. This can lead to problems with the CocoaPods installation
    - Use the</code>$(inherited)` flag, or
    - Remove the build settings from the target.<br/>
</i></p>

<p>直到我开始使用友盟的一些类库时，使用也是没有问题的，可当我编译时，却出现了以下错误信息：</p>

<p><i>Undefined symbols for architecture arm64:
  &ldquo;<em>OBJC_CLASS</em>$_UMSocialManager&rdquo;, referenced from:
      objc-class-ref in AppDelegate.o
ld: symbol(s) not found for architecture arm64
clang: error: linker command failed with exit code 1 (use -v to see invocation) </i></p>

<p>咋一看，还以为是不支持64位呢，可是官方明明写着支持64位的，也就没有去怀疑官方，就开始各种清理缓存，重复编译，各种谷歌，百度，可终究没有可行的办法。去友盟问客服，沟通成本太高，每次掉线，重新连接又是一个新人，也未能解决。</p>

<p>实在没有办法了，我又重新pod update一下，这次发现依然是上面提到的警告信息，这次我没有忽略，而是仔细的看了下，大概知道了，产生此警告的原因是项目 Target 中的一些设置，CocoaPods 也做了默认的设置，如果两个设置结果不一致，就会造成问题。</p>

<p>警告中，提示要想使用cocoapods中的设置，需要在项目中定义<code>PODS_ROOT</code> 和 <code>Other Linker Flags</code>的地方，把他们的值用<code>$(inherited)</code>替换掉。</p>

<p>大致解决办法知道了， 开始在<code>Build Settings</code>中的PODS_ROOT<code>和</code>Other Linker Flags<code>处进行修改，添加一项</code>$(inherited)<code>，Other Linker Flags</code>我这里没有替换掉，而是添加一项，怕我本来的项也是有用的，就没有替换。</p>

<p>最后修改后，我再次编译，竟然通过了，我喜极而泣的写下了这篇文章来记录下这次忽略警告的教训经历。</p>

<hr />

<p>注：在我在网上搜索时，有说，点击项目文件 project.xcodeproj，右键<code>显示包内容</code>，用文本编辑器打开<code>project.pbxproj</code>，删除<code>OTHER_LDFLAGS</code>的地方，保存，回到 Xcode，编译也能通过。这种删除内容的解决办法，我一般不轻易使用的，所以我没有去证实这种做法，若有兴趣，你可以尝试下，不过做好备份哦~~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[读书，从2017开始]]></title>
    <link href="http://ashen-zhao.github.io/blog/2017/01/23/reading/"/>
    <updated>2017-01-23T11:23:46+08:00</updated>
    <id>http://ashen-zhao.github.io/blog/2017/01/23/reading</id>
    <content type="html"><![CDATA[<h3>诱因</h3>

<p>&emsp;&emsp;最近发生了很多事，让我开始反思自己，让我逐渐认识到自己的不足。工作上，同事一个个能言善辩，应答如流，而我却如同木头一般。生活上，朋友们都在笑谈风声，而我却又如同木头一般。每到这个时候，心情就会有点不好，心情不好我就会去看一些大牛的博客，不看技术的，只看大牛的一些生活记录博客，看大牛写的一些博客，对生活，对工作的见解，很是到位，看来他们也是读了无数的书，才能有如此的见解，让我心生敬佩、向往。</p>

<p>&emsp;&emsp;究其原因就是我读书太少，没有那么多墨水，来表达心中所想。很感谢，哪些能力比较强的人，让我认识自己的不足，至少现在开始我还来得及弥补。</p>

<!--more-->


<h3>读书，从2017开始</h3>

<p>&emsp;&emsp;找到自己缺少什么，就去做什么，是一件简单却又难以坚持的事情。读书，对于我来说，可能比较陌生，我很少去读书，偶尔也就看个短文，对于一本本厚厚的书籍，我是没看过几本的。著名的四大名著，我是一页都没看过的，这可能是种遗憾吧，但这也是个警钟，每每想起都会让我觉得，读书，读书，读书的重要性。 之说以在这里写下这边文章，我也是想监督下自己，不再向以往那样，只是嘴皮子上说说而已，这次要拿出实际行动来读书。</p>

<p>读书，从2017年开始。</p>

<h3>读书计划</h3>

<p>1.每两个月或者一个月读一本书<br/>
2.读完一本做阅后感<br/>
3.前4个月，可以不用严格执行第一条（刚开始不能太多要求）<br/>
4.读书方式，可选择电子书、纸质书等</p>

<h3>读书目的</h3>

<p>丰富自己的知识体系，提高自己的表达能力以及沟通能力，摆脱被淘汰的可能，能做到自己营销，摆脱社交恐惧症。。。。</p>

<hr />

<p>随时随地随便谁。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[探索Xcode8编译为什么那么慢？]]></title>
    <link href="http://ashen-zhao.github.io/blog/2016/12/21/xcode8build/"/>
    <updated>2016-12-21T10:12:58+08:00</updated>
    <id>http://ashen-zhao.github.io/blog/2016/12/21/xcode8build</id>
    <content type="html"><![CDATA[<h3>背景</h3>

<p>随着<code>Xcode8</code>和<code>swift3.0</code>的正式到来，我开始着手将<code>swift2.3</code>的项目转到<code>swift3</code>（至于转换过程，这里不多做介绍，Xcode自带的转换工具，基本可以转换80%左右，剩下的自己慢慢调试即可。）但是，转到swift3只会，在用Xcode8编译，发现编译过程变得非常慢，哪怕打一个空格，都要重新编译很久。于是在网上查找解决办法，查找了半天各种方法全用，发现于事无补。<br/>
&emsp;&emsp;有什么加一个<code>HEADERMAP_USES_VFS = YES</code>（）<a href="http://www.cnblogs.com/qqsscc/p/6044234.html">这是地址，反正这个对我没用，感兴趣的话自己试试</a></p>

<h5>针对这种情况，我就自己探索，出发点是排查哪些文件，哪些方法导致编译变慢？</h5>

<h3>探索Xcode编译，在哪些地方可以看到编译文件过程</h3>

<hr />

<p>通过多次编译查看，发现在Xcode左边栏，最后一个选项，是每次的编译运行等记录， 每行记录中都会有每次编译的文件编译记录。如下图</p>

<!--more-->


<p>
<img src="http://ashen-zhao.github.io/images/build1.png" alt="图1" /></p>

<p>再次查看正在编译的一条记录(正在编译的记录后面有一个转圈圈的”菊花“)，发现有图中1、2两种标识， 一个绿色✅说明，这是编译完成了，另一个是灰色→箭头，说明是正在编译；此时发现灰色一直停留在这里，指向图中的文件，左边的菊花一直转个不停， 编译卡住了。这样一来就找到编译是什么文件导致的那么慢。</p>

<p><img src="http://ashen-zhao.github.io/images/build2.png" alt="图2" /></p>

<h3>排查文件中哪些代码导致的编译卡住？</h3>

<hr />

<p>排查的方法，采用比较笨的方法，暴力注释方法：<strong><em>就是注释找到卡住的文件中的所有方法里的代码，不要注释方法，再次编译，此时发现该文件很快通过编译，然后在依次解开部分方法注释，再次编译，直到发现解开某个方法的注释后，编译再次卡住，那就说明那个方法中的代码写的有问题，然后在依次注释，解开注释，排查方法中的某一行代码的问题。</em></strong>经过一番排查，我找到了我代码中卡住的部分代码，如下图红色圈中的代码</p>

<p><img src="http://ashen-zhao.github.io/images/build3.png" alt="图3" /></p>

<p><font color=red>在字典中的key对应的value，没有给直接的值，而是给出一个表达式，这样会导致Xcode8的编译速度极其慢，不知道为什么会出现这样的问题，之前的Xcode版本是没有的。</font></p>

<p>找到问题所在，解决问题就简单了，于是修改代码如下图：</p>

<p><img src="http://ashen-zhao.github.io/images/build4.png" alt="图4" /></p>

<p>修改之后，再次编译，重新回到了快速编译的时代了，再也不用等上5-10分钟不等了。</p>

<p>  以上过程，是针对我遇到的问题而言的，不知道是否存在普遍性，如若你也遇到，刚好看了我的文章，也解决了问题，那就会心一笑吧，如若你也遇到了，但是没有解决问题，也请你会心一笑吧。<br/>
     <a href="https://forums.developer.apple.com/thread/62737">这是苹果开发者提到的Xcode8编译超慢的问题，我看了下，也做了对应修改，发现对我并没有什么用， 感兴趣的话进去看看吧</a></p>

<p>有时候自己慢慢去探索出问题的所在，也是很不错的体验。</p>

<hr />

<h3>后知后觉</h3>

<hr />

<p>后来我知道了，也可以通过，查看具体的swift函数编译时间来定位哪个函数卡住了，而不用<code>暴力注释法</code>.<br/>
首先要到Build Settings 给 Other Swift Flags  添加一项<code>
-Xfrontend -debug-time-function-bodies</code> <br/>
就可以查看编译通过的文件中的函数编译时间，找到绿色✅的文件的那一行，在最后面有一个图标，点击展开具体内容，向下移动就会看到每个函数执行的具体时间。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 中的网络加密]]></title>
    <link href="http://ashen-zhao.github.io/blog/2016/08/05/https/"/>
    <updated>2016-08-05T17:28:40+08:00</updated>
    <id>http://ashen-zhao.github.io/blog/2016/08/05/https</id>
    <content type="html"><![CDATA[<h2>iOS 中的网络加密</h2>

<hr />

<h5>引言：公司的接口一般会两种协议的，一种HTTP，一种HTTPS的，HTTP 只要请求，服务器就会响应，如果我们不对请求和响应做出加密处理，所有信息都是会被检测劫持到的，是很不安全的，客户端加密可以使用本文这套工具类进行处理。但是不论在任何时候，都应该将服务置于HTTPS上，因为它可以避免中间人攻击的问题，还自带了基于非对称密钥的加密通道。</h5>

<h3>HTTPS交互原理</h3>

<p>简答说，HTTPS 就是 HTTP协议加了一层SSL协议的加密处理，SSL 证书就是遵守 SSL协议，由受信任的数字证书颁发机构CA（如GlobalSign，wosign），在验证服务器身份后颁发，这是需要花钱滴，签发后的证书作为公钥一般放在服务器的根目录下，便于客户端请求返回给客户端，私钥在服务器的内部中心保存，用于解密公钥。</p>

<h4>HTTPS 客户端与服务器交互过程：</h4>

<p>1）客户端发送请求，服务器返回公钥给客户端；</p>

<p>2）客户端生成对称加密秘钥，用公钥对其进行加密后，返回给服务器；</p>

<p>3）服务器收到后，利用私钥解开得到对称加密秘钥，保存；</p>

<p>4）之后的交互都使用对称加密后的数据进行交互。</p>

<!--more-->


<h3>证书</h3>

<p>简单说，证书有两种，一种是正经的：</p>

<p>CA颁发的证书</p>

<p>一种是不正经的：</p>

<p>自己生成签发的证书</p>

<h3>我们需要做什么</h3>

<p>如果遇到正经的证书，我们直接用AFNetworking 直接请求就好了，AFNetworking 内部帮我们封装了HTTPS的请求方式，但是大部分公司接口都是不正经的证书，这时需要我们做以下几步：</p>

<p>1）将服务器的公钥证书拖到Xcode中</p>

<p>2）修改验证模式</p>

<pre><code>manager.securityPolicy = [AFSecurityPolicy policyWithPinningMode:AFSSLPinningModePublicKey];
</code></pre>

<h3>原理</h3>

<p>简单来说，就是你本可以修改AFN这个设置来允许客户端接收服务器的任何证书，但是这么做有个问题，就是你无法验证证书是否是你的服务器后端的证书，给中间人攻击，即通过重定向路由来分析伪造你的服务器端打开了大门。</p>

<pre><code>AFSecurityPolicy *securityPolicy = [AFSecurityPolicy defaultPolicy];
securityPolicy.allowInvalidCertificates = YES;
</code></pre>

<h3>解决方法</h3>

<p>AFNetworking是允许内嵌证书的，通过内嵌证书，AFNetworking就通过比对服务器端证书、内嵌的证书、站点域名是否一致来验证连接的服务器是否正确。由于CA证书验证是通过站点域名进行验证的，如果你的服务器后端有绑定的域名，这是最方便的。将你的服务器端证书，如果是pem格式的，用下面的命令转成cer格式</p>

<pre><code>openssl x509 -in &lt;你的服务器证书&gt;.pem -outform der -out server.cer
</code></pre>

<p>然后将生成的server.cer文件，如果有自建ca，再加上ca的cer格式证书，引入到app的bundle里，AFNetworking在</p>

<pre><code>AFSecurityPolicy *securityPolicy = [AFSecurityPolicy AFSSLPinningModeCertificate];
</code></pre>

<p>或者</p>

<pre><code>AFSecurityPolicy *securityPolicy = [AFSecurityPolicy AFSSLPinningModePublicKey];
</code></pre>

<p>情况下，会自动扫描bundle中.cer的文件，并引入，这样就可以通过自签证书来验证服务器唯一性了。</p>

<h3>AFSecurityPolicy三种验证模式</h3>

<p>1）AFSSLPinningModeNone
这个模式表示不做SSL pinning，
只跟浏览器一样在系统的信任机构列表里验证服务端返回的证书。若证书是信任机构签发的就会通过，若是自己服务器生成的证书就不会通过。</p>

<p>2）AFSSLPinningModeCertificate
这个模式表示用证书绑定方式验证证书，需要客户端保存有服务端的证书拷贝，这里验证分两步，第一步验证证书的域名有效期等信息，第二步是对比服务端返回的证书跟客户端返回的是否一致。</p>

<p>3）AFSSLPinningModePublicKey
这个模式同样是用证书绑定方式验证，客户端要有服务端的证书拷贝，
只是验证时只验证证书里的公钥，不验证证书的有效期等信息。只要公钥是正确的，就能保证通信不会被窃听，因为中间人没有私钥，无法解开通过公钥加密的数据。</p>

<hr />

<p>此文章转载自：<a href="http://charsdavy.github.io/2016/06/15/ios-network-encrypt">http://charsdavy.github.io/2016/06/15/ios-network-encrypt</a> <br/>
感谢原作者让我们又学到了知识。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[二维码扫描识别]]></title>
    <link href="http://ashen-zhao.github.io/blog/2016/07/20/qrcode/"/>
    <updated>2016-07-20T14:31:51+08:00</updated>
    <id>http://ashen-zhao.github.io/blog/2016/07/20/qrcode</id>
    <content type="html"><![CDATA[<p>&emsp;最近忙于工作，工作之余也在学习swift，在github上开源了正在开发维护的swift项目<a href="https://github.com/ashen-zhao/baisiapp">模仿的百思不得姐</a>；不过今天不是来介绍这个开源项目的，而是来给大家介绍一个很简单的功能之 iOS 二维码扫描识别；</p>

<h5>我将该功能进行了简单的封装，只需要简单调用就可以实现；</h5>

<h5>封装文件：</h5>

<p><code>QRCodeManager.h</code>该文件是封装的二维码识别功能</p>

<h5>调用方法：</h5>

<pre><code>    _qr = [[QRCodeManager alloc] init];
     _qr.delegate = self;
    [_qr configureManager:self.view];
</code></pre>


<p></p>

<h5>服从协议<code>QRCodeManagerDelegate</code>实现代理方法：</h5>

<p><code>- (void)qrCodeResult:(NSString *)result</code> ，result即为扫描识别到的二维码信息了，就是这么简单。</p>

<h4>Demo示例图</h4>

<p><img src="http://ashen-zhao.github.io/images/qrcode.gif" alt="二维码扫描识别" /></p>

<h4>Demo源码地址：</h4>

<p><a href="https://github.com/ashen-zhao/asqrcode">二维码扫描识别Demo下载地址</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[让UIImageView显示Gif图]]></title>
    <link href="http://ashen-zhao.github.io/blog/2016/04/14/gifimageview/"/>
    <updated>2016-04-14T13:57:05+08:00</updated>
    <id>http://ashen-zhao.github.io/blog/2016/04/14/gifimageview</id>
    <content type="html"><![CDATA[<p>&emsp;各位同学们，这次给大家分享一个小工具，可以解决你在开发过程中，需要显示Gif图片的需求；由于太过于简单，我这里就不多说了；有需要的同学，请前往<a href="https://github.com/ashen-zhao/asGifImageView">https://github.com/ashen-zhao/asGifImageView</a>进行下载，不需要的同学也可以去Star，留着以后使用，最后，记得关注我哦，哈哈😄；</p>

<h2>接下来，简单写一下如何使用该工具</h2>

<h4>示例图</h4>

<p><img src="http://ashen-zhao.github.io/images/gifView.gif" alt="啊神gifUIImageView" /></p>

<h4>功能说明：</h4>

<p>这是一个UIImageView的分类，可以让UIImageView支持显示本地Gif以及网络Gif图片。</p>

<h4>使用说明</h4>

<p>1.导入分类头文件 <code>#import "UIImageView+ASGif.h"</code><br/>
2.调用<br/>
&emsp;a.显示本地gif图片 <br/>
    <code>[self.gifImgV showGifImageWithData:[NSData dataWithContentsOfFile:[[NSBundle mainBundle] pathForResource:@"abc" ofType:@"gif"]]];</code><br/>
&emsp;b.显示网络gif图片<br/>
       <code>[self.gifImgV showGifImageWithURL:[NSURL URLWithString:@"http://ww1.sinaimg.cn/large/85cccab3gw1etdi67ue4eg208q064n50.gif"]];</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS之接地气的移动支付]]></title>
    <link href="http://ashen-zhao.github.io/blog/2016/01/26/pay/"/>
    <updated>2016-01-26T11:15:35+08:00</updated>
    <id>http://ashen-zhao.github.io/blog/2016/01/26/pay</id>
    <content type="html"><![CDATA[<h3>iOS 移动支付之种类</h3>

<p>iOS 端的移动支付，大概包括：支付宝支付、微信支付、银联卡支付、paypal支付，现在又多出一个Apple pay支付；</p>

<h3>如何集成这些种类的支付方式</h3>

<p>谈及如何集成这些支付方式，面对各种支付方式的SDK以及Demo写的详细的完美无缺，我还真不如还如何去写，这里我就接地气的写写，写的不好请勿喷哦☺！</p>

<h3>支付宝支付</h3>

<h3>大致有以下步骤：</h3>

<h4>1.向支付宝申请, 与支付宝签约，获得商户PID（partner）和账号ID（seller）和私钥(privateKey)</h4>

<p>注：*这一步，一般公司会搞定的，这里只是让你知道来龙去脉☺<br/>
&emsp; 没有支付宝账号的同学，可以<a href="https://memberprod.alipay.com/account/reg/index.htm">点击这里注册账号</a>; <br/>
&emsp; 已经有支付宝账号的同学<a href="https://b.alipay.com/order/productDetail.htm?productId=2015110218010538">点击这里申请移动支付</a><br/>
申请签约有个门槛比较难，就是不管你是个人还是企业，都需要营业执照，这点有点蛋疼，不过人家也是为了有质量的管理申请者嘛，可以理解，我这里没有营业执照，申请工作就死在了摇篮里，不过大致流程，我基本弄清楚了，<strong>不过作为开发者，这申请工作就不用多关心了，一般公司都会有申请过的</strong>，我这里写出来也就是让我们开发者也大概知道流程，而不是直接就是用，只知去向，不知来龙。  <br/>
申请签约成功后，就可以查看 PID（partner）和账号ID（seller）和私钥(privateKey) ，<a href="https://b.alipay.com/order/serviceIndex.htm">查看地址点击这里</a> 进行登录，点击下图中的查询PID和Key;<br/>
<img src="http://ashen-zhao.github.io/images/pay01.png" alt="Pay" /></p>

<!--more-->


<p>但是这里查询到的Key 是公钥，不是私钥，你到底该怎么弄私钥呢？同学们，不用急，支付宝文档写的还是比较清楚的，<a href="https://doc.open.alipay.com/doc2/detail.htm?spm=a219a.7629140.0.0.cxzipP&amp;treeId=58&amp;articleId=103242&amp;docType=1">点击这里可以查看RSA私钥及公钥生成</a></p>

<p>这里文档给出了两种平台下的生产方式，我们既然是iOS 开发者，那就选择Linux用户生产的方式吧，可以直接在Mac的终端敲这些命令；
<img src="http://ashen-zhao.github.io/images/pay02.png" alt="啊神支付" /><br/>
敲过这些命令后，会在本地生产两个文件，分别是私钥和公钥文件<br/>
在命令行敲入（以行为单位）<br/>
$cd ~/<br/>
$open .  //打开文件的存放位置<br/>
想要查看文件内容，还需要使用命令<br/>
$cat rsa_private_key.pem  //会在终端显示文件中的内容，这就是私钥<br/>
到这里，第一步基本上就可以了，具体还需要自己动手试试，不然还是会一头雾水。</p>

<h4>2.下载支付宝SDK以及Demo</h4>

<p>这一步，没啥好说的，给个地址就行<a href="https://doc.open.alipay.com/doc2/detail.htm?treeId=54&amp;articleId=104509&amp;docType=1">SDK以及Demo下载地址</a></p>

<h4>3.集成SDK到工程中（生成订单信息,签名加密）</h4>

<h5>支付宝官方集成文档</h5>

<p>集成支付宝SDK的步骤，这里是官方给出的<a href="https://doc.open.alipay.com/doc2/detail.htm?spm=a219a.7629140.0.0.SiPSmP&amp;treeId=59&amp;articleId=103676&amp;docType=1">集成文档</a>, 按照步骤集成总是会出错，这不是我们脑子不行，而是官方毕竟是官方。<br/>
查看支付宝给出的Demo，会发现这些文件必须要加到项目中：
<img src="http://ashen-zhao.github.io/images/pay05.png" alt="啊神" /><br/>
其中小方框中的为必须加入，而除了小方框以外的，那就要看你们后台人员是否将签名成功字符串格式化的订单字符串，给你传到前端来，如果没有，那就必须你自己在前端处理； 按理说，这些应该由后台来处理，为了订单信息的安全，以及前端业务的轻运行，都该有后端来处理（注：这点不懂，不要紧，后面还会根据代码在进行讲解;</p>

<h5>集成中可能遇到的错误</h5>

<p>1）Cannot find interface declaration for &lsquo;NSObject&rsquo;<br/>
<img src="http://ashen-zhao.github.io/images/pay03.png" alt="啊神" /><br/>
解决方案：a. 可以在报错的文件中加入<code>#import &lt;Foundation/Foundation.h&gt;</code><br/>
b. 可以建个pch文件加入</p>

<pre>`
#ifdef __OBJC__
#import UIKit/UIKit.h
#import Foundation/Foundation.h
#endif
`</pre>


<p></p>

<p>2)提示找不到 openssl/asn1.h 文件<br/>
<img src="http://ashen-zhao.github.io/images/pay06.png" alt="啊神" /><br/>
解决方案：Build Settings &ndash;> Search Paths &ndash;> Header Search paths:$(PROJECT_DIR)/ASPayDemo/Alipay<br/>
<img src="http://ashen-zhao.github.io/images/pay07.png" alt="啊神" /></p>

<p>3)_CNCopyCurrentNetworkInfo,referenced from:<br/>
<img src="http://ashen-zhao.github.io/images/pay08.png" alt="啊神" /><br/>
解决方案：添加SystemConfiguration.framework</p>

<p><img src="http://ashen-zhao.github.io/images/pay09.png" alt="啊神" /></p>

<h4>部署代码</h4>

<pre>
<code>

    NSString *partner = @""; //PID

    NSString *seller = @""; //收款账户，手机号或者邮箱
   
    NSString*privateKey= @"";// 私钥
    
    if ([partner length] == 0 ||
        [seller length] == 0 ||
        [privateKey length] == 0)
    {
        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"提示"
                                                        message:@"缺少partner或者seller或者私钥。"
                                                       delegate:self
                                              cancelButtonTitle:@"确定"
                                              otherButtonTitles:nil];
        [alert show];
        return;
    }
    
    Order *order = [[Order alloc] init];
    order.partner = partner;
    order.seller = seller;
    order.tradeNO = @"20160324012412412"; //订单ID（由商家自行制定）
    order.productName = @"iOS 高级教程"; //商品标题
    order.productDescription = @"这是一本关于iOS的一本高级教程书"; //商品描述
    order.amount = @"0.1"; //商品价格
    order.notifyURL = @"http://www.devashen.com/Notify/Alipay/"; //回调URL
    
    order.service = @"mobile.securitypay.pay";
    order.paymentType = @"1";
    order.inputCharset = @"utf-8";
    order.itBPay = @"30m";
    order.showUrl = @"m.alipay.com";
    
    NSString *appScheme = @"alisdkdemo";
    
    //将商品信息拼接成字符串   该方法支付宝已经封好
    NSString *orderSpec = [order description];
    
    
    //获取私钥并将商户信息签名,外部商户可以根据情况存放私钥和签名,只需要遵循RSA签名规范,并将签名字符串base64编码和UrlEncode
    id<DataSigner> signer = CreateRSADataSigner(privateKey);
    //调用签名
    NSString *signedString = [signer signString:orderSpec];
    
    
    
    
    //将签名成功字符串格式化为订单字符串,请严格按照该格式
    NSString *orderString = nil;
    if (signedString != nil) {
        orderString = [NSString stringWithFormat:@"%@&sign=\"%@\"&sign_type=\"%@\"",
                       orderSpec, signedString, @"RSA"];
        
        
        //***************上面提到好的后台，会把订单字符串直接传给我们，而我们要做的其实也就只剩下这一步了********************/
        [[AlipaySDK defaultService] payOrder:orderString fromScheme:appScheme callback:^(NSDictionary *resultDic) {
            if ([[resultDic objectForKey:@"resultStatus"] isEqualToString:@"9000"]) {
                //9000为支付成功
                
            }
            
        }];
    }

</code></pre>


<p>
看代码，如果后台将签名成功字符串格式化的订单字符串，给你传到前端来，那我们就只需要做很少的工作就可以了，只需要直接处理订单字符串即可：</p>

<pre><code>
        [[AlipaySDK defaultService] payOrder:orderString fromScheme:appScheme callback:^(NSDictionary *resultDic) {
            if ([[resultDic objectForKey:@"resultStatus"] isEqualToString:@"9000"]) {
                //9000为支付成功
                
            }
            
        }];
</code></pre>


<p>
最后，千万别忘了，在Appdelegate中，处理支付宝客户端返回url处理方法, 少了这一步，支付宝SDK的回调方法是不会执行的：</p>

<pre><code>
- (BOOL)application:(UIApplication *)application
            openURL:(NSURL *)url
  sourceApplication:(NSString *)sourceApplication
         annotation:(id)annotation {
   //跳转支付宝钱包进行支付，处理支付结果
        [[AlipaySDK defaultService] processOrderWithPaymentResult:url standbyCallback:^(NSDictionary *resultDic) {
            NSLog(@"result = %@",resultDic);
        }];
    return YES;
}
</code></pre>


<p>
到这里，支付宝支付基本上完成， 迫不及待的你，赶紧去试验试验吧， 别忘了给你们相关负责人要对应的PID、收款账号、以及私钥，当然如果后台直接传给你订单字符串的话，你可以直接给后台要接口了，置于PID什么的你就不用管了。</p>

<h5>相关连接</h5>

<p><a href="https://github.com/ashen-zhao/aspay">本文章对应的Demo, 包含后端是、否给你订单字符串的两种处理</a></p>

<p><a href="https://doc.open.alipay.com/doc2/detail.htm?spm=a219a.7629140.0.0.AIe1BQ&amp;treeId=59&amp;articleId=103563&amp;docType=1">支付宝移动支付SDK官方文档</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[仿照微博、微信弹出ActionSheet样式]]></title>
    <link href="http://ashen-zhao.github.io/blog/2016/01/22/assheet/"/>
    <updated>2016-01-22T15:08:16+08:00</updated>
    <id>http://ashen-zhao.github.io/blog/2016/01/22/assheet</id>
    <content type="html"><![CDATA[<p>&emsp;iOS 开发中，很多应用都会用到从屏幕底部弹出的UIActionSheet, 但是使用的过程中，总感觉系统的样式怪怪的，或者与自己开发的App的UI不是很协调，总之与自己的App搭配就一个字：丑。 说起ActionSheet样式，应该来看看主流的微博与微信是什么样式的；</p>

<p><img src="http://ashen-zhao.github.io/images/assheet02.PNG" width="200" height="370" alt="微信">
<img src="http://ashen-zhao.github.io/images/assheet01.PNG" width="200" height="370" alt="微博"></p>

<p>看上去的确挺自然，一点也不像系统自带的，给人的感觉就是不协调，不协调的</p>

<!--more-->


<p><img src="http://ashen-zhao.github.io/images/assheet03.png" width="200" height="370" alt="微信"></p>

<p>看吧,系统的与人家设计的，看上去就逊色许多。
出于比较喜欢微博、微信这种设计，就自己动手鼓弄着也写了个<a href="https://github.com/Ashen-Zhao/ASSheet">工具类</a>，为以后使用做准备，使用起来很简单，只需传入titles 数组，以及实现一个Block 点击回调，就可以很快的实现像微博微信那样的样式，先看看效果图吧：</p>

<p><img src="http://ashen-zhao.github.io/images/assheet04.gif" alt="啊神ActionSheet" /></p>

<h3>我是如何实现的</h3>

<p>&emsp;写一个继承自UIView的类，用这个view 来做为弹出后的幕布（也就是半透明的背景），然后给这个view 添加一个单击手势，手势方法就是讲该view移除隐藏的方法，然后将次view 背景色设置成半透明, 用 <code>[self setBackgroundColor:[UIColor colorWithWhite:0.5 alpha:0.5]]</code> 来设置半透明背景色。<br/>
&emsp;然后再定义个UIview *titleBgkView属性，该view 用来当titles 的幕布， 随后创建该view， 并且将此view 的frame 根据titles 的多少进行动态调整，我这里重写了大幕布的init 方法<code>- (instancetype)initWithFrame:(CGRect)frame titleArr:(NSArray *)titleArr</code> 传入titles 数组。 <br/>
&emsp;再然后，根据传入的titles 进行创建title按钮，将创建的按钮添加到titleBgkView 上。<br/>
噗，我这是写的啥，我还是直接上代码吧，对不住各位了，实在写不下去了，程序员嘛还是直接看代码来的最直接，对吧。
这是我的.m 文件实现代码</p>

<pre> <code> 
- (instancetype)initWithFrame:(CGRect)frame titleArr:(NSArray *)titleArr {
    self = [super initWithFrame:frame];
    size = [UIScreen mainScreen].bounds.size;
    [self setBackgroundColor:[UIColor colorWithWhite:0.5 alpha:0.5]];
    UITapGestureRecognizer *tap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(hiddenSheet)];
    [self addGestureRecognizer:tap];
    [self makeBaseUIWithTitleArr:titleArr];
    
    return self;
}

- (void)makeBaseUIWithTitleArr:(NSArray *)titleArr{
   
    self.bgkView = [[UIView alloc] initWithFrame:CGRectMake(0, size.height, size.width, titleArr.count * 50 + 55)];
    _bgkView.backgroundColor = [UIColor colorWithRed:0xe9/255.0 green:0xe9/255.0 blue:0xe9/255.0 alpha:1.0];
    [self addSubview:_bgkView];

    CGFloat y = [self createBtnWithTitle:@"取消" origin_y: _bgkView.frame.size.height - 50 tag:-1 action:@selector(hiddenSheet)] - 55;
    for (int i = 0; i < titleArr.count; i++) {
        y = [self createBtnWithTitle:titleArr[i] origin_y:y tag:i action:@selector(click:)];
    }
    [UIView animateWithDuration:0.3 animations:^{
        CGRect frame = _bgkView.frame;
        frame.origin.y -= frame.size.height;
        _bgkView.frame = frame;
    }];
   
}

- (CGFloat)createBtnWithTitle:(NSString *)title origin_y:(CGFloat)y tag:(NSInteger)tag action:(SEL)method {
    UIButton *btn = [UIButton buttonWithType:UIButtonTypeCustom];
    [btn setTitle:title forState:UIControlStateNormal];
    btn.frame = CGRectMake(0, y, size.width, 50);
    btn.backgroundColor = [UIColor whiteColor];
    btn.tag = tag;
    [btn setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];
    [btn addTarget:self action:method forControlEvents:UIControlEventTouchUpInside];
    [_bgkView addSubview:btn];
    return y -= tag == -1 ? 0 : 50.4;
}
- (void)hiddenSheet {
    [UIView animateWithDuration:0.3 animations:^{
        CGRect frame = _bgkView.frame;
        frame.origin.y += frame.size.height;
        _bgkView.frame = frame;
    }];
    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.3 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
        [self removeFromSuperview];
    });
}

- (void)click:(UIButton *)btn {
    if (self.Click) {
        _Click(btn.tag);
    }
}

</code> </pre>


<p></p>

<p>这是.h 文件代码</p>

<pre> <code> 
@property (nonatomic, copy) void (^Click)(NSInteger clickIndex);
- (instancetype)initWithFrame:(CGRect)frame titleArr:(NSArray *)titleArr;
- (void)hiddenSheet;

</code></pre>


<p></p>

<p>看吧，这多简单方便，有代码直接上，废话少说，程序员对代码的情结不容小觑，哼哈哈。</p>

<p>这里我也把使用的代码给贴出来吧，慢慢观察，仔细看，哈哈，使用起来很容易</p>

<pre> <code>
- (IBAction)showSheet:(id)sender {
    AS_Sheet *a = [[AS_Sheet alloc] initWithFrame:self.view.bounds titleArr:@[@"从手机相册选择", @"拍照", @"小视频"]];
    __weak typeof(a) weakA = a;
    a.Click = ^(NSInteger clickIndex) {
        switch (clickIndex) {
            case 0:
                NSLog(@"相册选择");
                break;
            case 1:
                NSLog(@"拍照");
                break;
            case 2:
                NSLog(@"小视频");
                break;
            default:
                break;
        }
        [weakA hiddenSheet];
    };
    [self.navigationController.view addSubview:a];
}

</code></pre>


<p></p>

<p>最后，老规矩我还是把<a href="https://github.com/Ashen-Zhao/ASSheet">Demo附上</a>，以供辅助参考，Demo中包含swift版本和OC版本</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[简单实现双击tabBarItem刷新页面]]></title>
    <link href="http://ashen-zhao.github.io/blog/2016/01/20/doubleclick/"/>
    <updated>2016-01-20T17:44:11+08:00</updated>
    <id>http://ashen-zhao.github.io/blog/2016/01/20/doubleclick</id>
    <content type="html"><![CDATA[<h3>如何实现双击tabbarItem刷新页面？</h3>

<p>&emsp;在网上寻找了一圈，众说纷纭，大差不差，而且基本上实现的不是双击才刷新，而是双击刷新一次后，只要再次单击就会刷新，这样很容易造成用户不小心点着，降低用户体验；见于这种局面，我花费了近一个小时，鼓捣出来了，只有双击的时候，才会去刷新页面（其实是伪双击，也就是单击两次，没有做两次单击时间间隔限制），废话不说了，直接上代码：</p>

<pre><code>
int i = 0;
- (BOOL)tabBarController:(UITabBarController *)tabBarController shouldSelectViewController:(UIViewController *)viewController{
    i++;
    UIViewController *tbSelectedController = tabBarController.selectedViewController;
    if ([tbSelectedController isEqual:viewController]) {
        if (currentIndex == 1 && tabBarController.selectedIndex == 1 && i % 2 != 0) {
            UINavigationController *nav = self.viewControllers[1];
            TestViewController *tVC = nav.viewControllers[0];
            [tVC doubleClickRefrsh];
        }
        currentIndex = tabBarController.selectedIndex;
        return NO;
    }
    i = 1;
    return YES;
}
</code></pre>


<p>
这里是 <code>UITabBarDelegate</code> 的代理方法，实现的是双击第二个tabBarItem，则刷新其对应的第一个视图的节目数据;<br/>
至于<code>i</code>的存在，是为了记录是否是双击，我是根据<code>i</code>是偶数还是奇数来进行判断的；<br/>
就酱紫吧，不清楚的只管拿去用就行了，我就不多解释了，只有这几行代码，真没啥解释的了(^o^)/~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 多语言版本的开发（三）]]></title>
    <link href="http://ashen-zhao.github.io/blog/2016/01/18/localized03/"/>
    <updated>2016-01-18T16:06:48+08:00</updated>
    <id>http://ashen-zhao.github.io/blog/2016/01/18/localized03</id>
    <content type="html"><![CDATA[<h3>写在前面</h3>

<p>&emsp;<a href="http://ashen-zhao.github.io/blog/2016/01/15/localized02/">iOS 多语言版本的开发（二）</a> 中我们实现了如何让用户自己去切换系统语言的功能，我们还写了<a href="https://github.com/Ashen-Zhao/easyLocalized">Demo</a> 以供辅助学习；但是，继以上两篇文章都是建立在项目刚刚启动或启动不久，项目中存在的中文字符串还不是很多，手动改起来也还可以接受; 那么问题来了，如果项目已经竣工或者已经迭代几个版本了，那该如何实现了？手动改起来也不太现实，耗时耗力不讨好的手动，在这里就不用考虑了。 不让考虑，是因为我有更简单快捷高效的方法，让我慢慢与您道来；</p>

<h3>如何辨别项目中的中文字符串?</h3>

<p>&emsp;既然要替换项目中使用到的中文字符串，那么前提就必须要先找到这些个字符串，然后将这些字符串，替换成我们定义的<strong>宏</strong>， 为了替换方便，可将这些字符串自身作为<code>key</code>， 这里不理解的不要紧，下面我还会讲到。 既然是辨别中文字符串，那也就是说在项目文件中进行匹配查找，说到匹配，那就需要正则表达式了，用正则表达式匹配Xcode中的使用的中文字符串，使用<code>(@"[^"]*[\u4E00-\u9FA5]+[^"\n]*?")\s*</code> 即可， 打开你的Xcode 试试看，切记find 后面的选项要选择 <code>Regular Expression</code>, 默认选中的是<code>Text</code>, 如图</p>

<!--more-->


<p><img src="http://ashen-zhao.github.io/images/localized301.png" alt="啊神多语言" /></p>

<h3>如何取出识别到的中文字符串？</h3>

<p>&emsp;我们已经知道如何识别项目中的字符串了，但是如何取出来使用呢？ 这就需要遍历项目中所有的指定后缀（e.g:  .h、.m等）的文件，然后利用正则表达匹配所有使用到的中文字符串，并写入文件中。为了方便起见，我将此过程写了一个Mac客户端<a href="https://github.com/Ashen-Zhao/ReadChinese">小应用</a>，可直接将选中的项目中所有的中文字符串，导出到指定的路径下；该应用还可以选择对于重复出现的中文字符串进行处理，以及还可以将中文字符串导出为繁体； <a href="https://github.com/Ashen-Zhao/ReadChinese">小应用</a>更值得关注的是它导出的文件，可以直接拿来当做多语言文件中的<code>key=value</code> 使用，非常简单，喜欢的可以去<a href="https://github.com/Ashen-Zhao/ReadChinese">下载看看</a>， 含有源码的哦；小应用运行图如下：</p>

<p><img src="http://ashen-zhao.github.io/images/readChinese.jpg" alt="啊神多语言" /></p>

<h3>如何使用取出的中文字符串？</h3>

<p>&emsp;已经拿到取出的中文字符串文件，这个文件是可以直接拿来用做多语言文件使用的，小应用导出的文件，只可以用于中文以及繁体多语言文件，而对于其他的语言，就需要你拿着导出的文件，找你们公司的翻译人员，进行翻译； 拿繁体版来举个例子，导出来的繁体文件如下（收留我App导出的文件）：</p>

<p><img src="http://ashen-zhao.github.io/images/localized303.png" alt="啊神多语言" /></p>

<p>这个繁体文件，可以直接作为繁体多语言使用，如何想要翻译成英文，可以将此文件拷贝一份，交给翻译人员，让其翻译。翻译的时候，你一定要给翻译人员沟通好，让其只翻译<code>value</code>, 也就是图中<code>=</code> 后面双引号中的内容，格式什么的也不要让他乱改，否则容易出现问题，导致key与value对不上号。 一切沟通妥当后，等翻译把文件给你后，直接将文件中的内容，复制到多语言文件的英语文件中即可；</p>

<h3>如何将项目中的中文字符串进行替换</h3>

<p>&emsp;多语言文件已经配置完成，到了这里，那么问题来了，我们只是取出项目中使用的中文字符串，然后将字符串封装成多语言文件，但是对于项目中使用的中文字符串依然还是中文字符串，我们还并没有进行替换处理。当然，这一步我们是不能够忘了，由于是替换项目中所有的使用中文字符串，我们还是谨慎为好，首先将你的项目进行<strong>备份、备份、备份</strong>，非常重要的事情说三篇，切记一定要备份。备份好后，我们就可以开始替换工作了，没有备份的不要往下看了，赶紧备份去；<br/>
&emsp;假设你已经备份好了，你就可以开始替换工作了，前面我们说过让中文字符串自身作为<code>key</code> 进行替换，之所以让其自身作为key, 是因为这样可以大大减轻替换的困难度，而且还有利于代码的可读性，基本上算是保持原有代码；既然要替换项目中的使用中文字符串，就要用到Xcode 自带的字符串替换功能，首先还需要使用正则表达式<code>(@"[^"]*[\u4E00-\u9FA5]+[^"\n]*?")\s*</code>，匹配出项目中使用的中文字符串，然后在对其进行替换处理。</p>

<p>&emsp;由于我们在<a href="http://ashen-zhao.github.io/blog/2016/01/15/localized02/">iOS 多语言版本的开发（二）</a>中，对取key对应的语言内容，进行了宏的封装, 这里我们可以将匹配到的使用中文字符直接替换成我们定义的宏的使用</p>

<pre><code>#define ASLocalizedString(key)  [NSString stringWithFormat:@"%@", [[NSBundle bundleWithPath:[[NSBundle mainBundle] pathForResource:[NSString stringWithFormat:@"%@",[[NSUserDefaults standardUserDefaults] objectForKey:@"appLanguage"]] ofType:@"lproj"]] localizedStringForKey:(key) value:nil table:@"ASLocalized"]] </code></pre>


<p>
以上是宏的定义，我们需要将字符串进行替换成宏的使用，如：<br/>
&emsp;替换前是这样的<code>_lbl.text = @"我是多语言";</code><br/>
&emsp;替换后<code>_lbl.text = ASLocalizedString(@"我是多语言")</code></p>

<p>替换规则如图：</p>

<p><img src="http://ashen-zhao.github.io/images/localized304.png" alt="啊神多语言" /></p>

<p>这次选中的是<code>Replace</code>, 不是<code>Find</code>。按图中所示，选择完毕后，点击<code>ReplaceAll</code>, 会出来一个弹框，不用管它直接继续，即可，然后你在看项目中使用到的中文字符串是否已经替换掉了，到这里基本上大功告成了；</p>

<h3>遗留问题</h3>

<p>1、正则表达式，不懂得可以先照文章里写就行，然后再去学习下，<a href="http://deerchao.net/tutorials/regex/regex.htm">这里有篇基础文章</a><br/>
2、ASLocalizedString(key) ， 该宏使用面积广，可以将其定义成公共头文件中，然后用时引用头文件即可，也可将文件封装进pch文件中，这样无需使用头文件接口使用<br/>
3、替换后，可能会有些地方报错，command + b 编译下，看看报错的地方，进行相应修改即可。报错原因：a. 可能是你定义的常量字符串； b. 可能是定义的宏；  c.  可能是替换后没有换行； 基本上报的错误很明显，进行修改即可；<br/>
4、在迭代版本中，再次使用中文字符串，就需要使用<code>ASLocalizedString(key)</code>， 来代替了，然后再多语言文件中，进行<code>key=value</code> 配置；</p>

<blockquote><h4>相关文章</h4>

<h4><a href="http://ashen-zhao.github.io/blog/2016/01/14/localized01/">iOS 多语言版本的开发（一）</a></h4>

<h4><a href="http://ashen-zhao.github.io/blog/2016/01/15/localized02/">iOS 多语言版本的开发（二）</a></h4></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 多语言版本的开发（二）]]></title>
    <link href="http://ashen-zhao.github.io/blog/2016/01/15/localized02/"/>
    <updated>2016-01-15T05:13:56+08:00</updated>
    <id>http://ashen-zhao.github.io/blog/2016/01/15/localized02</id>
    <content type="html"><![CDATA[<h3>题记</h3>

<p>&emsp;&emsp;<a href="http://ashen-zhao.github.io/blog/2016/01/14/localized01/">iOS 多语言版本的开发（一）</a> 中我们完成了让应用跟随系统语言进行切换，而用户自己却不能切换的功能，也基本上算是实现了多语言版本；可是，对于某些应用来说，实现跟随系统语言切换的同时， 也想要实现让用户自己选择应用语言版本的功能；针对这种情况，利用这篇文章来写写如何让用户自己切换应用语言版本；</p>

<h3>语言文件存在的形式</h3>

<p>想要实现用户自己手动切换语言版本，就先要了解语言文件在资源文件中存在的形式;</p>

<p><img src="http://ashen-zhao.github.io/images/localized09.png" alt="啊神多语言" /></p>

<p>如图中，不管是英语（en.lproj）、简体（zh-Hans.lproj）、还是繁体（zh-Hant.lproj）都是以<code>.lproj</code> 的文件夹形式存在, 所以当我们要切换语言的时候，其实也就是做到去取这些<code>.lproj</code> 文件夹中的<code>ASLocalized.strings</code>文件；</p>

<!--more-->


<p>
&emsp;到这里，原理应该懂了，接下来就是动手实现了；</p>

<h3>根据语言获取 ASLocalized.strings</h3>

<p>这时候，需要根据不同的<code>语言.lproj</code> 获取到对应的<code>ASLocalized.strings</code>语言文件, 从而让页面显示对应的语言内容;<br/>
这里暂且先根据English获取英语的语言文件，English 的.lproj存在的形式是<code>en.lproj</code></p>

<pre><code>
NSString *path = [[NSBundle mainBundle] pathForResource:@"en" ofType:@"lproj"];
NSString *showValue = [[NSBundle bundleWithPath:path] localizedStringForKey:@"showTxt" value:nil table:@"ASLocalized"];
NSLog(@"result: %@", showValue);
 </code></pre>


<p>输出结果：result: this is test text</p>

<p>以上代码，只是以English 为语言文件，是写死的，如果想要让用户自己手动改变，只需要替换掉 <code>[[NSBundle mainBundle] pathForResource:@"en" ofType:@"lproj"]</code> 中的<code>en</code> 为其他的语言标识就好了； 既然是用户手动切换，那就需要写代码去实现了；</p>

<p>到这里，有一个问题，<strong><em>如何让用户选择后一个语言后，即使程序退出后，下次进入依然保留呢</em></strong>， 既然需要保存数据，就要涉及到本地存储了，对于少量的保存我们可以使用<code>NSUserDefaults</code> 来操作，简单方便快捷；至于其他的存储方式四大基本对象的write方法，归档，sqllite，CoreData 需要的同学，可以自己去脑补，这里我不多介绍了；</p>

<h3>使用NSUserDefaults 记录选择的语言</h3>

<p>这里我简单写了个界面，作为辅助讲解</p>

<p><img src="http://ashen-zhao.github.io/images/localized10.png" alt="多语言" width="300" height="450"></p>

<pre><code>
- (IBAction)changeLanguage:(UIButton *)sender {
    
    switch (sender.tag) {
        case 101: { //简体
            [[NSUserDefaults standardUserDefaults] setObject:@"zh-Hans" forKey:appLanguage];
        }
            break;
        case 102: { //繁体
            [[NSUserDefaults standardUserDefaults] setObject:@"zh-Hant" forKey:appLanguage];
        }
            break;
        case 103: { //English
            [[NSUserDefaults standardUserDefaults] setObject:@"en" forKey:appLanguage];
        }
            break;
        default:
            break;
    }
}
</code></pre>


<p></p>

<p>以上方法，是图中三种语言的点击事件，分别将对应的语言标识，记录到<code>NSUserDefaults</code> 对应的 <code>appLanguage</code> key 中</p>

<p>既然重新选择了语言，就需要重新加载控件的内容，因为是Demo🐴，这里直接将给控件赋值写成一个方法，如下：</p>

<pre><code>
- (void)showLbl {
    NSString *lanType =[NSString stringWithFormat:@"%@", [[NSUserDefaults standardUserDefaults] objectForKey:@"appLanguage"]];
    
    NSString *path = [[NSBundle mainBundle] pathForResource:lanType ofType:@"lproj"];
    
    NSString *showValue = [[NSBundle bundleWithPath:path] localizedStringForKey:@"showTxt" value:nil table:@"ASLocalized"];
    NSLog(@"result: %@", showValue);
    self.lblShowTxt.text = showValue;
}

</code></pre>


<p></p>

<p>可将此方法在点击事件中调用下，即可；</p>

<p>Demo效果图：</p>

<p><img src="http://ashen-zhao.github.io/images/localized11.gif" alt="啊神多语言" /></p>

<h3>首次进入应用的考虑</h3>

<p>到这里，还没有完，这时我们需要考虑下，用户第一次进来时，该显示什么样的语言，是跟随系统，还是我们给一种默认的语言；</p>

<h4>1、给一种默认语言</h4>

<p>这种处理很简单，只需要在<code>didFinishLaunchingWithOptions</code> 方法中，进行判断本地是否记录了语言标识，如果没有给一种默认即可，代码如下：</p>

<pre>`
if (![[NSUserDefaults standardUserDefaults] objectForKey:appLanguage]) { 
     [[NSUserDefaults standardUserDefaults] setObject:@"zh-Hans"    forKey:appLanguage];
}`</pre>


<p></p>

<h4>2、跟随系统语言</h4>

<p>这种处理相对来说，比较复杂写，首页需要获取系统的首选语言顺序，然后取第一个首选语言，其次，还要判断你要做的语言版本，首选语言组中存在与否；<br/>
获取首选语言：<code> NSArray  *languages = [NSLocale preferredLanguages];</code><br/>
获取第一个首选语言：<code> NSString *language = [languages objectAtIndex:0];</code></p>

<p>处理过程如下：</p>

<pre><code>
if (![[NSUserDefaults standardUserDefaults] objectForKey:appLanguage]) {
        NSArray  *languages = [NSLocale preferredLanguages];
        NSString *language = [languages objectAtIndex:0];
        if ([language hasPrefix:@"zh-Hans"]) {
            [[NSUserDefaults standardUserDefaults] setObject:@"zh-Hans" forKey:appLanguage];
        } else if ([language hasPrefix:@"zh-TW"] || [language hasPrefix:@"zh-HK"] || [language hasPrefix:@"zh-Hant"]) {
            [[NSUserDefaults standardUserDefaults] setObject:@"zh-Hant" forKey:appLanguage];
        } else if ([language hasPrefix:@"en"]) {
            [[NSUserDefaults standardUserDefaults] setObject:@"en" forKey:appLanguage];
        }else{
            [[NSUserDefaults standardUserDefaults] setObject:@"zh-Hans" forKey:appLanguage];
        }
    }
</code></pre>


<p></p>

<p>注：由于繁体又有台湾繁体和香港繁体之分，所以代码中也做出了相应的处理；</p>

<p>╮(╯▽╰)╭ 到了这里基本上算是完成了多语言版本的工作了，但是，但是，但是，这只是完成了项目起步期，项目中还不存在大量的中文字符串的情况；暂时先不考虑项目已经开发完成的情况，接下来先来优化下，我们刚刚写过的代码；<br/>
对于 <code>showLbl</code> 方法中的内容，可以定义成宏，以供项目中，任何地方需要多元化时的使用;</p>

<pre><code> 
 #define ASLocalizedString(key)  [NSString stringWithFormat:@"%@", [[NSBundle bundleWithPath:[[NSBundle mainBundle] pathForResource:[NSString stringWithFormat:@"%@",[[NSUserDefaults standardUserDefaults] objectForKey:@"appLanguage"]] ofType:@"lproj"]] localizedStringForKey:(key) value:nil table:@"ASLocalized"]]
</code> </pre>


<p>
为了方便，我将<code>showLbl</code> 中取key对应的语言内容，封装进了一个带参数的宏中；</p>

<p>使用起来就很Easy了，只需要这样使用即可： <code>ASLocalizedString(@"showTxt")</code></p>

<p>我在github上，上传了本篇<a href="https://github.com/Ashen-Zhao/easyLocalized">Demo</a> 以供辅助参考；</p>

<p><a href="https://github.com/Ashen-Zhao/easyLocalized">查看Demo 点击这里</a></p>

<blockquote><h4>相关文章</h4>

<h4><a href="http://ashen-zhao.github.io/blog/2016/01/14/localized01/">iOS 多语言版本的开发（一）</a></h4>

<h4><a href="http://ashen-zhao.github.io/blog/2016/01/18/localized03/">iOS 多语言版本的开发（三）</a></h4></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 多语言版本的开发（一）]]></title>
    <link href="http://ashen-zhao.github.io/blog/2016/01/14/localized01/"/>
    <updated>2016-01-14T11:13:56+08:00</updated>
    <id>http://ashen-zhao.github.io/blog/2016/01/14/localized01</id>
    <content type="html"><![CDATA[<h2>引言</h2>

<p>&emsp;多语言 &amp; 本地化，随你怎么叫，道理差不多；一个App 要想走出国门，只支持一种语言是不能够的，也是不可能的，多元化世界已经融入我们的生活，对于一些应用，开发多语言版本，已经是不可避免的，特别是旅游等方面的应用；国内也有很多App 已经接入多语言，例如：支付宝、微信、收留我（嘻嘻，做下广告）等；</p>

<h2>开发多语言，一般有两种情况</h2>

<p>1、App还没有开始写，这个时候创建一个多语言版本，很是容易，然后再写代码的时候稍微留意下哪里需要保持多语言就行了；<br/>
2、App已经上线了，而且之前没有任何的为开发多语言准备过，这时候Boss让开发多语言版本，这下你就苦逼了，想想项目中长长短短的中文字符串，没有上千也得上几百了吧，在想想一个一个替换，哎呀妈呀，那么多，想想都想死了，在想想还容易出错，哎呀妈呀，让我死了算了；</p>

<!--more-->


<p>别急，这次我就针对两种情况都讲解下；</p>

<h3>项目刚开始启动</h3>

<h4>1、新建一个项目（我就不多说了）</h4>

<h4>2、command + N 添加多语言文件，如下图</h4>

<p><img src="http://ashen-zhao.github.io/images/localized01.png" alt="啊神添加多语言文件" /></p>

<h4>3、添加多语言，如图</h4>

<p><img src="http://ashen-zhao.github.io/images/localized02.png" alt="啊神添加多语言" /></p>

<p>选择English  点击Localize<br/>
<img src="http://ashen-zhao.github.io/images/localized03.png" alt="啊神添加多语言" /></p>

<p><strong>到这里已经算是添加好了多语言文件，接下来就是添加多语言</strong></p>

<p>之前的XCode（具体到哪一个版本之前，不清楚了，我使用的是XCode7），是可以在如下图中直接点击➕号 ，添加多语言的</p>

<p><img src="http://ashen-zhao.github.io/images/localized04.png" alt="添加多语言" /></p>

<p>现在需要进入项目的Project中的Localizations 中进行添加，如图</p>

<p><img src="http://ashen-zhao.github.io/images/localized05.png" alt="啊神添加多语言" /></p>

<p>我只添加了中文繁体，简体，以及英文，Demo使用的StoryBoard, 而添加多语言时，我没有选择为StoryBoard添加多语言版本的，毕竟是Demo🐴；但是不影响使用。</p>

<p><img src="http://ashen-zhao.github.io/images/localized06.png" alt="啊神添加多语言" /></p>

<p>到这里多语言文件中会出现如上图中的三个.strings 后缀的文件，这就是多语言对应的文件了，多语言添加的方式类似，字典 key=value 一一对应的关系，key 在三个.strings 中必须一致，而value 则分别对应不同的语言字体，即可；</p>

<h4>4、多语言文件的使用</h4>

<p>现分别在不同的语言文件中添加如下测试文本：</p>

<p><code>"showTxt"="this is test text";</code><br/>
<code>"showTxt"="这是一个测试的文本";</code><br/>
<code>"showTxt"="這是一個測試的文本";</code></p>

<p>说到使用，就要了解下<code>NSLocalizedString</code>  是什么</p>

<pre><code>
 #define NSLocalizedString(key, comment) \
        [[NSBundle mainBundle] localizedStringForKey:(key) value:@"" table:nil]
 #define NSLocalizedStringFromTable(key, tbl, comment) \
        [[NSBundle mainBundle] localizedStringForKey:(key) value:@"" table:(tbl)]
 #define NSLocalizedStringFromTableInBundle(key, tbl, bundle, comment) \
        [bundle localizedStringForKey:(key) value:@"" table:(tbl)]
 #define NSLocalizedStringWithDefaultValue(key, tbl, bundle, val, comment) \
        [bundle localizedStringForKey:(key) value:(val) table:(tbl)] </code></pre>


<p>其实就是宏，而宏定义的又是在资源文件中寻找对应的资源文件；<strong>在这里有个坑点</strong>，当你使用第一种实现多语言本地化，意味着你的多语言文件名字<strong>必须</strong>是<code>Localizable</code>,否则你的多语言实现，到最后显示的却只能是key； <br/>
第一种适合于，让应用跟随系统的语言版本进行切换，而用户却不能手动进行切换； 我们要实现的是既可以跟随系统，又可以用户自己切换，就不能使用这一个了，那就要使用第二种<code>NSLocalizedStringFromTable(key, tbl, comment)</code>&emsp;tbl这个参数，就是我们自己命名的多语言文件名称；</p>

<p>因此我们暂且这样使用（这样直接使用，会跟随系统语言）：</p>

<p><code>NSLocalizedStringFromTable(@"showTxt", @"ASLocalized", nil);</code></p>

<p>参数说明： 第一个参数，是多语言中的key, 第二个参数，是多语言文件的名字，第三个是对key的注释说明，一般为nil就可以了；</p>

<p>对于这样使用<code>NSLocalizedString("showTxt", nil)</code> ，切记多语言文件名<strong>必须</strong>是<code>Localizable</code>, 这里我们就不可以使用这种了；</p>

<h4>到这里，就可以实现简单的跟随系统语言的多语言版本了;</h4>

<p>效果图如下：</p>

<p><img src="http://ashen-zhao.github.io/images/localized07.png" alt="啊神添加多语言" /><br/>
<img src="http://ashen-zhao.github.io/images/localized08.png" alt="啊神添加多语言" /></p>

<blockquote><h4>相关文章</h4>

<h4><a href="http://ashen-zhao.github.io/blog/2016/01/15/localized02/">iOS 多语言版本的开发（二）</a></h4>

<h4><a href="http://ashen-zhao.github.io/blog/2016/01/18/localized03/">iOS 多语言版本的开发（三）</a></h4></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GitHub 的简明教程之入门使用]]></title>
    <link href="http://ashen-zhao.github.io/blog/2016/01/12/githubused/"/>
    <updated>2016-01-12T10:22:46+08:00</updated>
    <id>http://ashen-zhao.github.io/blog/2016/01/12/githubused</id>
    <content type="html"><![CDATA[<blockquote><h3>相关文章</h3>

<h4><a href="http://ashen-zhao.github.io/blog/2016/01/11/gitsshkey/">GitHub 的简明教程之配置ssh key</a></h4></blockquote>

<h3>本地创建Git仓库</h3>

<h4>1、git init 初始化仓库</h4>

<p>打开terminal 命令窗口，利用cd 命令，进入你需要初始化的目录，执行git init 命令；<br/>
如出现以下类似的输出，则成功初始化<br/>
<code>Initialized empty Git repository in /Users/shou65/Desktop/myfirstgit/.git/</code></p>

<h4>2、git add . 添加到暂存区（保存项目索引，并生产快照）</h4>

<p>这一步一般什么的都不会输出，但是却已经添加好了，不用多想，继续下一步 （ps: git add 后面的点，不能忘）</p>

<!--more-->


<h4>3、git commit 提交仓库内容（提交项目索引）</h4>

<p><code>git commit -m 'fitst commit'</code></p>

<p>-m 之后的内容是对本次commit的描述</p>

<h5>4、git log (可忽略)</h5>

<p>查看提交的历史记录</p>

<h3>本地Git仓库推送到Github</h3>

<h4>1、首页github上需要创建个仓库,按下图一步一步走</h4>

<hr />

<p>进入github添加仓库界面
<img src="http://ashen-zhao.github.io/images/newGit.png" alt="啊神new" /></p>

<hr />

<p>填写仓库相关内容
<img src="http://ashen-zhao.github.io/images/gitfillcontent.png" alt="啊神addgithub" /></p>

<hr />

<p>仓库创建成功界面，记住图片中的地址
<img src="http://ashen-zhao.github.io/images/githubURL.png" alt="啊神url" /></p>

<h4>2、添加远程仓库，这时候图片中的地址，就有用了</h4>

<p>执行命令：<code>git remote add origin git@github.com:Ashen-Zhao/firstgithub.git</code></p>

<p>git remote add 远程库的名字 远程库的URL</p>

<h4>3、推送到远程分支，git默认会创建一个master主分支</h4>

<p><code>git push origin master</code></p>

<p>到这里，就完成了本地git仓库提交到github了，有没有小激动，速去github刷新页面，看看你的成果吧</p>

<h3>将github仓库，弄到本地</h3>

<h4>1、使用git clone 仓库地址（克隆一个新的仓库）</h4>

<p><code>git clone git@github.com:Ashen-Zhao/firstgithub.git</code></p>

<h4>2、将本地仓库更新至远程仓库</h4>

<p><code>git pull origin master</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GitHub 的简明教程之配置ssh key]]></title>
    <link href="http://ashen-zhao.github.io/blog/2016/01/11/gitsshkey/"/>
    <updated>2016-01-11T17:22:46+08:00</updated>
    <id>http://ashen-zhao.github.io/blog/2016/01/11/gitsshkey</id>
    <content type="html"><![CDATA[<h2>Git &amp; GitHub极简介</h2>

<p>git 是分布式的代码管理工具，远程的代码管理是基于ssh的，所以要使用远程的git则需要ssh的配置<br/>
github 开源代码库以及版本控制系统</p>

<h2>GitHub的配置</h2>

<h3>1.检查是否已经存在ssh 密钥</h3>

<p>输入 ls -al ~/.ssh 命令  查看是否存在<code>id_rsa.pub</code> 和 <code>id_rsa</code> 文件</p>

<p><img src="http://ashen-zhao.github.io/images/isHassshkey.png" alt="啊神附图1" /><br/>
如果存在，则执行第 3 步， 否则执行第 2 步
  <!--more--></p>

<h3>2.生成新的ssh 密钥</h3>

<p>输入 ssh-keygen -t rsa -C “emailname@gmail.com”  回车，会让你输入密码，直接输入三个空格，不要密码即可  <br/>
最后得到了两个文件：id_rsa和id_rsa.pub</p>

<h3>3.将ssh key添加到GitHub中</h3>

<p>打开<a href="https://github.com">github</a> 添加 SSH Key 页面</p>

<p><img src="http://ashen-zhao.github.io/images/goaddsshkey.png" alt="啊神附图2" />  <img src="http://ashen-zhao.github.io/images/addsshkey.png" alt="啊神附图2" /><br/>
这要添加的是<code>id_rsa.pub</code>里面的公钥;<br/>
进入ssh. 目录下，输入 cat id_rsa.pub 即可在窗口中看到公钥，将公钥从 ssh-key 一直复制到邮箱地址（包含邮箱），然后粘贴到github 添加ssh key 的key 输入框中，title则随意输入，然后点击Add 即可；</p>

<blockquote><h3>相关文章</h3>

<h4><a href="http://ashen-zhao.github.io/blog/2016/01/12/githubused/">GitHub 的简明教程之入门使用</a></h4></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UIWebView 与 原生系统的简单跳转交互]]></title>
    <link href="http://ashen-zhao.github.io/blog/2016/01/11/webview/"/>
    <updated>2016-01-11T10:15:09+08:00</updated>
    <id>http://ashen-zhao.github.io/blog/2016/01/11/webview</id>
    <content type="html"><![CDATA[<h3>简单介绍UIWebView</h3>

<p> 关于UIWebView这里我就不多介绍了，可以简单理解为一个在iOS 端显示网页的一个控件；</p>

<h3>UIWebView的使用</h3>

<p> 它既然也是view，当然就可以像其他view一样的创建，如下：</p>

<pre><code> UIWebView *webView = [[UIWebView alloc] initWithFrame:CGRectMake(0, 0, 320, 560)];

 webView.delegate = self;//先在此设置下代理，等下会实现其代理方法</code></pre>


<p> <!--more-->
 当然这是创建一个对象，想要加载一个网页还需要实现<code>loadRequest:</code>这个方法；这时你会发现该方法需要一个<code>NSURLRequest</code>类型的参数；那简单我们就来创建一个又如何；我们使用NSURLRequest的类方法<code>requestWithURL:</code>来创建；咦，又会发现这个类方法需要一个<code>NSURL</code>类型的参数；不管了，那就先创建NSURL对象吧；</p>

<pre><code>
 NSURL *url = [NSURL URLWithString:@"http://www.baidu.com"];

[webView loadRequest:[NSURLRequest requestWithURL:url];</code></pre>


<p> 切记后面一定要是一个可访问的网址；
 最后，因为它也是View，别忘记加到父视图上</p>

<pre><code>[self.view addSubview:webView];</code></pre>


<p>既然要实现与原生系统的交互，那就不得不实现它的代理方法</p>

<pre><code>-(BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)navigationType {
   NSString *urlStr = request.URL.absoluteString; //取出webView交互的url链接；
        //根据urlStr链接中的参数，去push到系统中的任何页面都可以的
       /*实现code
        .....
       */
      return YES;
}</code></pre>


<p> <b>附加说明</b>：urlStr是网页中，点击带有响应，传过来的网址，这个网址要看你服务端给的什么内容，针对内容去跳转到对象的页面(如：是一个头像的点击，则跳转到对应的用户信息，这是网址中，服务端就应该封装的有对应的用户的ID);
 该代理方法返回值是BOOL类型的，所以当你需要用webView来显示的时候，一定要返回YES; 至于跳转到App内其他页面就没有这么讲究了，YES or NO all ok; 建议返回NO, 以免出现web内与应用内两次跳转；
 如果服务端需要传参数进去（如：token) ，这是你就需要在创建<code>NSURL</code>对象时，将token封装进去</p>

<pre>[NSURL URLWithString:@"http://www.baidu.com?token=pzshgawegwegeugiwef93i24"]</pre>


<h6>自己在项目中就是这么实现的，如果有疑问或者有更好地方法，请与留言交流；</h6>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[EasyMarkDown]]></title>
    <link href="http://ashen-zhao.github.io/blog/2016/01/08/easymarkdown/"/>
    <updated>2016-01-08T10:52:13+08:00</updated>
    <id>http://ashen-zhao.github.io/blog/2016/01/08/easymarkdown</id>
    <content type="html"><![CDATA[<h2>EasyMarkDown</h2>

<hr />

<h2>基本符号</h2>

<ul>
<li>*, _ , + 3个符号效果都一样，这3个符号被称为 Markdown符号 (符号使用时，有时一个符号不行，请速切换下一个符号)</li>
<li>空白行表示另起一个段落</li>
<li>`是表示inline代码，tab是用来标记 代码段，分别对应html的code，pre标签</li>
</ul>


<hr />

<h2>换行</h2>

<ul>
<li>单一段落( &lt;p>) 用一个空白行</li>
<li>连续两个空格 会变成一个 &lt;br></li>
<li>连续3个符号，然后是空行，表示 hr横线</li>
</ul>


<hr />

<h2>标题</h2>

<ul>
<li>生成h1&ndash;h6,在文字前面加上 1&ndash;6个# 来实现</li>
</ul>


<hr />

<h2>引用</h2>

<ul>
<li>在第一行加上 “>”和一个空格，表示代码引用，还可以嵌套</li>
</ul>


<hr />

<!--more-->


<h2>列表</h2>

<p>这个是markdown文件的主要表示方式，主题要点化</p>

<ul>
<li>使用*,+,-加上一个空格来表示</li>
<li>可以支持嵌套</li>
<li>有序列表用 数字+英文点+空格来表示</li>
<li>列表内容很长，不需要手工输入换行符，css控制段落的宽度，会自动的缩放的</li>
</ul>


<hr />

<h2>链接</h2>

<ul>
<li>直接写 [描述文本](url &ldquo;可选的title&rdquo;)</li>
<li>引用 先定义 [ref_name]:url，然后在需要写入url的地方， 这样使用[描述文本][ref_name]，通常的ref_name一般用数字表示，这样显得专业</li>
<li>简写url：用尖括号包裹url
这样生成的url锚文本就是url本身</li>
</ul>


<hr />

<h2>插入图片</h2>

<ul>
<li>一行表示: ![alt_text](url &ldquo;可选的title&rdquo;)</li>
<li>引用表示法: ![alt_text][id],预先定义 [id]:url &ldquo;可选title&rdquo;</li>
<li>直接使用&lt;img>标签，这样可以指定图片的大小尺寸</li>
</ul>


<hr />

<h2>特殊符号</h2>

<ul>
<li>用\来转义，表示文本中的markdown符号</li>
<li>可以在文本种直接使用html标签，但是要注意在使用的时候，前后加上空行</li>
<li>文本前后各加一个符号，表示斜体</li>
</ul>


<hr />

<h2>文本</h2>

<ul>
<li>文本对齐方式，使用html标签吧： text-align:center/right/left</li>
<li>文字加粗是通过 文字左右各两个符号</li>
<li>文字斜体是通过 文字左右各一个符号</li>
</ul>


<hr />

<p></br>
注：本文内容大致来自于：<a href="http://lutaf.com/markdown-simple-usage.htm">http://lutaf.com/markdown-simple-usage.htm</a></p>
]]></content>
  </entry>
  
</feed>
