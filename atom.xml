<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[啊神的技术博客]]></title>
  <link href="http://ashen-zhao.github.io/atom.xml" rel="self"/>
  <link href="http://ashen-zhao.github.io/"/>
  <updated>2016-04-18T16:03:17+08:00</updated>
  <id>http://ashen-zhao.github.io/</id>
  <author>
    <name><![CDATA[Ashen]]></name>
    <email><![CDATA[zhaoashen@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[让UIImageView显示Gif图]]></title>
    <link href="http://ashen-zhao.github.io/blog/2016/04/14/gifimageview/"/>
    <updated>2016-04-14T13:57:05+08:00</updated>
    <id>http://ashen-zhao.github.io/blog/2016/04/14/gifimageview</id>
    <content type="html"><![CDATA[<p>&emsp;各位同学们，这次给大家分享一个小工具，可以解决你在开发过程中，需要显示Gif图片的需求；由于太过于简单，我这里就不多说了；有需要的同学，请前往<a href="https://github.com/ashen-zhao/asGifImageView">https://github.com/ashen-zhao/asGifImageView</a>进行下载，不需要的同学也可以去Star，留着以后使用，最后，记得关注我哦，哈哈😄；</p>

<h2>接下来，简单写一下如何使用该工具</h2>

<h4>示例图</h4>

<p><img src="http://ashen-zhao.github.io/images/gifView.gif" alt="gifUIImageView" /></p>

<h4>功能说明：</h4>

<p>这是一个UIImageView的分类，可以让UIImageView支持显示本地Gif以及网络Gif图片。</p>

<h4>使用说明</h4>

<p>1.导入分类头文件 <code>#import "UIImageView+ASGif.h"</code><br/>
2.调用<br/>
&emsp;a.显示本地gif图片 <br/>
    <code>[self.gifImgV showGifImageWithData:[NSData dataWithContentsOfFile:[[NSBundle mainBundle] pathForResource:@"abc" ofType:@"gif"]]];</code><br/>
&emsp;b.显示网络gif图片<br/>
       <code>[self.gifImgV showGifImageWithURL:[NSURL URLWithString:@"http://ww1.sinaimg.cn/large/85cccab3gw1etdi67ue4eg208q064n50.gif"]];</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS之接地气的移动支付]]></title>
    <link href="http://ashen-zhao.github.io/blog/2016/01/26/pay/"/>
    <updated>2016-01-26T11:15:35+08:00</updated>
    <id>http://ashen-zhao.github.io/blog/2016/01/26/pay</id>
    <content type="html"><![CDATA[<h3>iOS 移动支付之种类</h3>

<p>iOS 端的移动支付，大概包括：支付宝支付、微信支付、银联卡支付、paypal支付，现在又多出一个Apple pay支付；</p>

<h3>如何集成这些种类的支付方式</h3>

<p>谈及如何集成这些支付方式，面对各种支付方式的SDK以及Demo写的详细的完美无缺，我还真不如还如何去写，这里我就接地气的写写，写的不好请勿喷哦☺！</p>

<h3>支付宝支付</h3>

<h3>大致有以下步骤：</h3>

<h4>1.向支付宝申请, 与支付宝签约，获得商户PID（partner）和账号ID（seller）和私钥(privateKey)</h4>

<p>注：*这一步，一般公司会搞定的，这里只是让你知道来龙去脉☺<br/>
&emsp; 没有支付宝账号的同学，可以<a href="https://memberprod.alipay.com/account/reg/index.htm">点击这里注册账号</a>; <br/>
&emsp; 已经有支付宝账号的同学<a href="https://b.alipay.com/order/productDetail.htm?productId=2015110218010538">点击这里申请移动支付</a><br/>
申请签约有个门槛比较难，就是不管你是个人还是企业，都需要营业执照，这点有点蛋疼，不过人家也是为了有质量的管理申请者嘛，可以理解，我这里没有营业执照，申请工作就死在了摇篮里，不过大致流程，我基本弄清楚了，<strong>不过作为开发者，这申请工作就不用多关心了，一般公司都会有申请过的</strong>，我这里写出来也就是让我们开发者也大概知道流程，而不是直接就是用，只知去向，不知来龙。  <br/>
申请签约成功后，就可以查看 PID（partner）和账号ID（seller）和私钥(privateKey) ，<a href="https://b.alipay.com/order/serviceIndex.htm">查看地址点击这里</a> 进行登录，点击下图中的查询PID和Key;<br/>
<img src="http://ashen-zhao.github.io/images/pay01.png" alt="Pay" /></p>

<!--more-->


<p>但是这里查询到的Key 是公钥，不是私钥，你到底该怎么弄私钥呢？同学们，不用急，支付宝文档写的还是比较清楚的，<a href="https://doc.open.alipay.com/doc2/detail.htm?spm=a219a.7629140.0.0.cxzipP&amp;treeId=58&amp;articleId=103242&amp;docType=1">点击这里可以查看RSA私钥及公钥生成</a></p>

<p>这里文档给出了两种平台下的生产方式，我们既然是iOS 开发者，那就选择Linux用户生产的方式吧，可以直接在Mac的终端敲这些命令；
<img src="http://ashen-zhao.github.io/images/pay02.png" alt="支付" /><br/>
敲过这些命令后，会在本地生产两个文件，分别是私钥和公钥文件<br/>
在命令行敲入（以行为单位）<br/>
$cd ~/<br/>
$open .  //打开文件的存放位置<br/>
想要查看文件内容，还需要使用命令<br/>
$cat rsa_private_key.pem  //会在终端显示文件中的内容，这就是私钥<br/>
到这里，第一步基本上就可以了，具体还需要自己动手试试，不然还是会一头雾水。</p>

<h4>2.下载支付宝SDK以及Demo</h4>

<p>这一步，没啥好说的，给个地址就行<a href="https://doc.open.alipay.com/doc2/detail.htm?treeId=54&amp;articleId=104509&amp;docType=1">SDK以及Demo下载地址</a></p>

<h4>3.集成SDK到工程中（生成订单信息,签名加密）</h4>

<h5>支付宝官方集成文档</h5>

<p>集成支付宝SDK的步骤，这里是官方给出的<a href="https://doc.open.alipay.com/doc2/detail.htm?spm=a219a.7629140.0.0.SiPSmP&amp;treeId=59&amp;articleId=103676&amp;docType=1">集成文档</a>, 按照步骤集成总是会出错，这不是我们脑子不行，而是官方毕竟是官方。<br/>
查看支付宝给出的Demo，会发现这些文件必须要加到项目中：
<img src="http://ashen-zhao.github.io/images/pay05.png" alt="" /><br/>
其中小方框中的为必须加入，而除了小方框以外的，那就要看你们后台人员是否将签名成功字符串格式化的订单字符串，给你传到前端来，如果没有，那就必须你自己在前端处理； 按理说，这些应该由后台来处理，为了订单信息的安全，以及前端业务的轻运行，都该有后端来处理（注：这点不懂，不要紧，后面还会根据代码在进行讲解;</p>

<h5>集成中可能遇到的错误</h5>

<p>1）Cannot find interface declaration for &lsquo;NSObject&rsquo;<br/>
<img src="http://ashen-zhao.github.io/images/pay03.png" alt="" /><br/>
解决方案：a. 可以在报错的文件中加入<code>#import &lt;Foundation/Foundation.h&gt;</code><br/>
b. 可以建个pch文件加入</p>

<pre>`
#ifdef __OBJC__
#import UIKit/UIKit.h
#import Foundation/Foundation.h
#endif
`</pre>


<p></p>

<p>2)提示找不到 openssl/asn1.h 文件<br/>
<img src="http://ashen-zhao.github.io/images/pay06.png" alt="" /><br/>
解决方案：Build Settings &ndash;> Search Paths &ndash;> Header Search paths:$(PROJECT_DIR)/ASPayDemo/Alipay<br/>
<img src="http://ashen-zhao.github.io/images/pay07.png" alt="" /></p>

<p>3)_CNCopyCurrentNetworkInfo,referenced from:<br/>
<img src="http://ashen-zhao.github.io/images/pay08.png" alt="" /><br/>
解决方案：添加SystemConfiguration.framework</p>

<p><img src="http://ashen-zhao.github.io/images/pay09.png" alt="" /></p>

<h4>部署代码</h4>

<pre>
<code>

    NSString *partner = @""; //PID

    NSString *seller = @""; //收款账户，手机号或者邮箱
   
    NSString*privateKey= @"";// 私钥
    
    if ([partner length] == 0 ||
        [seller length] == 0 ||
        [privateKey length] == 0)
    {
        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"提示"
                                                        message:@"缺少partner或者seller或者私钥。"
                                                       delegate:self
                                              cancelButtonTitle:@"确定"
                                              otherButtonTitles:nil];
        [alert show];
        return;
    }
    
    Order *order = [[Order alloc] init];
    order.partner = partner;
    order.seller = seller;
    order.tradeNO = @"20160324012412412"; //订单ID（由商家自行制定）
    order.productName = @"iOS 高级教程"; //商品标题
    order.productDescription = @"这是一本关于iOS的一本高级教程书"; //商品描述
    order.amount = @"0.1"; //商品价格
    order.notifyURL = @"http://www.devashen.com/Notify/Alipay/"; //回调URL
    
    order.service = @"mobile.securitypay.pay";
    order.paymentType = @"1";
    order.inputCharset = @"utf-8";
    order.itBPay = @"30m";
    order.showUrl = @"m.alipay.com";
    
    NSString *appScheme = @"alisdkdemo";
    
    //将商品信息拼接成字符串   该方法支付宝已经封好
    NSString *orderSpec = [order description];
    
    
    //获取私钥并将商户信息签名,外部商户可以根据情况存放私钥和签名,只需要遵循RSA签名规范,并将签名字符串base64编码和UrlEncode
    id<DataSigner> signer = CreateRSADataSigner(privateKey);
    //调用签名
    NSString *signedString = [signer signString:orderSpec];
    
    
    
    
    //将签名成功字符串格式化为订单字符串,请严格按照该格式
    NSString *orderString = nil;
    if (signedString != nil) {
        orderString = [NSString stringWithFormat:@"%@&sign=\"%@\"&sign_type=\"%@\"",
                       orderSpec, signedString, @"RSA"];
        
        
        //***************上面提到好的后台，会把订单字符串直接传给我们，而我们要做的其实也就只剩下这一步了********************/
        [[AlipaySDK defaultService] payOrder:orderString fromScheme:appScheme callback:^(NSDictionary *resultDic) {
            if ([[resultDic objectForKey:@"resultStatus"] isEqualToString:@"9000"]) {
                //9000为支付成功
                
            }
            
        }];
    }

</code></pre>


<p>
看代码，如果后台将签名成功字符串格式化的订单字符串，给你传到前端来，那我们就只需要做很少的工作就可以了，只需要直接处理订单字符串即可：</p>

<pre><code>
        [[AlipaySDK defaultService] payOrder:orderString fromScheme:appScheme callback:^(NSDictionary *resultDic) {
            if ([[resultDic objectForKey:@"resultStatus"] isEqualToString:@"9000"]) {
                //9000为支付成功
                
            }
            
        }];
</code></pre>


<p>
最后，千万别忘了，在Appdelegate中，处理支付宝客户端返回url处理方法, 少了这一步，支付宝SDK的回调方法是不会执行的：</p>

<pre><code>
- (BOOL)application:(UIApplication *)application
            openURL:(NSURL *)url
  sourceApplication:(NSString *)sourceApplication
         annotation:(id)annotation {
   //跳转支付宝钱包进行支付，处理支付结果
        [[AlipaySDK defaultService] processOrderWithPaymentResult:url standbyCallback:^(NSDictionary *resultDic) {
            NSLog(@"result = %@",resultDic);
        }];
    return YES;
}
</code></pre>


<p>
到这里，支付宝支付基本上完成， 迫不及待的你，赶紧去试验试验吧， 别忘了给你们相关负责人要对应的PID、收款账号、以及私钥，当然如果后台直接传给你订单字符串的话，你可以直接给后台要接口了，置于PID什么的你就不用管了。</p>

<h5>相关连接</h5>

<p><a href="https://github.com/ashen-zhao/aspay">本文章对应的Demo, 包含后端是、否给你订单字符串的两种处理</a></p>

<p><a href="https://doc.open.alipay.com/doc2/detail.htm?spm=a219a.7629140.0.0.AIe1BQ&amp;treeId=59&amp;articleId=103563&amp;docType=1">支付宝移动支付SDK官方文档</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[仿照微博、微信弹出ActionSheet样式]]></title>
    <link href="http://ashen-zhao.github.io/blog/2016/01/22/assheet/"/>
    <updated>2016-01-22T15:08:16+08:00</updated>
    <id>http://ashen-zhao.github.io/blog/2016/01/22/assheet</id>
    <content type="html"><![CDATA[<p>&emsp;iOS 开发中，很多应用都会用到从屏幕底部弹出的UIActionSheet, 但是使用的过程中，总感觉系统的样式怪怪的，或者与自己开发的App的UI不是很协调，总之与自己的App搭配就一个字：丑。 说起ActionSheet样式，应该来看看主流的微博与微信是什么样式的；</p>

<p><img src="http://ashen-zhao.github.io/images/assheet02.PNG" width="200" height="370" alt="微信">
<img src="http://ashen-zhao.github.io/images/assheet01.PNG" width="200" height="370" alt="微博"></p>

<p>看上去的确挺自然，一点也不像系统自带的，给人的感觉就是不协调，不协调的</p>

<!--more-->


<p><img src="http://ashen-zhao.github.io/images/assheet03.png" width="200" height="370" alt="微信"></p>

<p>看吧,系统的与人家设计的，看上去就逊色许多。
出于比较喜欢微博、微信这种设计，就自己动手鼓弄着也写了个<a href="https://github.com/Ashen-Zhao/ASSheet">工具类</a>，为以后使用做准备，使用起来很简单，只需传入titles 数组，以及实现一个Block 点击回调，就可以很快的实现像微博微信那样的样式，先看看效果图吧：</p>

<p><img src="http://ashen-zhao.github.io/images/assheet04.gif" alt="ActionSheet" /></p>

<h3>我是如何实现的</h3>

<p>&emsp;写一个继承自UIView的类，用这个view 来做为弹出后的幕布（也就是半透明的背景），然后给这个view 添加一个单击手势，手势方法就是讲该view移除隐藏的方法，然后将次view 背景色设置成半透明, 用 <code>[self setBackgroundColor:[UIColor colorWithWhite:0.5 alpha:0.5]]</code> 来设置半透明背景色。<br/>
&emsp;然后再定义个UIview *titleBgkView属性，该view 用来当titles 的幕布， 随后创建该view， 并且将此view 的frame 根据titles 的多少进行动态调整，我这里重写了大幕布的init 方法<code>- (instancetype)initWithFrame:(CGRect)frame titleArr:(NSArray *)titleArr</code> 传入titles 数组。 <br/>
&emsp;再然后，根据传入的titles 进行创建title按钮，将创建的按钮添加到titleBgkView 上。<br/>
噗，我这是写的啥，我还是直接上代码吧，对不住各位了，实在写不下去了，程序员嘛还是直接看代码来的最直接，对吧。
这是我的.m 文件实现代码</p>

<pre> <code> 
- (instancetype)initWithFrame:(CGRect)frame titleArr:(NSArray *)titleArr {
    self = [super initWithFrame:frame];
    size = [UIScreen mainScreen].bounds.size;
    [self setBackgroundColor:[UIColor colorWithWhite:0.5 alpha:0.5]];
    UITapGestureRecognizer *tap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(hiddenSheet)];
    [self addGestureRecognizer:tap];
    [self makeBaseUIWithTitleArr:titleArr];
    
    return self;
}

- (void)makeBaseUIWithTitleArr:(NSArray *)titleArr{
   
    self.bgkView = [[UIView alloc] initWithFrame:CGRectMake(0, size.height, size.width, titleArr.count * 50 + 55)];
    _bgkView.backgroundColor = [UIColor colorWithRed:0xe9/255.0 green:0xe9/255.0 blue:0xe9/255.0 alpha:1.0];
    [self addSubview:_bgkView];

    CGFloat y = [self createBtnWithTitle:@"取消" origin_y: _bgkView.frame.size.height - 50 tag:-1 action:@selector(hiddenSheet)] - 55;
    for (int i = 0; i < titleArr.count; i++) {
        y = [self createBtnWithTitle:titleArr[i] origin_y:y tag:i action:@selector(click:)];
    }
    [UIView animateWithDuration:0.3 animations:^{
        CGRect frame = _bgkView.frame;
        frame.origin.y -= frame.size.height;
        _bgkView.frame = frame;
    }];
   
}

- (CGFloat)createBtnWithTitle:(NSString *)title origin_y:(CGFloat)y tag:(NSInteger)tag action:(SEL)method {
    UIButton *btn = [UIButton buttonWithType:UIButtonTypeCustom];
    [btn setTitle:title forState:UIControlStateNormal];
    btn.frame = CGRectMake(0, y, size.width, 50);
    btn.backgroundColor = [UIColor whiteColor];
    btn.tag = tag;
    [btn setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];
    [btn addTarget:self action:method forControlEvents:UIControlEventTouchUpInside];
    [_bgkView addSubview:btn];
    return y -= tag == -1 ? 0 : 50.4;
}
- (void)hiddenSheet {
    [UIView animateWithDuration:0.3 animations:^{
        CGRect frame = _bgkView.frame;
        frame.origin.y += frame.size.height;
        _bgkView.frame = frame;
    }];
    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.3 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
        [self removeFromSuperview];
    });
}

- (void)click:(UIButton *)btn {
    if (self.Click) {
        _Click(btn.tag);
    }
}

</code> </pre>


<p></p>

<p>这是.h 文件代码</p>

<pre> <code> 
@property (nonatomic, copy) void (^Click)(NSInteger clickIndex);
- (instancetype)initWithFrame:(CGRect)frame titleArr:(NSArray *)titleArr;
- (void)hiddenSheet;

</code></pre>


<p></p>

<p>看吧，这多简单方便，有代码直接上，废话少说，程序员对代码的情结不容小觑，哼哈哈。</p>

<p>这里我也把使用的代码给贴出来吧，慢慢观察，仔细看，哈哈，使用起来很容易</p>

<pre> <code>
- (IBAction)showSheet:(id)sender {
    AS_Sheet *a = [[AS_Sheet alloc] initWithFrame:self.view.bounds titleArr:@[@"从手机相册选择", @"拍照", @"小视频"]];
    __weak typeof(a) weakA = a;
    a.Click = ^(NSInteger clickIndex) {
        switch (clickIndex) {
            case 0:
                NSLog(@"相册选择");
                break;
            case 1:
                NSLog(@"拍照");
                break;
            case 2:
                NSLog(@"小视频");
                break;
            default:
                break;
        }
        [weakA hiddenSheet];
    };
    [self.navigationController.view addSubview:a];
}

</code></pre>


<p></p>

<p>最后，老规矩我还是把<a href="https://github.com/Ashen-Zhao/ASSheet">Demo附上</a>，以供辅助</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[简单实现双击tabBarItem刷新页面]]></title>
    <link href="http://ashen-zhao.github.io/blog/2016/01/20/doubleclick/"/>
    <updated>2016-01-20T17:44:11+08:00</updated>
    <id>http://ashen-zhao.github.io/blog/2016/01/20/doubleclick</id>
    <content type="html"><![CDATA[<h3>如何实现双击tabbarItem刷新页面？</h3>

<p>&emsp;在网上寻找了一圈，众说纷纭，大差不差，而且基本上实现的不是双击才刷新，而是双击刷新一次后，只要再次单击就会刷新，这样很容易造成用户不小心点着，降低用户体验；见于这种局面，我花费了近一个小时，鼓捣出来了，只有双击的时候，才会去刷新页面（其实是伪双击，也就是单击两次，没有做两次单击时间间隔限制），废话不说了，直接上代码：</p>

<pre><code>
int i = 0;
- (BOOL)tabBarController:(UITabBarController *)tabBarController shouldSelectViewController:(UIViewController *)viewController{
    i++;
    UIViewController *tbSelectedController = tabBarController.selectedViewController;
    if ([tbSelectedController isEqual:viewController]) {
        if (currentIndex == 1 && tabBarController.selectedIndex == 1 && i % 2 != 0) {
            UINavigationController *nav = self.viewControllers[1];
            TestViewController *tVC = nav.viewControllers[0];
            [tVC doubleClickRefrsh];
        }
        currentIndex = tabBarController.selectedIndex;
        return NO;
    }
    i = 1;
    return YES;
}
</code></pre>


<p>
这里是 <code>UITabBarDelegate</code> 的代理方法，实现的是双击第二个tabBarItem，则刷新其对应的第一个视图的节目数据;<br/>
至于<code>i</code>的存在，是为了记录是否是双击，我是根据<code>i</code>是偶数还是奇数来进行判断的；<br/>
就酱紫吧，不清楚的只管拿去用就行了，我就不多解释了，只有这几行代码，真没啥解释的了(^o^)/~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 多语言版本的开发（三）]]></title>
    <link href="http://ashen-zhao.github.io/blog/2016/01/18/localized03/"/>
    <updated>2016-01-18T16:06:48+08:00</updated>
    <id>http://ashen-zhao.github.io/blog/2016/01/18/localized03</id>
    <content type="html"><![CDATA[<h3>写在前面</h3>

<p>&emsp;<a href="http://ashen-zhao.github.io/blog/2016/01/15/localized02/">iOS 多语言版本的开发（二）</a> 中我们实现了如何让用户自己去切换系统语言的功能，我们还写了<a href="https://github.com/Ashen-Zhao/easyLocalized">Demo</a> 以供辅助学习；但是，继以上两篇文章都是建立在项目刚刚启动或启动不久，项目中存在的中文字符串还不是很多，手动改起来也还可以接受; 那么问题来了，如果项目已经竣工或者已经迭代几个版本了，那该如何实现了？手动改起来也不太现实，耗时耗力不讨好的手动，在这里就不用考虑了。 不让考虑，是因为我有更简单快捷高效的方法，让我慢慢与您道来；</p>

<h3>如何辨别项目中的中文字符串?</h3>

<p>&emsp;既然要替换项目中使用到的中文字符串，那么前提就必须要先找到这些个字符串，然后将这些字符串，替换成我们定义的<strong>宏</strong>， 为了替换方便，可将这些字符串自身作为<code>key</code>， 这里不理解的不要紧，下面我还会讲到。 既然是辨别中文字符串，那也就是说在项目文件中进行匹配查找，说到匹配，那就需要正则表达式了，用正则表达式匹配Xcode中的使用的中文字符串，使用<code>(@"[^"]*[\u4E00-\u9FA5]+[^"\n]*?")\s*</code> 即可， 打开你的Xcode 试试看，切记find 后面的选项要选择 <code>Regular Expression</code>, 默认选中的是<code>Text</code>, 如图</p>

<!--more-->


<p><img src="http://ashen-zhao.github.io/images/localized301.png" alt="多语言" /></p>

<h3>如何取出识别到的中文字符串？</h3>

<p>&emsp;我们已经知道如何识别项目中的字符串了，但是如何取出来使用呢？ 这就需要遍历项目中所有的指定后缀（e.g:  .h、.m等）的文件，然后利用正则表达匹配所有使用到的中文字符串，并写入文件中。为了方便起见，我将此过程写了一个Mac客户端<a href="https://github.com/Ashen-Zhao/ReadChinese">小应用</a>，可直接将选中的项目中所有的中文字符串，导出到指定的路径下；该应用还可以选择对于重复出现的中文字符串进行处理，以及还可以将中文字符串导出为繁体； <a href="https://github.com/Ashen-Zhao/ReadChinese">小应用</a>更值得关注的是它导出的文件，可以直接拿来当做多语言文件中的<code>key=value</code> 使用，非常简单，喜欢的可以去<a href="https://github.com/Ashen-Zhao/ReadChinese">下载看看</a>， 含有源码的哦；小应用运行图如下：</p>

<p><img src="http://ashen-zhao.github.io/images/readChinese.jpg" alt="多语言" /></p>

<h3>如何使用取出的中文字符串？</h3>

<p>&emsp;已经拿到取出的中文字符串文件，这个文件是可以直接拿来用做多语言文件使用的，小应用导出的文件，只可以用于中文以及繁体多语言文件，而对于其他的语言，就需要你拿着导出的文件，找你们公司的翻译人员，进行翻译； 拿繁体版来举个例子，导出来的繁体文件如下（收留我App导出的文件）：</p>

<p><img src="http://ashen-zhao.github.io/images/localized303.png" alt="多语言" /></p>

<p>这个繁体文件，可以直接作为繁体多语言使用，如何想要翻译成英文，可以将此文件拷贝一份，交给翻译人员，让其翻译。翻译的时候，你一定要给翻译人员沟通好，让其只翻译<code>value</code>, 也就是图中<code>=</code> 后面双引号中的内容，格式什么的也不要让他乱改，否则容易出现问题，导致key与value对不上号。 一切沟通妥当后，等翻译把文件给你后，直接将文件中的内容，复制到多语言文件的英语文件中即可；</p>

<h3>如何将项目中的中文字符串进行替换</h3>

<p>&emsp;多语言文件已经配置完成，到了这里，那么问题来了，我们只是取出项目中使用的中文字符串，然后将字符串封装成多语言文件，但是对于项目中使用的中文字符串依然还是中文字符串，我们还并没有进行替换处理。当然，这一步我们是不能够忘了，由于是替换项目中所有的使用中文字符串，我们还是谨慎为好，首先将你的项目进行<strong>备份、备份、备份</strong>，非常重要的事情说三篇，切记一定要备份。备份好后，我们就可以开始替换工作了，没有备份的不要往下看了，赶紧备份去；<br/>
&emsp;假设你已经备份好了，你就可以开始替换工作了，前面我们说过让中文字符串自身作为<code>key</code> 进行替换，之所以让其自身作为key, 是因为这样可以大大减轻替换的困难度，而且还有利于代码的可读性，基本上算是保持原有代码；既然要替换项目中的使用中文字符串，就要用到Xcode 自带的字符串替换功能，首先还需要使用正则表达式<code>(@"[^"]*[\u4E00-\u9FA5]+[^"\n]*?")\s*</code>，匹配出项目中使用的中文字符串，然后在对其进行替换处理。</p>

<p>&emsp;由于我们在<a href="http://ashen-zhao.github.io/blog/2016/01/15/localized02/">iOS 多语言版本的开发（二）</a>中，对取key对应的语言内容，进行了宏的封装, 这里我们可以将匹配到的使用中文字符直接替换成我们定义的宏的使用</p>

<pre><code>#define ASLocalizedString(key)  [NSString stringWithFormat:@"%@", [[NSBundle bundleWithPath:[[NSBundle mainBundle] pathForResource:[NSString stringWithFormat:@"%@",[[NSUserDefaults standardUserDefaults] objectForKey:@"appLanguage"]] ofType:@"lproj"]] localizedStringForKey:(key) value:nil table:@"ASLocalized"]] </code></pre>


<p>
以上是宏的定义，我们需要将字符串进行替换成宏的使用，如：<br/>
&emsp;替换前是这样的<code>_lbl.text = @"我是多语言";</code><br/>
&emsp;替换后<code>_lbl.text = ASLocalizedString(@"我是多语言")</code></p>

<p>替换规则如图：</p>

<p><img src="http://ashen-zhao.github.io/images/localized304.png" alt="多语言" /></p>

<p>这次选中的是<code>Replace</code>, 不是<code>Find</code>。按图中所示，选择完毕后，点击<code>ReplaceAll</code>, 会出来一个弹框，不用管它直接继续，即可，然后你在看项目中使用到的中文字符串是否已经替换掉了，到这里基本上大功告成了；</p>

<h3>遗留问题</h3>

<p>1、正则表达式，不懂得可以先照文章里写就行，然后再去学习下，<a href="http://deerchao.net/tutorials/regex/regex.htm">这里有篇基础文章</a><br/>
2、ASLocalizedString(key) ， 该宏使用面积广，可以将其定义成公共头文件中，然后用时引用头文件即可，也可将文件封装进pch文件中，这样无需使用头文件接口使用<br/>
3、替换后，可能会有些地方报错，command + b 编译下，看看报错的地方，进行相应修改即可。报错原因：a. 可能是你定义的常量字符串； b. 可能是定义的宏；  c.  可能是替换后没有换行； 基本上报的错误很明显，进行修改即可；<br/>
4、在迭代版本中，再次使用中文字符串，就需要使用<code>ASLocalizedString(key)</code>， 来代替了，然后再多语言文件中，进行<code>key=value</code> 配置；</p>

<blockquote><h4>相关文章</h4>

<h4><a href="http://ashen-zhao.github.io/blog/2016/01/14/localized01/">iOS 多语言版本的开发（一）</a></h4>

<h4><a href="http://ashen-zhao.github.io/blog/2016/01/15/localized02/">iOS 多语言版本的开发（二）</a></h4></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 多语言版本的开发（二）]]></title>
    <link href="http://ashen-zhao.github.io/blog/2016/01/15/localized02/"/>
    <updated>2016-01-15T05:13:56+08:00</updated>
    <id>http://ashen-zhao.github.io/blog/2016/01/15/localized02</id>
    <content type="html"><![CDATA[<h3>题记</h3>

<p>&emsp;&emsp;<a href="http://ashen-zhao.github.io/blog/2016/01/14/localized01/">iOS 多语言版本的开发（一）</a> 中我们完成了让应用跟随系统语言进行切换，而用户自己却不能切换的功能，也基本上算是实现了多语言版本；可是，对于某些应用来说，实现跟随系统语言切换的同时， 也想要实现让用户自己选择应用语言版本的功能；针对这种情况，利用这篇文章来写写如何让用户自己切换应用语言版本；</p>

<h3>语言文件存在的形式</h3>

<p>想要实现用户自己手动切换语言版本，就先要了解语言文件在资源文件中存在的形式;</p>

<p><img src="http://ashen-zhao.github.io/images/localized09.png" alt="多语言" /></p>

<p>如图中，不管是英语（en.lproj）、简体（zh-Hans.lproj）、还是繁体（zh-Hant.lproj）都是以<code>.lproj</code> 的文件夹形式存在, 所以当我们要切换语言的时候，其实也就是做到去取这些<code>.lproj</code> 文件夹中的<code>ASLocalized.strings</code>文件；</p>

<!--more-->


<p>
&emsp;到这里，原理应该懂了，接下来就是动手实现了；</p>

<h3>根据语言获取 ASLocalized.strings</h3>

<p>这时候，需要根据不同的<code>语言.lproj</code> 获取到对应的<code>ASLocalized.strings</code>语言文件, 从而让页面显示对应的语言内容;<br/>
这里暂且先根据English获取英语的语言文件，English 的.lproj存在的形式是<code>en.lproj</code></p>

<pre><code>
NSString *path = [[NSBundle mainBundle] pathForResource:@"en" ofType:@"lproj"];
NSString *showValue = [[NSBundle bundleWithPath:path] localizedStringForKey:@"showTxt" value:nil table:@"ASLocalized"];
NSLog(@"result: %@", showValue);
 </code></pre>


<p>输出结果：result: this is test text</p>

<p>以上代码，只是以English 为语言文件，是写死的，如果想要让用户自己手动改变，只需要替换掉 <code>[[NSBundle mainBundle] pathForResource:@"en" ofType:@"lproj"]</code> 中的<code>en</code> 为其他的语言标识就好了； 既然是用户手动切换，那就需要写代码去实现了；</p>

<p>到这里，有一个问题，<strong><em>如何让用户选择后一个语言后，即使程序退出后，下次进入依然保留呢</em></strong>， 既然需要保存数据，就要涉及到本地存储了，对于少量的保存我们可以使用<code>NSUserDefaults</code> 来操作，简单方便快捷；至于其他的存储方式四大基本对象的write方法，归档，sqllite，CoreData 需要的同学，可以自己去脑补，这里我不多介绍了；</p>

<h3>使用NSUserDefaults 记录选择的语言</h3>

<p>这里我简单写了个界面，作为辅助讲解</p>

<p><img src="http://ashen-zhao.github.io/images/localized10.png" alt="多语言" width="300" height="450"></p>

<pre><code>
- (IBAction)changeLanguage:(UIButton *)sender {
    
    switch (sender.tag) {
        case 101: { //简体
            [[NSUserDefaults standardUserDefaults] setObject:@"zh-Hans" forKey:appLanguage];
        }
            break;
        case 102: { //繁体
            [[NSUserDefaults standardUserDefaults] setObject:@"zh-Hant" forKey:appLanguage];
        }
            break;
        case 103: { //English
            [[NSUserDefaults standardUserDefaults] setObject:@"en" forKey:appLanguage];
        }
            break;
        default:
            break;
    }
}
</code></pre>


<p></p>

<p>以上方法，是图中三种语言的点击事件，分别将对应的语言标识，记录到<code>NSUserDefaults</code> 对应的 <code>appLanguage</code> key 中</p>

<p>既然重新选择了语言，就需要重新加载控件的内容，因为是Demo🐴，这里直接将给控件赋值写成一个方法，如下：</p>

<pre><code>
- (void)showLbl {
    NSString *lanType =[NSString stringWithFormat:@"%@", [[NSUserDefaults standardUserDefaults] objectForKey:@"appLanguage"]];
    
    NSString *path = [[NSBundle mainBundle] pathForResource:lanType ofType:@"lproj"];
    
    NSString *showValue = [[NSBundle bundleWithPath:path] localizedStringForKey:@"showTxt" value:nil table:@"ASLocalized"];
    NSLog(@"result: %@", showValue);
    self.lblShowTxt.text = showValue;
}

</code></pre>


<p></p>

<p>可将此方法在点击事件中调用下，即可；</p>

<p>Demo效果图：</p>

<p><img src="http://ashen-zhao.github.io/images/localized11.gif" alt="多语言" /></p>

<h3>首次进入应用的考虑</h3>

<p>到这里，还没有完，这时我们需要考虑下，用户第一次进来时，该显示什么样的语言，是跟随系统，还是我们给一种默认的语言；</p>

<h4>1、给一种默认语言</h4>

<p>这种处理很简单，只需要在<code>didFinishLaunchingWithOptions</code> 方法中，进行判断本地是否记录了语言标识，如果没有给一种默认即可，代码如下：</p>

<pre>`
if (![[NSUserDefaults standardUserDefaults] objectForKey:appLanguage]) { 
     [[NSUserDefaults standardUserDefaults] setObject:@"zh-Hans"    forKey:appLanguage];
}`</pre>


<p></p>

<h4>2、跟随系统语言</h4>

<p>这种处理相对来说，比较复杂写，首页需要获取系统的首选语言顺序，然后取第一个首选语言，其次，还要判断你要做的语言版本，首选语言组中存在与否；<br/>
获取首选语言：<code> NSArray  *languages = [NSLocale preferredLanguages];</code><br/>
获取第一个首选语言：<code> NSString *language = [languages objectAtIndex:0];</code></p>

<p>处理过程如下：</p>

<pre><code>
if (![[NSUserDefaults standardUserDefaults] objectForKey:appLanguage]) {
        NSArray  *languages = [NSLocale preferredLanguages];
        NSString *language = [languages objectAtIndex:0];
        if ([language hasPrefix:@"zh-Hans"]) {
            [[NSUserDefaults standardUserDefaults] setObject:@"zh-Hans" forKey:appLanguage];
        } else if ([language hasPrefix:@"zh-TW"] || [language hasPrefix:@"zh-HK"] || [language hasPrefix:@"zh-Hant"]) {
            [[NSUserDefaults standardUserDefaults] setObject:@"zh-Hant" forKey:appLanguage];
        } else if ([language hasPrefix:@"en"]) {
            [[NSUserDefaults standardUserDefaults] setObject:@"en" forKey:appLanguage];
        }else{
            [[NSUserDefaults standardUserDefaults] setObject:@"zh-Hans" forKey:appLanguage];
        }
    }
</code></pre>


<p></p>

<p>注：由于繁体又有台湾繁体和香港繁体之分，所以代码中也做出了相应的处理；</p>

<p>╮(╯▽╰)╭ 到了这里基本上算是完成了多语言版本的工作了，但是，但是，但是，这只是完成了项目起步期，项目中还不存在大量的中文字符串的情况；暂时先不考虑项目已经开发完成的情况，接下来先来优化下，我们刚刚写过的代码；<br/>
对于 <code>showLbl</code> 方法中的内容，可以定义成宏，以供项目中，任何地方需要多元化时的使用;</p>

<pre><code> 
 #define ASLocalizedString(key)  [NSString stringWithFormat:@"%@", [[NSBundle bundleWithPath:[[NSBundle mainBundle] pathForResource:[NSString stringWithFormat:@"%@",[[NSUserDefaults standardUserDefaults] objectForKey:@"appLanguage"]] ofType:@"lproj"]] localizedStringForKey:(key) value:nil table:@"ASLocalized"]]
</code> </pre>


<p>
为了方便，我将<code>showLbl</code> 中取key对应的语言内容，封装进了一个带参数的宏中；</p>

<p>使用起来就很Easy了，只需要这样使用即可： <code>ASLocalizedString(@"showTxt")</code></p>

<p>我在github上，上传了本篇<a href="https://github.com/Ashen-Zhao/easyLocalized">Demo</a> 以供辅助参考；</p>

<p><a href="https://github.com/Ashen-Zhao/easyLocalized">查看Demo 点击这里</a></p>

<blockquote><h4>相关文章</h4>

<h4><a href="http://ashen-zhao.github.io/blog/2016/01/14/localized01/">iOS 多语言版本的开发（一）</a></h4>

<h4><a href="http://ashen-zhao.github.io/blog/2016/01/18/localized03/">iOS 多语言版本的开发（三）</a></h4></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 多语言版本的开发（一）]]></title>
    <link href="http://ashen-zhao.github.io/blog/2016/01/14/localized01/"/>
    <updated>2016-01-14T11:13:56+08:00</updated>
    <id>http://ashen-zhao.github.io/blog/2016/01/14/localized01</id>
    <content type="html"><![CDATA[<h2>引言</h2>

<p>&emsp;多语言 &amp; 本地化，随你怎么叫，道理差不多；一个App 要想走出国门，只支持一种语言是不能够的，也是不可能的，多元化世界已经融入我们的生活，对于一些应用，开发多语言版本，已经是不可避免的，特别是旅游等方面的应用；国内也有很多App 已经接入多语言，例如：支付宝、微信、收留我（嘻嘻，做下广告）等；</p>

<h2>开发多语言，一般有两种情况</h2>

<p>1、App还没有开始写，这个时候创建一个多语言版本，很是容易，然后再写代码的时候稍微留意下哪里需要保持多语言就行了；<br/>
2、App已经上线了，而且之前没有任何的为开发多语言准备过，这时候Boss让开发多语言版本，这下你就苦逼了，想想项目中长长短短的中文字符串，没有上千也得上几百了吧，在想想一个一个替换，哎呀妈呀，那么多，想想都想死了，在想想还容易出错，哎呀妈呀，让我死了算了；</p>

<!--more-->


<p>别急，这次我就针对两种情况都讲解下；</p>

<h3>项目刚开始启动</h3>

<h4>1、新建一个项目（我就不多说了）</h4>

<h4>2、command + N 添加多语言文件，如下图</h4>

<p><img src="http://ashen-zhao.github.io/images/localized01.png" alt="添加多语言文件" /></p>

<h4>3、添加多语言，如图</h4>

<p><img src="http://ashen-zhao.github.io/images/localized02.png" alt="添加多语言" /></p>

<p>选择English  点击Localize<br/>
<img src="http://ashen-zhao.github.io/images/localized03.png" alt="添加多语言" /></p>

<p><strong>到这里已经算是添加好了多语言文件，接下来就是添加多语言</strong></p>

<p>之前的XCode（具体到哪一个版本之前，不清楚了，我使用的是XCode7），是可以在如下图中直接点击➕号 ，添加多语言的</p>

<p><img src="http://ashen-zhao.github.io/images/localized04.png" alt="添加多语言" /></p>

<p>现在需要进入项目的Project中的Localizations 中进行添加，如图</p>

<p><img src="http://ashen-zhao.github.io/images/localized05.png" alt="添加多语言" /></p>

<p>我只添加了中文繁体，简体，以及英文，Demo使用的StoryBoard, 而添加多语言时，我没有选择为StoryBoard添加多语言版本的，毕竟是Demo🐴；但是不影响使用。</p>

<p><img src="http://ashen-zhao.github.io/images/localized06.png" alt="添加多语言" /></p>

<p>到这里多语言文件中会出现如上图中的三个.strings 后缀的文件，这就是多语言对应的文件了，多语言添加的方式类似，字典 key=value 一一对应的关系，key 在三个.strings 中必须一致，而value 则分别对应不同的语言字体，即可；</p>

<h4>4、多语言文件的使用</h4>

<p>现分别在不同的语言文件中添加如下测试文本：</p>

<p><code>"showTxt"="this is test text";</code><br/>
<code>"showTxt"="这是一个测试的文本";</code><br/>
<code>"showTxt"="這是一個測試的文本";</code></p>

<p>说到使用，就要了解下<code>NSLocalizedString</code>  是什么</p>

<pre><code>
 #define NSLocalizedString(key, comment) \
        [[NSBundle mainBundle] localizedStringForKey:(key) value:@"" table:nil]
 #define NSLocalizedStringFromTable(key, tbl, comment) \
        [[NSBundle mainBundle] localizedStringForKey:(key) value:@"" table:(tbl)]
 #define NSLocalizedStringFromTableInBundle(key, tbl, bundle, comment) \
        [bundle localizedStringForKey:(key) value:@"" table:(tbl)]
 #define NSLocalizedStringWithDefaultValue(key, tbl, bundle, val, comment) \
        [bundle localizedStringForKey:(key) value:(val) table:(tbl)] </code></pre>


<p>其实就是宏，而宏定义的又是在资源文件中寻找对应的资源文件；<strong>在这里有个坑点</strong>，当你使用第一种实现多语言本地化，意味着你的多语言文件名字<strong>必须</strong>是<code>Localizable</code>,否则你的多语言实现，到最后显示的却只能是key； <br/>
第一种适合于，让应用跟随系统的语言版本进行切换，而用户却不能手动进行切换； 我们要实现的是既可以跟随系统，又可以用户自己切换，就不能使用这一个了，那就要使用第二种<code>NSLocalizedStringFromTable(key, tbl, comment)</code>&emsp;tbl这个参数，就是我们自己命名的多语言文件名称；</p>

<p>因此我们暂且这样使用（这样直接使用，会跟随系统语言）：</p>

<p><code>NSLocalizedStringFromTable(@"showTxt", @"ASLocalized", nil);</code></p>

<p>参数说明： 第一个参数，是多语言中的key, 第二个参数，是多语言文件的名字，第三个是对key的注释说明，一般为nil就可以了；</p>

<p>对于这样使用<code>NSLocalizedString("showTxt", nil)</code> ，切记多语言文件名<strong>必须</strong>是<code>Localizable</code>, 这里我们就不可以使用这种了；</p>

<h4>到这里，就可以实现简单的跟随系统语言的多语言版本了;</h4>

<p>效果图如下：</p>

<p><img src="http://ashen-zhao.github.io/images/localized07.png" alt="添加多语言" /><br/>
<img src="http://ashen-zhao.github.io/images/localized08.png" alt="添加多语言" /></p>

<blockquote><h4>相关文章</h4>

<h4><a href="http://ashen-zhao.github.io/blog/2016/01/15/localized02/">iOS 多语言版本的开发（二）</a></h4>

<h4><a href="http://ashen-zhao.github.io/blog/2016/01/18/localized03/">iOS 多语言版本的开发（三）</a></h4></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GitHub 的简明教程之入门使用]]></title>
    <link href="http://ashen-zhao.github.io/blog/2016/01/12/githubused/"/>
    <updated>2016-01-12T10:22:46+08:00</updated>
    <id>http://ashen-zhao.github.io/blog/2016/01/12/githubused</id>
    <content type="html"><![CDATA[<blockquote><h3>相关文章</h3>

<h4><a href="http://ashen-zhao.github.io/blog/2016/01/11/gitsshkey/">GitHub 的简明教程之配置ssh key</a></h4></blockquote>

<h3>本地创建Git仓库</h3>

<h4>1、git init 初始化仓库</h4>

<p>打开terminal 命令窗口，利用cd 命令，进入你需要初始化的目录，执行git init 命令；<br/>
如出现以下类似的输出，则成功初始化<br/>
<code>Initialized empty Git repository in /Users/shou65/Desktop/myfirstgit/.git/</code></p>

<h4>2、git add . 添加到暂存区（保存项目索引，并生产快照）</h4>

<p>这一步一般什么的都不会输出，但是却已经添加好了，不用多想，继续下一步 （ps: git add 后面的点，不能忘）</p>

<!--more-->


<h4>3、git commit 提交仓库内容（提交项目索引）</h4>

<p><code>git commit -m 'fitst commit'</code></p>

<p>-m 之后的内容是对本次commit的描述</p>

<h5>4、git log (可忽略)</h5>

<p>查看提交的历史记录</p>

<h3>本地Git仓库推送到Github</h3>

<h4>1、首页github上需要创建个仓库,按下图一步一步走</h4>

<hr />

<p>进入github添加仓库界面
<img src="http://ashen-zhao.github.io/images/newGit.png" alt="new" /></p>

<hr />

<p>填写仓库相关内容
<img src="http://ashen-zhao.github.io/images/gitfillcontent.png" alt="addgithub" /></p>

<hr />

<p>仓库创建成功界面，记住图片中的地址
<img src="http://ashen-zhao.github.io/images/githubURL.png" alt="url" /></p>

<h4>2、添加远程仓库，这时候图片中的地址，就有用了</h4>

<p>执行命令：<code>git remote add origin git@github.com:Ashen-Zhao/firstgithub.git</code></p>

<p>git remote add 远程库的名字 远程库的URL</p>

<h4>3、推送到远程分支，git默认会创建一个master主分支</h4>

<p><code>git push origin master</code></p>

<p>到这里，就完成了本地git仓库提交到github了，有没有小激动，速去github刷新页面，看看你的成果吧</p>

<h3>将github仓库，弄到本地</h3>

<h4>1、使用git clone 仓库地址（克隆一个新的仓库）</h4>

<p><code>git clone git@github.com:Ashen-Zhao/firstgithub.git</code></p>

<h4>2、将本地仓库更新至远程仓库</h4>

<p><code>git pull origin master</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GitHub 的简明教程之配置ssh key]]></title>
    <link href="http://ashen-zhao.github.io/blog/2016/01/11/gitsshkey/"/>
    <updated>2016-01-11T17:22:46+08:00</updated>
    <id>http://ashen-zhao.github.io/blog/2016/01/11/gitsshkey</id>
    <content type="html"><![CDATA[<h2>Git &amp; GitHub极简介</h2>

<p>git 是分布式的代码管理工具，远程的代码管理是基于ssh的，所以要使用远程的git则需要ssh的配置<br/>
github 开源代码库以及版本控制系统</p>

<h2>GitHub的配置</h2>

<h3>1.检查是否已经存在ssh 密钥</h3>

<p>输入 ls -al ~/.ssh 命令  查看是否存在<code>id_rsa.pub</code> 和 <code>id_rsa</code> 文件</p>

<p><img src="http://ashen-zhao.github.io/images/isHassshkey.png" alt="附图1" /><br/>
如果存在，则执行第 3 步， 否则执行第 2 步
  <!--more--></p>

<h3>2.生成新的ssh 密钥</h3>

<p>输入 ssh-keygen -t rsa -C “emailname@gmail.com”  回车，会让你输入密码，直接输入三个空格，不要密码即可  <br/>
最后得到了两个文件：id_rsa和id_rsa.pub</p>

<h3>3.将ssh key添加到GitHub中</h3>

<p>打开<a href="https://github.com">github</a> 添加 SSH Key 页面</p>

<p><img src="http://ashen-zhao.github.io/images/goaddsshkey.png" alt="附图2" />  <img src="http://ashen-zhao.github.io/images/addsshkey.png" alt="附图2" /><br/>
这要添加的是<code>id_rsa.pub</code>里面的公钥;<br/>
进入ssh. 目录下，输入 cat id_rsa.pub 即可在窗口中看到公钥，将公钥从 ssh-key 一直复制到邮箱地址（包含邮箱），然后粘贴到github 添加ssh key 的key 输入框中，title则随意输入，然后点击Add 即可；</p>

<blockquote><h3>相关文章</h3>

<h4><a href="http://ashen-zhao.github.io/blog/2016/01/12/githubused/">GitHub 的简明教程之入门使用</a></h4></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UIWebView 与 原生系统的简单跳转交互]]></title>
    <link href="http://ashen-zhao.github.io/blog/2016/01/11/webview/"/>
    <updated>2016-01-11T10:15:09+08:00</updated>
    <id>http://ashen-zhao.github.io/blog/2016/01/11/webview</id>
    <content type="html"><![CDATA[<h3>简单介绍UIWebView</h3>

<p> 关于UIWebView这里我就不多介绍了，可以简单理解为一个在iOS 端显示网页的一个控件；</p>

<h3>UIWebView的使用</h3>

<p> 它既然也是view，当然就可以像其他view一样的创建，如下：</p>

<pre><code> UIWebView *webView = [[UIWebView alloc] initWithFrame:CGRectMake(0, 0, 320, 560)];

 webView.delegate = self;//先在此设置下代理，等下会实现其代理方法</code></pre>


<p> <!--more-->
 当然这是创建一个对象，想要加载一个网页还需要实现<code>loadRequest:</code>这个方法；这时你会发现该方法需要一个<code>NSURLRequest</code>类型的参数；那简单我们就来创建一个又如何；我们使用NSURLRequest的类方法<code>requestWithURL:</code>来创建；咦，又会发现这个类方法需要一个<code>NSURL</code>类型的参数；不管了，那就先创建NSURL对象吧；</p>

<pre><code>
 NSURL *url = [NSURL URLWithString:@"http://www.baidu.com"];

[webView loadRequest:[NSURLRequest requestWithURL:url];</code></pre>


<p> 切记后面一定要是一个可访问的网址；
 最后，因为它也是View，别忘记加到父视图上</p>

<pre><code>[self.view addSubview:webView];</code></pre>


<p>既然要实现与原生系统的交互，那就不得不实现它的代理方法</p>

<pre><code>-(BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)navigationType {
   NSString *urlStr = request.URL.absoluteString; //取出webView交互的url链接；
        //根据urlStr链接中的参数，去push到系统中的任何页面都可以的
       /*实现code
        .....
       */
      return YES;
}</code></pre>


<p> <b>附加说明</b>：urlStr是网页中，点击带有响应，传过来的网址，这个网址要看你服务端给的什么内容，针对内容去跳转到对象的页面(如：是一个头像的点击，则跳转到对应的用户信息，这是网址中，服务端就应该封装的有对应的用户的ID);
 该代理方法返回值是BOOL类型的，所以当你需要用webView来显示的时候，一定要返回YES; 至于跳转到App内其他页面就没有这么讲究了，YES or NO all ok; 建议返回NO, 以免出现web内与应用内两次跳转；
 如果服务端需要传参数进去（如：token) ，这是你就需要在创建<code>NSURL</code>对象时，将token封装进去</p>

<pre>[NSURL URLWithString:@"http://www.baidu.com?token=pzshgawegwegeugiwef93i24"]</pre>


<h6>自己在项目中就是这么实现的，如果有疑问或者有更好地方法，请与留言交流；</h6>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[EasyMarkDown]]></title>
    <link href="http://ashen-zhao.github.io/blog/2016/01/08/easymarkdown/"/>
    <updated>2016-01-08T10:52:13+08:00</updated>
    <id>http://ashen-zhao.github.io/blog/2016/01/08/easymarkdown</id>
    <content type="html"><![CDATA[<h2>EasyMarkDown</h2>

<hr />

<h2>基本符号</h2>

<ul>
<li>*, _ , + 3个符号效果都一样，这3个符号被称为 Markdown符号 (符号使用时，有时一个符号不行，请速切换下一个符号)</li>
<li>空白行表示另起一个段落</li>
<li>`是表示inline代码，tab是用来标记 代码段，分别对应html的code，pre标签</li>
</ul>


<hr />

<h2>换行</h2>

<ul>
<li>单一段落( &lt;p>) 用一个空白行</li>
<li>连续两个空格 会变成一个 &lt;br></li>
<li>连续3个符号，然后是空行，表示 hr横线</li>
</ul>


<hr />

<h2>标题</h2>

<ul>
<li>生成h1&ndash;h6,在文字前面加上 1&ndash;6个# 来实现</li>
</ul>


<hr />

<h2>引用</h2>

<ul>
<li>在第一行加上 “>”和一个空格，表示代码引用，还可以嵌套</li>
</ul>


<hr />

<!--more-->


<h2>列表</h2>

<p>这个是markdown文件的主要表示方式，主题要点化</p>

<ul>
<li>使用*,+,-加上一个空格来表示</li>
<li>可以支持嵌套</li>
<li>有序列表用 数字+英文点+空格来表示</li>
<li>列表内容很长，不需要手工输入换行符，css控制段落的宽度，会自动的缩放的</li>
</ul>


<hr />

<h2>链接</h2>

<ul>
<li>直接写 [描述文本](url &ldquo;可选的title&rdquo;)</li>
<li>引用 先定义 [ref_name]:url，然后在需要写入url的地方， 这样使用[描述文本][ref_name]，通常的ref_name一般用数字表示，这样显得专业</li>
<li>简写url：用尖括号包裹url
这样生成的url锚文本就是url本身</li>
</ul>


<hr />

<h2>插入图片</h2>

<ul>
<li>一行表示: ![alt_text](url &ldquo;可选的title&rdquo;)</li>
<li>引用表示法: ![alt_text][id],预先定义 [id]:url &ldquo;可选title&rdquo;</li>
<li>直接使用&lt;img>标签，这样可以指定图片的大小尺寸</li>
</ul>


<hr />

<h2>特殊符号</h2>

<ul>
<li>用\来转义，表示文本中的markdown符号</li>
<li>可以在文本种直接使用html标签，但是要注意在使用的时候，前后加上空行</li>
<li>文本前后各加一个符号，表示斜体</li>
</ul>


<hr />

<h2>文本</h2>

<ul>
<li>文本对齐方式，使用html标签吧： text-align:center/right/left</li>
<li>文字加粗是通过 文字左右各两个符号</li>
<li>文字斜体是通过 文字左右各一个符号</li>
</ul>


<hr />

<p></br>
注：本文内容大致来自于：<a href="http://lutaf.com/markdown-simple-usage.htm">http://lutaf.com/markdown-simple-usage.htm</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 常用加密方法]]></title>
    <link href="http://ashen-zhao.github.io/blog/2016/01/07/datasafety/"/>
    <updated>2016-01-07T17:30:15+08:00</updated>
    <id>http://ashen-zhao.github.io/blog/2016/01/07/datasafety</id>
    <content type="html"><![CDATA[<h3>为何要加密</h3>

<p>&emsp;为什么要加密，顾名思义，如果你不想让别人轻而易举的就拿到你的账号以及登录密码，如果你不想让别人获取你的敏感的数据(利益、聊天等数据),and so on; 不对数据进行加密，那就像你只穿个裤头，在到处跑，随时都可能走光；加密的重要性，我不多说，自己悟吧;<br/>
&emsp;iOS 开发中经常用到的几种加密方式：MD5、Base64、RSA、AES<br/>
&emsp;一般来说最常用的就是MD5和Base64：</p>

<blockquote><ol>
<li>MD5主要应用于普通请求、返回数据，进行数据完整性校验</li>
<li>Base64 主要用于防止数据明文传输</li>
<li>AES 一般用于登录加密</li>
<li>RSA 经常用于重要数据 以及敏感数据的加密</li>
</ol>
</blockquote>

<!--more-->


<h2>MD5</h2>

<pre><code>- (NSString *) stringFromMD5 {
if(self == nil || [self length] == 0) {        return nil;
}    const char *value = [self UTF8String];    unsigned char outputBuffer[CC_MD5_DIGEST_LENGTH];
CC_MD5(value, strlen(value), outputBuffer);
NSMutableString *outputString = [[NSMutableString alloc] initWithCapacity:CC_MD5_DIGEST_LENGTH * 2];
for(NSInteger count = 0; count &lt; CC_MD5_DIGEST_LENGTH; count++){        [outputString appendFormat:@"%02x",outputBuffer[count]];
}       return outputString;
}
</code></pre>

<p>导入头文件：#import &lt;CommonCrypto/CommonDigest.h> <br/>
 该方法为NSString的分类方法</p>

<h2>Base64</h2>

<pre><code>static const char _base64EncodingTable[64] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
static const short _base64DecodingTable[256] = {
-2, -2, -2, -2, -2, -2, -2, -2, -2, -1, -1, -2, -1, -1, -2, -2,
-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
-1, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, 62, -2, -2, -2, 63,
52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -2, -2, -2, -2, -2, -2,
-2,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,
15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -2, -2, -2, -2, -2,
-2, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -2, -2, -2, -2, -2,
-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2
};


+ (NSString *) encodeBase64WithString: (NSString *) strData {
NSData *objData = [strData dataUsingEncoding:NSUTF8StringEncoding];
const unsigned char * objRawData = [objData bytes];
char * objPointer;    char * strResult;    // Get the Raw Data length and ensure we actually have data
int intLength = [objData length];    if (intLength == 0) return nil;    // Setup the String-based Result placeholder and pointer within that placeholder
strResult = (char *)calloc(((intLength + 2) / 3) * 4, sizeof(char));    objPointer = strResult;    // Iterate through everything
while (intLength &gt; 2) { // keep going until we have less than 24 bits        *objPointer++ = _base64EncodingTable[objRawData[0] &gt;&gt; 2];        *objPointer++ = _base64EncodingTable[((objRawData[0] &amp; 0x03) &lt;&lt; 4) + (objRawData[1] &gt;&gt; 4)]; *objPointer++ = _base64EncodingTable[((objRawData[1] &amp; 0x0f) &lt;&lt; 2) + (objRawData[2] &gt;&gt; 6)]; *objPointer++ = _base64EncodingTable[objRawData[2] &amp; 0x3f];        // we just handled 3 octets (24 bits) of data
    objRawData += 3;        intLength -= 3;    }    // now deal with the tail end of things    if (intLength != 0) {        *objPointer++ = _base64EncodingTable[objRawData[0] &gt;&gt; 2];        if (intLength &gt; 1) {            *objPointer++ = _base64EncodingTable[((objRawData[0] &amp; 0x03) &lt;&lt; 4) + (objRawData[1] &gt;&gt; 4)]; *objPointer++ = _base64EncodingTable[(objRawData[1] &amp; 0x0f) &lt;&lt; 2];            *objPointer++ = '=';        } else {            *objPointer++ = _base64EncodingTable[(objRawData[0] &amp; 0x03) &lt;&lt; 4];            *objPointer++ = '=';            *objPointer++ = '=';        }    }    // Terminate the string-based result
*objPointer = '\0';    NSString *rstStr = [NSString stringWithCString:strResult encoding:NSASCIIStringEncoding]; free(objPointer);    return rstStr;    }


+ (NSData *)decodeBase64WithString:(NSString *)strBase64 {
const char *objPointer = [strBase64 cStringUsingEncoding:NSASCIIStringEncoding];
size_t intLength = strlen(objPointer);
int intCurrent;
int i = 0, j = 0, k;

unsigned char *objResult = calloc(intLength, sizeof(unsigned char));

// Run through the whole string, converting as we go
while ( ((intCurrent = *objPointer++) != '\0') &amp;&amp; (intLength-- &gt; 0) ) {
    if (intCurrent == '=') {
        if (*objPointer != '=' &amp;&amp; ((i % 4) == 1)) {// || (intLength &gt; 0)) {
            // the padding character is invalid at this point -- so this entire string is invalid
            free(objResult);
            return nil;
        }
        continue;
    }

    intCurrent = _base64DecodingTable[intCurrent];
    if (intCurrent == -1) {
        // we're at a whitespace -- simply skip over
        continue;
    } else if (intCurrent == -2) {
        // we're at an invalid character
        free(objResult);
        return nil;
    }

    switch (i % 4) {
        case 0:
            objResult[j] = intCurrent &lt;&lt; 2;
            break;

        case 1:
            objResult[j++] |= intCurrent &gt;&gt; 4;
            objResult[j] = (intCurrent &amp; 0x0f) &lt;&lt; 4;
            break;

        case 2:
            objResult[j++] |= intCurrent &gt;&gt;2;
            objResult[j] = (intCurrent &amp; 0x03) &lt;&lt; 6;
            break;

        case 3:
            objResult[j++] |= intCurrent;
            break;
    }
    i++;
}

// mop things up if we ended on a boundary
k = j;
if (intCurrent == '=') {
    switch (i % 4) {
        case 1:
            // Invalid state
            free(objResult);
            return nil;

        case 2:
            k++;
            // flow through
        case 3:
            objResult[k] = 0;
    }
}

// Cleanup and setup the return NSData
NSData * objData = [[NSData alloc] initWithBytes:objResult length:j];
free(objResult);
return objData;
}
</code></pre>

<h2>RSA</h2>

<p>RSA: 比较复杂，这有一篇博客可以参考<a href="http://blog.iamzsx.me/show.html?id=155002">iOS下的RSA加密算法</a></p>

<h2>AES</h2>

<p>对于AES 这也有一个不错的博客<a href="http://www.tuicool.com/articles/UVRjmyN">AES加密算法</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[从工程中删除Cocoapods]]></title>
    <link href="http://ashen-zhao.github.io/blog/2016/01/05/delcocopods/"/>
    <updated>2016-01-05T17:16:42+08:00</updated>
    <id>http://ashen-zhao.github.io/blog/2016/01/05/delcocopods</id>
    <content type="html"><![CDATA[<p>&emsp;会有这么一种情况，因为需要改动的第三方比较多，不想使用cocoapods管理第三方，这时候，对于已经使用cocoapods的情况，需要进行删除处理，就可以按照以下步骤进行：</p>

<ol>
<li><p>删除工程文件夹下的Podfile、Podfile.lock及Pods文件夹</p></li>
<li><p>删除xcworkspace文件</p></li>
<li><p>使用xcodeproj文件打开工程，删除Frameworks组下的Pods.xcconfig及libPods.a引用</p></li>
<li><p>在工程设置中的Build Phases下删除Check Pods Manifest.lock及Copy Pods Resources, 可能还会有Embed Pods Frameworks也删了，总之带有Pods全删了</p></li>
</ol>


<!--more-->


<p><img src="http://ashen-zhao.github.io/images/delcocopods.png" alt="删除图" /></p>

<p><strong>注意</strong>:如果将cocoapods集成到工程中后不小心修改或删除了其相关文件导致无法便以通过例如：不小心把</p>

<p>Pods.xcconfig给删除了然后出现diff: /../Podfile.lock: No such file or directory，用上面的方法删除cocoapods后，</p>

<p>再重新$sudo pod install一下就好了。</p>

<p>如果编译的时候出现权限问题，对工程文件夹$sudo chmod 777 path-to-project-folder/*</p>

<p>$sudo chown 777 path-to-project-folder/*</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[多样式UILabel]]></title>
    <link href="http://ashen-zhao.github.io/blog/2016/01/04/colorfullabel/"/>
    <updated>2016-01-04T16:22:19+08:00</updated>
    <id>http://ashen-zhao.github.io/blog/2016/01/04/colorfullabel</id>
    <content type="html"><![CDATA[<p> 有时候产品经理说，能把一句话显示多种颜色、多种字体吗？ 灵光一闪，弄多个UILabel来显示不就行了，我只能说可以，也只能说这法有点笨。于是我坚决不用这种方法，苦思冥想，终于有了眉目。先配张图来显摆显摆，其实很容易实现，我也就不啰嗦了，看招：
 <!--more-->
<img src="http://ashen-zhao.github.io/images/doubleLabel.png" alt="多样式UILabel" /></p>

<h5>由于很简单，不喜请喷我。</h5>

<p>ok, 上代码，一看也就是一个方法：</p>

<pre><code>
-(void)txtArr:(NSArray *)txtArr colorArr:(NSArray *)colorArr fontArr:(NSArray *)fontArr {

    NSInteger okCount = 0;
    okCount = txtArr.count < colorArr.count ? txtArr.count : colorArr.count;
    okCount = okCount < fontArr.count ? okCount : fontArr.count;

    NSMutableString *txt = [NSMutableString string];
    for (NSString *str in txtArr) {
        [txt appendString:str];
    }
    NSMutableAttributedString *str = [[NSMutableAttributedString alloc] initWithString:txt];
    NSInteger startLoc = 0;
    for (int i = 0; i < okCount; i++) {
        [str addAttributes:@{NSForegroundColorAttributeName:colorArr[i], NSFontAttributeName:[UIFont systemFontOfSize:[fontArr[i] integerValue]]} range:NSMakeRange(startLoc, [txtArr[i] length])];
        startLoc += [txtArr[i] length];
    }
    self.attributedText = str;
}
</code></pre>


<h5>参数说明基本都是见明知意（大人，请允许我自恋吧）</h5>

<ol>
<li>txtArr: 传入的文本数组（对象是字符串）</li>
<li>colorArr: 颜色数组  （对象是UIColor）</li>
<li>fontArr: 字体数组  (对象是字符串如：@&ldquo;18&rdquo; 号字体)</li>
</ol>


<h5>使用方法，写给新手哦，老手请过滤吧，不然你又该喷我了</h5>

<p>我还是以代码使用为主</p>

<pre><code>
NSArray *a = [NSArray arrayWithObjects:@"瞅啥瞅", @"我不就是", @"多样式label么，哈哈", nil];

    NSArray *b = [NSArray arrayWithObjects:[UIColor redColor], [UIColor blackColor], [UIColor blueColor], nil];
    NSArray *c = [NSArray arrayWithObjects:@"19", @"13", @"17", nil];
    [self.multiLabel txtArr:a colorArr:b fontArr:c];
</code></pre>


<p>哎，对了，我将此方法写成了UILabel的分类了，所以这么使用没什么不妥；至于分类，不懂得，去google吧，没翻墙的还是百度吧；</p>

<p><a href="https://github.com/Ashen-Zhao/multiLabel">Demo下载地址</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 如何随意的push来pop去]]></title>
    <link href="http://ashen-zhao.github.io/blog/2016/01/04/any-push-pop/"/>
    <updated>2016-01-04T11:08:00+08:00</updated>
    <id>http://ashen-zhao.github.io/blog/2016/01/04/any-push-pop</id>
    <content type="html"><![CDATA[<h2>iOS 导航控制器如何随意push和pop</h2>

<hr />

<p>第一次开始写技术文章，请同学们多多关照，有错的地方请给我指出，大家学习一起成长，好了，我就废话不多少了；</p>

<hr />

<h4>主题思想：如A、B、C、D 四个视图控制器</h4>

<p>想要在 A push B 后， B 在push 到 D ，然后从 D pop 到 C ,在从 C pop 的A</p>

<hr />

<h4>解决方法如下：</h4>

<p>1.假如此时在 A 控制器下，想要到 push 到 B， 可以这样写</p>

<pre><code> [self.navigationController pushViewController: B :YES];
</code></pre>

<p> <!--more-->
这时 <code>self.navigationController.viewControllers</code> 中按顺序含有 [A，B]</p>

<p>2.此时已经到 B 控制器下了， 接下来是 push 到 D, 可以这样写</p>

<pre><code> [self.navigationController pushViewController: D :YES];
</code></pre>

<p>这时 <code>self.navigationController.viewControllers</code> 中按顺序含有 [A，B，D]</p>

<p>接下来<strong>很重要，很重要，很重要</strong>：</p>

<p>如何想从 D pop 到 C, 看数组[A，B，D] 中压根就没有C 该如何pop 到C呢？</p>

<p>这时就需要对这个数组进行修改，将C 加入进去</p>

<p><strong>于是 你会如下写：</strong></p>

<pre><code>[self.navigationController.viewControllers addObject:C]; 
</code></pre>

<p>发现报错，这是因为<code>self.navigationController.viewControllers</code> 是不可变数组，没办法了，我们只好转换一下了：</p>

<pre><code>NSMutableArray*tempMarr =[NSMutableArrayarrayWithArray:self.navigationController.viewControllers];
</code></pre>

<p>此时再加入C 就容易多了，咦，聪明的你会发现从 D pop C 不能直接将 C直接 addObject;</p>

<p><strong>当然，我会这样做：</strong></p>

<pre><code>[tempMarr insertObject:C atIndex:tempMarr.count- 2];
</code></pre>

<p>这时候 <code>tempMarr</code> 是这样的 [A，B，C，D],  可是 要想 从 C pop 到 A ,数组中就不能有 B</p>

<p>就需要 将<code>tempMarr</code> 变成 [A，C，D] ，至于怎么变，你比我懂得多，</p>

<p>懂得思考的同学会发现 这时的<code>self.navigationController.viewControllers</code> 依然是 [A，B，D]， 不用急，不用怕<code>navigationController</code> 有这样一个方法, 可以搞定，如下：</p>

<pre><code>[self.navigationController setViewControllers:tempMarr animated:YES];
</code></pre>

<p>有的同学会说，这不是直接把 B 替换 成 C 吗</p>

<p>看上去是这样，可是跳转的时机，时机，时机重要的事情说三遍，还有视图的切换，切换，切换</p>

<p>此时还在 B 控制器中，这些处理过程都是在 B 中处理的 ， 也必须是 B 执行了 push 到 D 方法后，也就是说</p>

<pre><code>[self.navigationController pushViewController:D animated:YES];
</code></pre>

<p> 之后 进行的 数组处理；</p>

<h4>附加代码：</h4>

<p>在B 控制器中处理：</p>

<pre><code>-(void)pushTest {

    [self.navigationController pushViewController:D animated:YES];

NSMutableArray*tempMarr =[NSMutableArrayarrayWithArray:self.navigationController.viewControllers];

[tempMarr insertObject:C atIndex:tempMarr.count- 2];

[tempMarr removeObject:self]; //此时 的self 就是指 B ,因为在 B 中呢

[self.navigationController setViewControllers:tempMarr animated:YES];

}
</code></pre>

<p><a href="https://github.com/Ashen-Zhao/anypushpop">Demo下载地址</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[迟到的爱，是现在和未来]]></title>
    <link href="http://ashen-zhao.github.io/blog/2016/01/01/love/"/>
    <updated>2016-01-01T16:28:50+08:00</updated>
    <id>http://ashen-zhao.github.io/blog/2016/01/01/love</id>
    <content type="html"><![CDATA[<p><b></p>

<p>爱在此处绽放</p>

<p>心底的声音，从未停止呼喊</p>

<p>爱的懵懵懂懂，爱的小心翼翼</p>

<p>尽管，使出全力想要呵护，保护这份爱，想让她从不受伤害</p>

<p>尽管如此</p>

<p>你越是在乎，越是想要保护，就越容易出差错</p>

<p>爱，不是小心翼翼</p>

<p>爱，需要交流，需要内心世界的交互</p>

<p>一直以为，爱，如果你懂我，我什么都不用说</p>

<p>可那只是理想</p>

<p>你不说，谁会懂？爱不是玩家家</p>

<p>既然承诺，就有责任，爱不是游戏</p>

<p>我对爱情的认真，连我自己都想不到我会做什么我自己想都没想的事</p>

<p>爱，需要勇气</p>

<p>需要在自己害怕的时候，依然挺起胸膛保护你的她，让对方感觉不到你的胆怯</p>

<p>想信爱，从不怀疑，从不动摇</p>

<p>天荒地老，愿与之白头偕老
</b></p>

<hr />

<h4>对待爱情的态度，本该如此</h4>

<pre>
      ******       ******
    **********   **********
  ************* *************
 *****************************
 *****************************
 *****************************
  ***************************
    ***********************
      *******************
        ***************
          ***********
            *******
              ***
               *
</pre>


<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 只需几步实现生日选择器]]></title>
    <link href="http://ashen-zhao.github.io/blog/2015/12/29/birthSelector/"/>
    <updated>2015-12-29T15:19:49+08:00</updated>
    <id>http://ashen-zhao.github.io/blog/2015/12/29/birthSelector</id>
    <content type="html"><![CDATA[<p>  项目开发中难免会遇到让用户填写出生年月的时候，本章来介绍一下我自己写的生日选择器的<a href="https://github.com/Ashen-Zhao/ASBirthSheet">ASBirthSheet</a>;
  <!--more-->
  </br>
大致就是这个样子<img src="http://ashen-zhao.github.io/images/birthsrceenshot.png" alt="示例图" />
  我对生日选择器页面进行了简单的封装，算上.h文件只有两个文件，使用起来很简单；</p>

<h4>以下是对.h文件中的说明</h4>

<pre><code>
@property (nonatomic, copy) void(^GetSelectDate)(NSString *dateStr);

@property (nonatomic, strong) NSString * selectDate;
</code></pre>


<p><code>GetSelectDate</code>是一个Block回调，是在选择完日期后确认后，就会触发，它返回一个日期格式为<code>2015-12-08</code>的字符串；
<code>selectDate</code>是设置选中时的日期格式也需要是<code>2015-12-08</code>才能匹配；</p>

<h4>以下是使用方法：</h4>

<pre><code>
-(void)chooseBirthdayAction{

    ASBirthSelectSheet *datesheet = [[ASBirthSelectSheet alloc] initWithFrame:self.view.bounds];
    datesheet.selectDate = @"2015-12-08";
    datesheet.GetSelectDate = ^(NSString *dateStr) {
        NSLog(@"ok Date:%@", dateStr);
    };
    [self.view addSubview:datesheet];
}
</code></pre>


<p>使用起来很容易就这么几步，就可以实现一个简单的生日选择器；
由于只是使用，并没有对其进行很好地封装，如果你感兴趣，可以封装的更好点，来共同交流下；
附：
<a href="https://github.com/Ashen-Zhao/ASBirthSheet">Demo下载地址</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 上传图片方法总结]]></title>
    <link href="http://ashen-zhao.github.io/blog/2015/12/28/uploadimg/"/>
    <updated>2015-12-28T17:51:57+08:00</updated>
    <id>http://ashen-zhao.github.io/blog/2015/12/28/uploadimg</id>
    <content type="html"><![CDATA[<h3>开题：</h3>

<p>iOS 开发中难免会遇到上传图片，一般情况下有两种方式：</p>

<p>1.自己动手写（利用NSURLMutableRequest等系统类）</p>

<p>2.使用第三方（如AFNetworking)</p>

<p>据我所经历的，如果你不是大神，还是用第三方吧，自己写的话会很麻烦，需要拼接一些请求头，请求体等，就算弄好了也是废了很多时间了；当然，费时间并不是我不推荐自己动手写，因为在我现在接手的项目中，就是使用的自己写的，上传中会出现丢图等各种问题，特别在网络不好的情况下；</p>

<p>面对这样的上传图片，我的Boss 交给我了一个课题，就是改善上传图片的网络底层库；看在我不是大神的份上，我就选择了AFNetwoking；</p>

<!--more-->


<p>  So,对于自己动手实现的方法，在这里我就不多写了；接下来主要是AFNetwoking实现方法：至于如何导入第三方，我不多说，你是直接拉进也行，使用cocoapods也行；</p>

<h3>进入正题：</h3>

<p>以下是上传图片的方法：</p>

<pre>
<code>
+(void)uploadImageWithUrl:(NSString *)strUrl dataParams:(NSMutableDictionary *)dataParams imageParams:(NSMutableDictionary *) imageParams Success:(void(^)(NSDictionary* resultDic)) success Failed:(void(^)(NSError *error))fail {

 NSArray *keys = [imageParams allKeys];

 UIImage * image = [imageParams objectForKey:[keys firstObject]];

  AFHTTPRequestOperationManager *manager = [AFHTTPRequestOperationManager manager];
//对SSL做处理，防止上传失败
AFSecurityPolicy *securityPolicy = [AFSecurityPolicy policyWithPinningMode:AFSSLPinningModeCertificate];
    securityPolicy.allowInvalidCertificates = YES;
    securityPolicy.validatesDomainName = NO;
    manager.securityPolicy = securityPolicy;
    [manager.requestSerializer willChangeValueForKey:@"timeoutInterval"];
    manager.requestSerializer.timeoutInterval = 120;
    [manager.requestSerializer didChangeValueForKey:@"timeoutInterval"];
    [manager POST:strUrl parameters:dataParams constructingBodyWithBlock:^(id<AFMultipartFormData> formData) {
        [formData appendPartWithFileData:UIImageJPEGRepresentation(image, 0.5) name:[keys firstObject] fileName:[NSString stringWithFormat:@"%@.jpeg",[keys firstObject]] mimeType:@"image/jpeg"];
    } success:^(AFHTTPRequestOperation *operation, id responseObject) {
        if (success) {
            success(responseObject);
        }
    } failure:^(AFHTTPRequestOperation *operation, NSError *error) {
        if (fail) {
            fail(error);
        }
    }];
}
</code></pre>


<p>
接下来是如何调用：</p>

<pre><code>
-(void)uploadImageAction {

NSString *url = @"https://github.com/Ashen-Zhao";
    NSMutableDictionary *dpp =[@{@"token":@"zhaoshenshenazhao"} mutableCopy];
    NSMutableDictionary *pimgs= [@{@"file":[UIImage imageNamed:@"a.jpg"]} mutableCopy];
 [NetworkEngine uploadImageWithUrl:url dataParams:dpp imageParams:pimgs Success:^(NSDictionary* resultDic) {
        NSLog(@"%@", resultDic);
    } Failed:^(NSError *error) {
     }];
}
</code></pre>


<p>参数说明：</p>

<ul>
<li>strUrl：上传图片的服务器地- - dataParams：数据参数（如token等）</li>
<li>imageParams：图片参数（字典中的object一定要是UIImage类型；当然我写的是这样，你也可以修改为其他）</li>
<li>Success：上传成功后的Block回调（resultDic是服务器返回的结果）</li>
<li>Failed：上传失败后的Block回调（error是错误结果）</li>
</ul>


<p>  以上就是AFNetworking上传图片的方法， 分享给大家一起学习，你也可以自己改造这个方法，如果你发现更好的方法，请留言给我或者发邮件给我<a href="&#109;&#97;&#105;&#x6c;&#116;&#111;&#58;&#x7a;&#x68;&#x61;&#x6f;&#x61;&#115;&#104;&#x65;&#x6e;&#64;&#x67;&#x6d;&#x61;&#x69;&#108;&#x2e;&#99;&#111;&#x6d;">&#122;&#x68;&#97;&#x6f;&#x61;&#x73;&#104;&#x65;&#110;&#64;&#103;&#109;&#97;&#x69;&#x6c;&#x2e;&#99;&#x6f;&#109;</a>；</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[百度天气预报API的使用（java版本）]]></title>
    <link href="http://ashen-zhao.github.io/blog/2015/12/28/weather/"/>
    <updated>2015-12-28T07:32:35+08:00</updated>
    <id>http://ashen-zhao.github.io/blog/2015/12/28/weather</id>
    <content type="html"><![CDATA[<p>&emsp;开发微信公众平台时，想要实现查询天气功能，找啊找，就找到了百度地图api；
使用方法进行简单总结：</p>

<p>此文章内容，转自我之前写的一篇文章： <a href="http://blog.csdn.net/ashenyy/article/details/25072857">http://blog.csdn.net/ashenyy/article/details/25072857</a></p>

<p>要使用百度天气预报api，首先要有密钥ak,申请地址<a href="http://developer.baidu.com/map/lbs-cloud.htm">http://developer.baidu.com/map/lbs-cloud.htm</a></p>

<!--more-->


<p>然后向<a href="http://api.map.baidu.com/telematics/v3/weather?location=%E9%83%91%E5%B7%9E&amp;output=xml&amp;ak=A72e372de05e63c8740b2622d0ed8ab1">http://api.map.baidu.com/telematics/v3/weather?location=%E9%83%91%E5%B7%9E&amp;output=xml&amp;ak=A72e372de05e63c8740b2622d0ed8ab1</a>
请求，然后会返还给你一个xml文档格式的天气预报如下：</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;CityWeatherResponse&gt;
&lt;status&gt;success&lt;/status&gt;
 &lt;date&gt;2014-04-29&lt;/date&gt;
&lt;results&gt;
&lt;currentCity&gt;郑州&lt;/currentCity&gt;
&lt;weather_data&gt;
      &lt;date&gt;周二(今天, 实时：20℃)&lt;/date&gt;
  &lt;dayPictureUrl&gt;http://api.map.baidu.com/images/weather/day/qing.png&lt;;/dayPictureUrl&gt;
  &lt;nightPictureUrl&gt;http://api.map.baidu.com/images/weather/night/qing.png&lt;;/nightPictureUrl&gt;
  &lt;weather&gt;晴&lt;/weather&gt;
  &lt;wind&gt;微风&lt;/wind&gt;
  &lt;temperature&gt;13℃&lt;/temperature&gt;
      &lt;date&gt;周三&lt;/date&gt;
  &lt;dayPictureUrl&gt;http://api.map.baidu.com/images/weather/day/qing.png&lt;;/dayPictureUrl&gt;
  &lt;nightPictureUrl&gt;http://api.map.baidu.com/images/weather/night/qing.png&lt;;/nightPictureUrl&gt;
  &lt;weather&gt;晴&lt;/weather&gt;
  &lt;wind&gt;微风&lt;/wind&gt;
  &lt;temperature&gt;28 ~ 15℃&lt;/temperature&gt;
      &lt;date&gt;周四&lt;/date&gt;
  &lt;dayPictureUrl&gt;http://api.map.baidu.com/images/weather/day/duoyun.png&lt;;/dayPictureUrl&gt;
  &lt;nightPictureUrl&gt;http://api.map.baidu.com/images/weather/night/yin.png&lt;;/nightPictureUrl&gt;
  &lt;weather&gt;多云转阴&lt;/weather&gt;
  &lt;wind&gt;微风&lt;/wind&gt;
  &lt;temperature&gt;30 ~ 15℃&lt;/temperature&gt;
      &lt;date&gt;周五&lt;/date&gt;
  &lt;dayPictureUrl&gt;http://api.map.baidu.com/images/weather/day/yin.png&lt;;/dayPictureUrl&gt;
  &lt;nightPictureUrl&gt;http://api.map.baidu.com/images/weather/night/duoyun.png&lt;;/nightPictureUrl&gt;
  &lt;weather&gt;阴转多云&lt;/weather&gt;
  &lt;wind&gt;微风&lt;/wind&gt;
  &lt;temperature&gt;25 ~ 15℃&lt;/temperature&gt;
    &lt;/weather_data&gt;
&lt;/results&gt;
&lt;/CityWeatherResponse&gt;
</code></pre>

<p>接下 来只需要对此xml文档解析取出数据即可
具体代码如下：</p>

<pre><code>
    package com.ashen.testapi;
    import java.io.BufferedReader;
    import java.io.InputStream;
    import java.io.InputStreamReader;
    import java.io.UnsupportedEncodingException;
    import java.net.HttpURLConnection;
    import java.net.URL;
    import java.net.URLEncoder;
    import java.util.Iterator;
    import java.util.List;
    import org.dom4j.Document;
    import org.dom4j.DocumentException;
    import org.dom4j.DocumentHelper;
    import org.dom4j.Element;
    public class BaiduWeather {
    //获取天气信息
  public static String GetWeater(String city) {
    BaiduWeather wu=new BaiduWeather();
    String buffstr=null;
    try {
        String xml= wu.GetXmlCode(URLEncoder.encode(city, "utf-8"));  //设置输入城市的编码，以满足百度天气api需要
        buffstr=wu.readStringXml(xml,city);//调用xml解析函数
    } catch (Exception e) {
    e.printStackTrace();
    }
    return  buffstr;
    }
    public String GetXmlCode(String city) throws UnsupportedEncodingException{
    String requestUrl = "http://api.map.baidu.com/telematics/v3/weather?location="+city+"&output=xml&ak=A72e372de05e63c8740b2622d0ed8ab1";  
    StringBuffer buffer = null;  
    try {  
    // 建立连接  
    URL url = new URL(requestUrl);
    HttpURLConnection httpUrlConn = (HttpURLConnection) url.openConnection();  
    httpUrlConn.setDoInput(true);  
    httpUrlConn.setRequestMethod("GET");  
    // 获取输入流  
    InputStream inputStream = httpUrlConn.getInputStream();  
    InputStreamReader inputStreamReader = new InputStreamReader(inputStream, "utf-8");  
    BufferedReader bufferedReader = new BufferedReader(inputStreamReader);  
    // 读取返回结果  
    buffer = new StringBuffer();  
    String str = null;  
    while ((str = bufferedReader.readLine()) != null) {  
      buffer.append(str);  
    }  
  
   // 释放资源  
   bufferedReader.close();  
    inputStreamReader.close();  
    inputStream.close();  
    httpUrlConn.disconnect();  
    } catch (Exception e) {  
    e.printStackTrace();  
    }  
    return buffer.toString();  //返回获取的xml字符串
}
public String readStringXml(String xml,String ifcity) {
  StringBuffer buff=new StringBuffer();  //用来拼接天气信息的
  Document doc = null;
  List listdate=null;  //用来存放日期
  List listday=null;  //用来存放白天图片路径信息
  List listweather=null;
  List listwind=null;
  List listtem=null;
  try {
    // 读取并解析XML文档
    //下面的是通过解析xml字符串的
    doc = DocumentHelper.parseText(xml); // 将字符串转为XML  
    Element rootElt = doc.getRootElement(); // 获取根节点    
    Iterator iter = rootElt.elementIterator("results"); // 获取根节点下的子节点results
    String status=rootElt.elementText("status"); //获取状态，如果等于success,表示有数据
    if(!status.equals("success"))
      return "暂无数据";  //如果不存在数据，直接返回
    String date= rootElt.elementText("date");  //获取根节点下的，当天日期
    buff.append(date+"\n");
    //遍历results节点
      while (iter.hasNext()) {
      Element recordEle = (Element) iter.next();
      Iterator iters = recordEle.elementIterator("weather_data"); //
    //遍历results节点下的weather_data节点
      while (iters.hasNext()) {
        Element itemEle = (Element) iters.next();  
        listdate=itemEle.elements("date");
      //将date集合放到listdate中
        listday=itemEle.elements("dayPictureUrl");
        listweather=itemEle.elements("weather");
        listwind=itemEle.elements("wind");
        listtem=itemEle.elements("temperature");
    }    
    for(int i=0; i < listdate.size();i++){     //由于每一个list.size都相等，这里统一处理
      Element eledate=(Element)listdate.get(i); //依次取出date
      Element eleday=(Element)listday.get(i);//..
      Element eleweather=(Element)listweather.get(i);
      Element elewind=(Element)listwind.get(i);
      Element eletem=(Element)listtem.get(i);            
      buff.append(eledate.getText()+"==="+eleweather.getText()+"==="+elewind.getText()+"==="+eletem.getText()+"\n");  //拼接信息
        //*****************如果想用到微信公众号上，还请自己继续写代码，我只能帮到这了，数据已经分离开了。
      //微信天气处理  省略
    }  
    }
    } catch (DocumentException e) {
    e.printStackTrace();
    } catch (Exception e) {
    e.printStackTrace();
    }
    return buff.toString();  
}
    public static void main(String[] args){
    //测试
    System.out.println(GetWeater("郑州").toString());
    }
}
</code></pre>


<p>测试结果：
2014-04-29</p>

<p>周二(今天, 实时：20℃)===晴===微风===13℃</p>

<p>周三===晴===微风===28 ~ 15℃</p>

<p>周四===多云转阴===微风===30 ~ 15℃</p>

<p>周五===阴转多云===微风===25 ~ 15℃</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[开始我的博客之旅]]></title>
    <link href="http://ashen-zhao.github.io/blog/2015/12/28/startblog/"/>
    <updated>2015-12-28T07:08:39+08:00</updated>
    <id>http://ashen-zhao.github.io/blog/2015/12/28/startblog</id>
    <content type="html"><![CDATA[<h3>&emsp;啊神的技术博客</h3>

<hr />

<p></br></p>

<h3>&emsp;这里是我的个人技术博客；</h3>

<h3>&emsp;初来乍到，还请各位多多关注;</h3>

<h3>&emsp;在下方评论区内，可以给我留言来交流学习哦；</h3>
]]></content>
  </entry>
  
</feed>
