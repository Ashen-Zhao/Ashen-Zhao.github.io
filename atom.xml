<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[啊神的技术博客]]></title>
  <link href="http://ashen-zhao.github.io/atom.xml" rel="self"/>
  <link href="http://ashen-zhao.github.io/"/>
  <updated>2016-01-11T15:03:58+08:00</updated>
  <id>http://ashen-zhao.github.io/</id>
  <author>
    <name><![CDATA[A-shen]]></name>
    <email><![CDATA[zhaoashen@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[UIWebView 与 原生系统的简单跳转交互]]></title>
    <link href="http://ashen-zhao.github.io/blog/2016/01/11/webview/"/>
    <updated>2016-01-11T10:15:09+08:00</updated>
    <id>http://ashen-zhao.github.io/blog/2016/01/11/webview</id>
    <content type="html"><![CDATA[<h3>简单介绍UIWebView</h3>

<p> 关于UIWebView这里我就不多介绍了，可以简单理解为一个在iOS 端显示网页的一个控件；</p>

<h3>UIWebView的使用</h3>

<p> 它既然也是view，当然就可以像其他view一样的创建，如下：</p>

<pre><code> UIWebView *webView = [[UIWebView alloc] initWithFrame:CGRectMake(0, 0, 320, 560)];

 webView.delegate = self;//先在此设置下代理，等下会实现其代理方法</code></pre>


<p> <!--more-->
 当然这是创建一个对象，想要加载一个网页还需要实现<code>loadRequest:</code>这个方法；这时你会发现该方法需要一个<code>NSURLRequest</code>类型的参数；那简单我们就来创建一个又如何；我们使用NSURLRequest的类方法<code>requestWithURL:</code>来创建；咦，又会发现这个类方法需要一个<code>NSURL</code>类型的参数；不管了，那就先创建NSURL对象吧；</p>

<pre><code>
 NSURL *url = [NSURL URLWithString:@"http://www.baidu.com"];

[webView loadRequest:[NSURLRequest requestWithURL:url];</code></pre>


<p> 切记后面一定要是一个可访问的网址；
 最后，因为它也是View，别忘记加到父视图上</p>

<pre><code>[self.view addSubview:webView];</code></pre>


<p>既然要实现与原生系统的交互，那就不得不实现它的代理方法</p>

<pre><code>-(BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)navigationType {
   NSString *urlStr = request.URL.absoluteString; //取出webView交互的url链接；
        //根据urlStr链接中的参数，去push到系统中的任何页面都可以的
       /*实现code
        .....
       */
      return YES;
}</code></pre>


<p> <b>附加说明</b>：urlStr是网页中，点击带有响应，传过来的网址，这个网址要看你服务端给的什么内容，针对内容去跳转到对象的页面(如：是一个头像的点击，则跳转到对应的用户信息，这是网址中，服务端就应该封装的有对应的用户的ID);
 该代理方法返回值是BOOL类型的，所以当你需要用webView来显示的时候，一定要返回YES; 至于跳转到App内其他页面就没有这么讲究了，YES or NO all ok; 建议返回NO, 以免出现web内与应用内两次跳转；
 如果服务端需要传参数进去（如：token) ，这是你就需要在创建<code>NSURL</code>对象时，将token封装进去</p>

<pre>[NSURL URLWithString:@"http://www.baidu.com?token=pzshgawegwegeugiwef93i24"]</pre>


<h6>自己在项目中就是这么实现的，如果有疑问或者有更好地方法，请与留言交流；</h6>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[EasyMarkDown]]></title>
    <link href="http://ashen-zhao.github.io/blog/2016/01/08/easymarkdown/"/>
    <updated>2016-01-08T10:52:13+08:00</updated>
    <id>http://ashen-zhao.github.io/blog/2016/01/08/easymarkdown</id>
    <content type="html"><![CDATA[<h2>EasyMarkDown</h2>

<hr />

<h2>基本符号</h2>

<ul>
<li>*, _ , + 3个符号效果都一样，这3个符号被称为 Markdown符号 (符号使用时，有时一个符号不行，请速切换下一个符号)</li>
<li>空白行表示另起一个段落</li>
<li>`是表示inline代码，tab是用来标记 代码段，分别对应html的code，pre标签</li>
</ul>


<hr />

<h2>换行</h2>

<ul>
<li>单一段落( &lt;p>) 用一个空白行</li>
<li>连续两个空格 会变成一个 &lt;br></li>
<li>连续3个符号，然后是空行，表示 hr横线</li>
</ul>


<hr />

<h2>标题</h2>

<ul>
<li>生成h1&ndash;h6,在文字前面加上 1&ndash;6个# 来实现</li>
</ul>


<hr />

<h2>引用</h2>

<ul>
<li>在第一行加上 “>”和一个空格，表示代码引用，还可以嵌套</li>
</ul>


<hr />

<!--more-->


<h2>列表</h2>

<p>这个是markdown文件的主要表示方式，主题要点化</p>

<ul>
<li>使用*,+,-加上一个空格来表示</li>
<li>可以支持嵌套</li>
<li>有序列表用 数字+英文点+空格来表示</li>
<li>列表内容很长，不需要手工输入换行符，css控制段落的宽度，会自动的缩放的</li>
</ul>


<hr />

<h2>链接</h2>

<ul>
<li>直接写 [描述文本](url &ldquo;可选的title&rdquo;)</li>
<li>引用 先定义 [ref_name]:url，然后在需要写入url的地方， 这样使用[描述文本][ref_name]，通常的ref_name一般用数字表示，这样显得专业</li>
<li>简写url：用尖括号包裹url
这样生成的url锚文本就是url本身</li>
</ul>


<hr />

<h2>插入图片</h2>

<ul>
<li>一行表示: ![alt_text](url &ldquo;可选的title&rdquo;)</li>
<li>引用表示法: ![alt_text][id],预先定义 [id]:url &ldquo;可选title&rdquo;</li>
<li>直接使用&lt;img>标签，这样可以指定图片的大小尺寸</li>
</ul>


<hr />

<h2>特殊符号</h2>

<ul>
<li>用\来转义，表示文本中的markdown符号</li>
<li>可以在文本种直接使用html标签，但是要注意在使用的时候，前后加上空行</li>
<li>文本前后各加一个符号，表示斜体</li>
</ul>


<hr />

<h2>文本</h2>

<ul>
<li>文本对齐方式，使用html标签吧： text-align:center/right/left</li>
<li>文字加粗是通过 文字左右各两个符号</li>
<li>文字斜体是通过 文字左右各一个符号</li>
</ul>


<hr />

<p></br>
注：本文内容大致来自于：<a href="http://lutaf.com/markdown-simple-usage.htm">http://lutaf.com/markdown-simple-usage.htm</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 常用加密方法]]></title>
    <link href="http://ashen-zhao.github.io/blog/2016/01/07/datasafety/"/>
    <updated>2016-01-07T17:30:15+08:00</updated>
    <id>http://ashen-zhao.github.io/blog/2016/01/07/datasafety</id>
    <content type="html"><![CDATA[<h3>为何要加密</h3>

<p>&emsp;为什么要加密，顾名思义，如果你不想让别人轻而易举的就拿到你的账号以及登录密码，如果你不想让别人获取你的敏感的数据(利益、聊天等数据),and so on; 不对数据进行加密，那就像你只穿个裤头，在到处跑，随时都可能走光；加密的重要性，我不多说，自己悟吧;<br/>
&emsp;iOS 开发中经常用到的几种加密方式：MD5、Base64、RSA、AES<br/>
&emsp;一般来说最常用的就是MD5和Base64：</p>

<blockquote><ol>
<li>MD5主要应用于普通请求、返回数据，进行数据完整性校验</li>
<li>Base64 主要用于防止数据明文传输</li>
<li>AES 一般用于登录加密</li>
<li>RSA 经常用于重要数据 以及敏感数据的加密</li>
</ol>
</blockquote>

<!--more-->


<h2>MD5</h2>

<pre><code>- (NSString *) stringFromMD5 {
if(self == nil || [self length] == 0) {        return nil;
}    const char *value = [self UTF8String];    unsigned char outputBuffer[CC_MD5_DIGEST_LENGTH];
CC_MD5(value, strlen(value), outputBuffer);
NSMutableString *outputString = [[NSMutableString alloc] initWithCapacity:CC_MD5_DIGEST_LENGTH * 2];
for(NSInteger count = 0; count &lt; CC_MD5_DIGEST_LENGTH; count++){        [outputString appendFormat:@"%02x",outputBuffer[count]];
}       return outputString;
}
</code></pre>

<p>导入头文件：#import &lt;CommonCrypto/CommonDigest.h> <br/>
 该方法为NSString的分类方法</p>

<h2>Base64</h2>

<pre><code>static const char _base64EncodingTable[64] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
static const short _base64DecodingTable[256] = {
-2, -2, -2, -2, -2, -2, -2, -2, -2, -1, -1, -2, -1, -1, -2, -2,
-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
-1, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, 62, -2, -2, -2, 63,
52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -2, -2, -2, -2, -2, -2,
-2,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,
15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -2, -2, -2, -2, -2,
-2, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -2, -2, -2, -2, -2,
-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2
};


+ (NSString *) encodeBase64WithString: (NSString *) strData {
NSData *objData = [strData dataUsingEncoding:NSUTF8StringEncoding];
const unsigned char * objRawData = [objData bytes];
char * objPointer;    char * strResult;    // Get the Raw Data length and ensure we actually have data
int intLength = [objData length];    if (intLength == 0) return nil;    // Setup the String-based Result placeholder and pointer within that placeholder
strResult = (char *)calloc(((intLength + 2) / 3) * 4, sizeof(char));    objPointer = strResult;    // Iterate through everything
while (intLength &gt; 2) { // keep going until we have less than 24 bits        *objPointer++ = _base64EncodingTable[objRawData[0] &gt;&gt; 2];        *objPointer++ = _base64EncodingTable[((objRawData[0] &amp; 0x03) &lt;&lt; 4) + (objRawData[1] &gt;&gt; 4)]; *objPointer++ = _base64EncodingTable[((objRawData[1] &amp; 0x0f) &lt;&lt; 2) + (objRawData[2] &gt;&gt; 6)]; *objPointer++ = _base64EncodingTable[objRawData[2] &amp; 0x3f];        // we just handled 3 octets (24 bits) of data
    objRawData += 3;        intLength -= 3;    }    // now deal with the tail end of things    if (intLength != 0) {        *objPointer++ = _base64EncodingTable[objRawData[0] &gt;&gt; 2];        if (intLength &gt; 1) {            *objPointer++ = _base64EncodingTable[((objRawData[0] &amp; 0x03) &lt;&lt; 4) + (objRawData[1] &gt;&gt; 4)]; *objPointer++ = _base64EncodingTable[(objRawData[1] &amp; 0x0f) &lt;&lt; 2];            *objPointer++ = '=';        } else {            *objPointer++ = _base64EncodingTable[(objRawData[0] &amp; 0x03) &lt;&lt; 4];            *objPointer++ = '=';            *objPointer++ = '=';        }    }    // Terminate the string-based result
*objPointer = '\0';    NSString *rstStr = [NSString stringWithCString:strResult encoding:NSASCIIStringEncoding]; free(objPointer);    return rstStr;    }


+ (NSData *)decodeBase64WithString:(NSString *)strBase64 {
const char *objPointer = [strBase64 cStringUsingEncoding:NSASCIIStringEncoding];
size_t intLength = strlen(objPointer);
int intCurrent;
int i = 0, j = 0, k;

unsigned char *objResult = calloc(intLength, sizeof(unsigned char));

// Run through the whole string, converting as we go
while ( ((intCurrent = *objPointer++) != '\0') &amp;&amp; (intLength-- &gt; 0) ) {
    if (intCurrent == '=') {
        if (*objPointer != '=' &amp;&amp; ((i % 4) == 1)) {// || (intLength &gt; 0)) {
            // the padding character is invalid at this point -- so this entire string is invalid
            free(objResult);
            return nil;
        }
        continue;
    }

    intCurrent = _base64DecodingTable[intCurrent];
    if (intCurrent == -1) {
        // we're at a whitespace -- simply skip over
        continue;
    } else if (intCurrent == -2) {
        // we're at an invalid character
        free(objResult);
        return nil;
    }

    switch (i % 4) {
        case 0:
            objResult[j] = intCurrent &lt;&lt; 2;
            break;

        case 1:
            objResult[j++] |= intCurrent &gt;&gt; 4;
            objResult[j] = (intCurrent &amp; 0x0f) &lt;&lt; 4;
            break;

        case 2:
            objResult[j++] |= intCurrent &gt;&gt;2;
            objResult[j] = (intCurrent &amp; 0x03) &lt;&lt; 6;
            break;

        case 3:
            objResult[j++] |= intCurrent;
            break;
    }
    i++;
}

// mop things up if we ended on a boundary
k = j;
if (intCurrent == '=') {
    switch (i % 4) {
        case 1:
            // Invalid state
            free(objResult);
            return nil;

        case 2:
            k++;
            // flow through
        case 3:
            objResult[k] = 0;
    }
}

// Cleanup and setup the return NSData
NSData * objData = [[NSData alloc] initWithBytes:objResult length:j];
free(objResult);
return objData;
}
</code></pre>

<h2>RSA</h2>

<p>RSA: 比较复杂，这有一篇博客可以参考<a href="http://blog.iamzsx.me/show.html?id=155002">iOS下的RSA加密算法</a></p>

<h2>AES</h2>

<p>对于AES 这也有一个不错的博客<a href="http://www.tuicool.com/articles/UVRjmyN">AES加密算法</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[从工程中删除Cocoapods]]></title>
    <link href="http://ashen-zhao.github.io/blog/2016/01/05/delcocopods/"/>
    <updated>2016-01-05T17:16:42+08:00</updated>
    <id>http://ashen-zhao.github.io/blog/2016/01/05/delcocopods</id>
    <content type="html"><![CDATA[<p>&emsp;会有这么一种情况，因为需要改动的第三方比较多，不想使用cocoapods管理第三方，这时候，对于已经使用cocoapods的情况，需要进行删除处理，就可以按照以下步骤进行：</p>

<ol>
<li><p>删除工程文件夹下的Podfile、Podfile.lock及Pods文件夹</p></li>
<li><p>删除xcworkspace文件</p></li>
<li><p>使用xcodeproj文件打开工程，删除Frameworks组下的Pods.xcconfig及libPods.a引用</p></li>
<li><p>在工程设置中的Build Phases下删除Check Pods Manifest.lock及Copy Pods Resources, 可能还会有Embed Pods Frameworks也删了，总之带有Pods全删了</p></li>
</ol>


<!--more-->


<p><img src="http://ashen-zhao.github.io/images/delcocopods.png" alt="删除图" /></p>

<p><strong>注意</strong>:如果将cocoapods集成到工程中后不小心修改或删除了其相关文件导致无法便以通过例如：不小心把</p>

<p>Pods.xcconfig给删除了然后出现diff: /../Podfile.lock: No such file or directory，用上面的方法删除cocoapods后，</p>

<p>再重新$sudo pod install一下就好了。</p>

<p>如果编译的时候出现权限问题，对工程文件夹$sudo chmod 777 path-to-project-folder/*</p>

<p>$sudo chown 777 path-to-project-folder/*</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[多样式UILabel]]></title>
    <link href="http://ashen-zhao.github.io/blog/2016/01/04/colorfullabel/"/>
    <updated>2016-01-04T16:22:19+08:00</updated>
    <id>http://ashen-zhao.github.io/blog/2016/01/04/colorfullabel</id>
    <content type="html"><![CDATA[<p> 有时候产品经理说，能把一句话显示多种颜色、多种字体吗？ 灵光一闪，弄多个UILabel来显示不就行了，我只能说可以，也只能说这法有点笨。于是我坚决不用这种方法，苦思冥想，终于有了眉目。先配张图来显摆显摆，其实很容易实现，我也就不啰嗦了，看招：
 <!--more-->
<img src="http://upload-images.jianshu.io/upload_images/1168293-0ce90e359fcc8c76.png" alt="多样式UILabel" /></p>

<h5>由于很简单，不喜请喷我。</h5>

<p>ok, 上代码，一看也就是一个方法：</p>

<pre><code>
-(void)txtArr:(NSArray *)txtArr colorArr:(NSArray *)colorArr fontArr:(NSArray *)fontArr {

    NSInteger okCount = 0;
    okCount = txtArr.count < colorArr.count ? txtArr.count : colorArr.count;
    okCount = okCount < fontArr.count ? okCount : fontArr.count;

    NSMutableString *txt = [NSMutableString string];
    for (NSString *str in txtArr) {
        [txt appendString:str];
    }
    NSMutableAttributedString *str = [[NSMutableAttributedString alloc] initWithString:txt];
    NSInteger startLoc = 0;
    for (int i = 0; i < okCount; i++) {
        [str addAttributes:@{NSForegroundColorAttributeName:colorArr[i], NSFontAttributeName:[UIFont systemFontOfSize:[fontArr[i] integerValue]]} range:NSMakeRange(startLoc, [txtArr[i] length])];
        startLoc += [txtArr[i] length];
    }
    self.attributedText = str;
}
</code></pre>


<h5>参数说明基本都是见明知意（大人，请允许我自恋吧）</h5>

<ol>
<li>txtArr: 传入的文本数组（对象是字符串）</li>
<li>colorArr: 颜色数组  （对象是UIColor）</li>
<li>fontArr: 字体数组  (对象是字符串如：@&ldquo;18&rdquo; 号字体)</li>
</ol>


<h5>使用方法，写给新手哦，老手请过滤吧，不然你又该喷我了</h5>

<p>我还是以代码使用为主</p>

<pre><code>
NSArray *a = [NSArray arrayWithObjects:@"瞅啥瞅", @"我不就是", @"多样式label么，哈哈", nil];

    NSArray *b = [NSArray arrayWithObjects:[UIColor redColor], [UIColor blackColor], [UIColor blueColor], nil];
    NSArray *c = [NSArray arrayWithObjects:@"19", @"13", @"17", nil];
    [self.multiLabel txtArr:a colorArr:b fontArr:c];
</code></pre>


<p>哎，对了，我将此方法写成了UILabel的分类了，所以这么使用没什么不妥；至于分类，不懂得，去google吧，没翻墙的还是百度吧；</p>

<p><a href="https://github.com/Ashen-Zhao/multiLabel">Demo下载地址</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 如何随意的push来pop去]]></title>
    <link href="http://ashen-zhao.github.io/blog/2016/01/04/any-push-pop/"/>
    <updated>2016-01-04T11:08:00+08:00</updated>
    <id>http://ashen-zhao.github.io/blog/2016/01/04/any-push-pop</id>
    <content type="html"><![CDATA[<h2>iOS 导航控制器如何随意push和pop</h2>

<hr />

<p>第一次开始写技术文章，请同学们多多关照，有错的地方请给我指出，大家学习一起成长，好了，我就废话不多少了；</p>

<hr />

<h4>主题思想：如A、B、C、D 四个视图控制器</h4>

<p>想要在 A push B 后， B 在push 到 D ，然后从 D pop 到 C ,在从 C pop 的A</p>

<hr />

<h4>解决方法如下：</h4>

<p>1.假如此时在 A 控制器下，想要到 push 到 B， 可以这样写</p>

<pre><code> [self.navigationController pushViewController: B :YES];
</code></pre>

<p> <!--more-->
这时 <code>self.navigationController.viewControllers</code> 中按顺序含有 [A，B]</p>

<p>2.此时已经到 B 控制器下了， 接下来是 push 到 D, 可以这样写</p>

<pre><code> [self.navigationController pushViewController: D :YES];
</code></pre>

<p>这时 <code>self.navigationController.viewControllers</code> 中按顺序含有 [A，B，D]</p>

<p>接下来<strong>很重要，很重要，很重要</strong>：</p>

<p>如何想从 D pop 到 C, 看数组[A，B，D] 中压根就没有C 该如何pop 到C呢？</p>

<p>这时就需要对这个数组进行修改，将C 加入进去</p>

<p><strong>于是 你会如下写：</strong></p>

<pre><code>[self.navigationController.viewControllers addObject:C]; 
</code></pre>

<p>发现报错，这是因为<code>self.navigationController.viewControllers</code> 是不可变数组，没办法了，我们只好转换一下了：</p>

<pre><code>NSMutableArray*tempMarr =[NSMutableArrayarrayWithArray:self.navigationController.viewControllers];
</code></pre>

<p>此时再加入C 就容易多了，咦，聪明的你会发现从 D pop C 不能直接将 C直接 addObject;</p>

<p><strong>当然，我会这样做：</strong></p>

<pre><code>[tempMarr insertObject:C atIndex:tempMarr.count- 2];
</code></pre>

<p>这时候 <code>tempMarr</code> 是这样的 [A，B，C，D],  可是 要想 从 C pop 到 A ,数组中就不能有 B</p>

<p>就需要 将<code>tempMarr</code> 变成 [A，C，D] ，至于怎么变，你比我懂得多，</p>

<p>懂得思考的同学会发现 这时的<code>self.navigationController.viewControllers</code> 依然是 [A，B，D]， 不用急，不用怕<code>navigationController</code> 有这样一个方法, 可以搞定，如下：</p>

<pre><code>[self.navigationController setViewControllers:tempMarr animated:YES];
</code></pre>

<p>有的同学会说，这不是直接把 B 替换 成 C 吗</p>

<p>看上去是这样，可是跳转的时机，时机，时机重要的事情说三遍，还有视图的切换，切换，切换</p>

<p>此时还在 B 控制器中，这些处理过程都是在 B 中处理的 ， 也必须是 B 执行了 push 到 D 方法后，也就是说</p>

<pre><code>[self.navigationController pushViewController:D animated:YES];
</code></pre>

<p> 之后 进行的 数组处理；</p>

<h4>附加代码：</h4>

<p>在B 控制器中处理：</p>

<pre><code>-(void)pushTest {

    [self.navigationController pushViewController:D animated:YES];

NSMutableArray*tempMarr =[NSMutableArrayarrayWithArray:self.navigationController.viewControllers];

[tempMarr insertObject:C atIndex:tempMarr.count- 2];

[tempMarr removeObject:self]; //此时 的self 就是指 B ,因为在 B 中呢

[self.navigationController setViewControllers:tempMarr animated:YES];

}
</code></pre>

<p><a href="https://github.com/Ashen-Zhao/anypushpop">Demo下载地址</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 只需几步实现生日选择器]]></title>
    <link href="http://ashen-zhao.github.io/blog/2015/12/29/birthSelector/"/>
    <updated>2015-12-29T15:19:49+08:00</updated>
    <id>http://ashen-zhao.github.io/blog/2015/12/29/birthSelector</id>
    <content type="html"><![CDATA[<p>  项目开发中难免会遇到让用户填写出生年月的时候，本章来介绍一下我自己写的生日选择器的<a href="https://github.com/Ashen-Zhao/ASBirthSheet">ASBirthSheet</a>;
  <!--more-->
  </br>
大致就是这个样子<img src="http://ashen-zhao.github.io/images/birthsrceenshot.png" alt="示例图" />
  我对生日选择器页面进行了简单的封装，算上.h文件只有两个文件，使用起来很简单；</p>

<h4>以下是对.h文件中的说明</h4>

<pre><code>
@property (nonatomic, copy) void(^GetSelectDate)(NSString *dateStr);

@property (nonatomic, strong) NSString * selectDate;
</code></pre>


<p><code>GetSelectDate</code>是一个Block回调，是在选择完日期后确认后，就会触发，它返回一个日期格式为<code>2015-12-08</code>的字符串；
<code>selectDate</code>是设置选中时的日期格式也需要是<code>2015-12-08</code>才能匹配；</p>

<h4>以下是使用方法：</h4>

<pre><code>
-(void)chooseBirthdayAction{

    ASBirthSelectSheet *datesheet = [[ASBirthSelectSheet alloc] initWithFrame:self.view.bounds];
    datesheet.selectDate = @"2015-12-08";
    datesheet.GetSelectDate = ^(NSString *dateStr) {
        NSLog(@"ok Date:%@", dateStr);
    };
    [self.view addSubview:datesheet];
}
</code></pre>


<p>使用起来很容易就这么几步，就可以实现一个简单的生日选择器；
由于只是使用，并没有对其进行很好地封装，如果你感兴趣，可以封装的更好点，来共同交流下；
附：
<a href="https://github.com/Ashen-Zhao/ASBirthSheet">Demo下载地址</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 上传图片方法总结]]></title>
    <link href="http://ashen-zhao.github.io/blog/2015/12/28/uploadimg/"/>
    <updated>2015-12-28T17:51:57+08:00</updated>
    <id>http://ashen-zhao.github.io/blog/2015/12/28/uploadimg</id>
    <content type="html"><![CDATA[<h3>开题：</h3>

<p>iOS 开发中难免会遇到上传图片，一般情况下有两种方式：</p>

<p>1.自己动手写（利用NSURLMutableRequest等系统类）</p>

<p>2.使用第三方（如AFNetworking)</p>

<p>据我所经历的，如果你不是大神，还是用第三方吧，自己写的话会很麻烦，需要拼接一些请求头，请求体等，就算弄好了也是废了很多时间了；当然，费时间并不是我不推荐自己动手写，因为在我现在接手的项目中，就是使用的自己写的，上传中会出现丢图等各种问题，特别在网络不好的情况下；</p>

<p>面对这样的上传图片，我的Boss 交给我了一个课题，就是改善上传图片的网络底层库；看在我不是大神的份上，我就选择了AFNetwoking；</p>

<!--more-->


<p>  So,对于自己动手实现的方法，在这里我就不多写了；接下来主要是AFNetwoking实现方法：至于如何导入第三方，我不多说，你是直接拉进也行，使用cocoapods也行；</p>

<h3>进入正题：</h3>

<p>以下是上传图片的方法：</p>

<pre>
<code>
+(void)uploadImageWithUrl:(NSString *)strUrl dataParams:(NSMutableDictionary *)dataParams imageParams:(NSMutableDictionary *) imageParams Success:(void(^)(NSDictionary* resultDic)) success Failed:(void(^)(NSError *error))fail {

 NSArray *keys = [imageParams allKeys];

 UIImage * image = [imageParams objectForKey:[keys firstObject]];

  AFHTTPRequestOperationManager *manager = [AFHTTPRequestOperationManager manager];
//对SSL做处理，防止上传失败
AFSecurityPolicy *securityPolicy = [AFSecurityPolicy policyWithPinningMode:AFSSLPinningModeCertificate];
    securityPolicy.allowInvalidCertificates = YES;
    securityPolicy.validatesDomainName = NO;
    manager.securityPolicy = securityPolicy;
    [manager.requestSerializer willChangeValueForKey:@"timeoutInterval"];
    manager.requestSerializer.timeoutInterval = 120;
    [manager.requestSerializer didChangeValueForKey:@"timeoutInterval"];
    [manager POST:strUrl parameters:dataParams constructingBodyWithBlock:^(id<AFMultipartFormData> formData) {
        [formData appendPartWithFileData:UIImageJPEGRepresentation(image, 0.5) name:[keys firstObject] fileName:[NSString stringWithFormat:@"%@.jpeg",[keys firstObject]] mimeType:@"image/jpeg"];
    } success:^(AFHTTPRequestOperation *operation, id responseObject) {
        if (success) {
            success(responseObject);
        }
    } failure:^(AFHTTPRequestOperation *operation, NSError *error) {
        if (fail) {
            fail(error);
        }
    }];
}
</code></pre>


<p>
接下来是如何调用：</p>

<pre><code>
-(void)uploadImageAction {

NSString *url = @"https://github.com/Ashen-Zhao";
    NSMutableDictionary *dpp =[@{@"token":@"zhaoshenshenazhao"} mutableCopy];
    NSMutableDictionary *pimgs= [@{@"file":[UIImage imageNamed:@"a.jpg"]} mutableCopy];
 [NetworkEngine uploadImageWithUrl:url dataParams:dpp imageParams:pimgs Success:^(NSDictionary* resultDic) {
        NSLog(@"%@", resultDic);
    } Failed:^(NSError *error) {
     }];
}
</code></pre>


<p>参数说明：</p>

<ul>
<li>strUrl：上传图片的服务器地- - dataParams：数据参数（如token等）</li>
<li>imageParams：图片参数（字典中的object一定要是UIImage类型；当然我写的是这样，你也可以修改为其他）</li>
<li>Success：上传成功后的Block回调（resultDic是服务器返回的结果）</li>
<li>Failed：上传失败后的Block回调（error是错误结果）</li>
</ul>


<p>  以上就是AFNetworking上传图片的方法， 分享给大家一起学习，你也可以自己改造这个方法，如果你发现更好的方法，请留言给我或者发邮件给我<a href="&#109;&#x61;&#x69;&#x6c;&#116;&#x6f;&#58;&#x7a;&#104;&#x61;&#111;&#97;&#x73;&#x68;&#x65;&#x6e;&#64;&#103;&#x6d;&#97;&#x69;&#108;&#46;&#99;&#111;&#109;">&#122;&#104;&#97;&#x6f;&#x61;&#x73;&#104;&#101;&#110;&#x40;&#x67;&#x6d;&#97;&#x69;&#108;&#46;&#x63;&#x6f;&#x6d;</a>；</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[百度天气预报API的使用（java版本）]]></title>
    <link href="http://ashen-zhao.github.io/blog/2015/12/28/weather/"/>
    <updated>2015-12-28T07:32:35+08:00</updated>
    <id>http://ashen-zhao.github.io/blog/2015/12/28/weather</id>
    <content type="html"><![CDATA[<p>&emsp;开发微信公众平台时，想要实现查询天气功能，找啊找，就找到了百度地图api；
使用方法进行简单总结：</p>

<p>此文章内容，转自我之前写的一篇文章： <a href="http://blog.csdn.net/ashenyy/article/details/25072857">http://blog.csdn.net/ashenyy/article/details/25072857</a></p>

<p>要使用百度天气预报api，首先要有密钥ak,申请地址<a href="http://developer.baidu.com/map/lbs-cloud.htm">http://developer.baidu.com/map/lbs-cloud.htm</a></p>

<!--more-->


<p>然后向<a href="http://api.map.baidu.com/telematics/v3/weather?location=%E9%83%91%E5%B7%9E&amp;output=xml&amp;ak=A72e372de05e63c8740b2622d0ed8ab1">http://api.map.baidu.com/telematics/v3/weather?location=%E9%83%91%E5%B7%9E&amp;output=xml&amp;ak=A72e372de05e63c8740b2622d0ed8ab1</a>
请求，然后会返还给你一个xml文档格式的天气预报如下：</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;CityWeatherResponse&gt;
&lt;status&gt;success&lt;/status&gt;
 &lt;date&gt;2014-04-29&lt;/date&gt;
&lt;results&gt;
&lt;currentCity&gt;郑州&lt;/currentCity&gt;
&lt;weather_data&gt;
      &lt;date&gt;周二(今天, 实时：20℃)&lt;/date&gt;
  &lt;dayPictureUrl&gt;http://api.map.baidu.com/images/weather/day/qing.png&lt;;/dayPictureUrl&gt;
  &lt;nightPictureUrl&gt;http://api.map.baidu.com/images/weather/night/qing.png&lt;;/nightPictureUrl&gt;
  &lt;weather&gt;晴&lt;/weather&gt;
  &lt;wind&gt;微风&lt;/wind&gt;
  &lt;temperature&gt;13℃&lt;/temperature&gt;
      &lt;date&gt;周三&lt;/date&gt;
  &lt;dayPictureUrl&gt;http://api.map.baidu.com/images/weather/day/qing.png&lt;;/dayPictureUrl&gt;
  &lt;nightPictureUrl&gt;http://api.map.baidu.com/images/weather/night/qing.png&lt;;/nightPictureUrl&gt;
  &lt;weather&gt;晴&lt;/weather&gt;
  &lt;wind&gt;微风&lt;/wind&gt;
  &lt;temperature&gt;28 ~ 15℃&lt;/temperature&gt;
      &lt;date&gt;周四&lt;/date&gt;
  &lt;dayPictureUrl&gt;http://api.map.baidu.com/images/weather/day/duoyun.png&lt;;/dayPictureUrl&gt;
  &lt;nightPictureUrl&gt;http://api.map.baidu.com/images/weather/night/yin.png&lt;;/nightPictureUrl&gt;
  &lt;weather&gt;多云转阴&lt;/weather&gt;
  &lt;wind&gt;微风&lt;/wind&gt;
  &lt;temperature&gt;30 ~ 15℃&lt;/temperature&gt;
      &lt;date&gt;周五&lt;/date&gt;
  &lt;dayPictureUrl&gt;http://api.map.baidu.com/images/weather/day/yin.png&lt;;/dayPictureUrl&gt;
  &lt;nightPictureUrl&gt;http://api.map.baidu.com/images/weather/night/duoyun.png&lt;;/nightPictureUrl&gt;
  &lt;weather&gt;阴转多云&lt;/weather&gt;
  &lt;wind&gt;微风&lt;/wind&gt;
  &lt;temperature&gt;25 ~ 15℃&lt;/temperature&gt;
    &lt;/weather_data&gt;
&lt;/results&gt;
&lt;/CityWeatherResponse&gt;
</code></pre>

<p>接下 来只需要对此xml文档解析取出数据即可
具体代码如下：</p>

<pre><code>
    package com.ashen.testapi;
    import java.io.BufferedReader;
    import java.io.InputStream;
    import java.io.InputStreamReader;
    import java.io.UnsupportedEncodingException;
    import java.net.HttpURLConnection;
    import java.net.URL;
    import java.net.URLEncoder;
    import java.util.Iterator;
    import java.util.List;
    import org.dom4j.Document;
    import org.dom4j.DocumentException;
    import org.dom4j.DocumentHelper;
    import org.dom4j.Element;
    public class BaiduWeather {
    //获取天气信息
  public static String GetWeater(String city) {
    BaiduWeather wu=new BaiduWeather();
    String buffstr=null;
    try {
        String xml= wu.GetXmlCode(URLEncoder.encode(city, "utf-8"));  //设置输入城市的编码，以满足百度天气api需要
        buffstr=wu.readStringXml(xml,city);//调用xml解析函数
    } catch (Exception e) {
    e.printStackTrace();
    }
    return  buffstr;
    }
    public String GetXmlCode(String city) throws UnsupportedEncodingException{
    String requestUrl = "http://api.map.baidu.com/telematics/v3/weather?location="+city+"&output=xml&ak=A72e372de05e63c8740b2622d0ed8ab1";  
    StringBuffer buffer = null;  
    try {  
    // 建立连接  
    URL url = new URL(requestUrl);
    HttpURLConnection httpUrlConn = (HttpURLConnection) url.openConnection();  
    httpUrlConn.setDoInput(true);  
    httpUrlConn.setRequestMethod("GET");  
    // 获取输入流  
    InputStream inputStream = httpUrlConn.getInputStream();  
    InputStreamReader inputStreamReader = new InputStreamReader(inputStream, "utf-8");  
    BufferedReader bufferedReader = new BufferedReader(inputStreamReader);  
    // 读取返回结果  
    buffer = new StringBuffer();  
    String str = null;  
    while ((str = bufferedReader.readLine()) != null) {  
      buffer.append(str);  
    }  
  
   // 释放资源  
   bufferedReader.close();  
    inputStreamReader.close();  
    inputStream.close();  
    httpUrlConn.disconnect();  
    } catch (Exception e) {  
    e.printStackTrace();  
    }  
    return buffer.toString();  //返回获取的xml字符串
}
public String readStringXml(String xml,String ifcity) {
  StringBuffer buff=new StringBuffer();  //用来拼接天气信息的
  Document doc = null;
  List listdate=null;  //用来存放日期
  List listday=null;  //用来存放白天图片路径信息
  List listweather=null;
  List listwind=null;
  List listtem=null;
  try {
    // 读取并解析XML文档
    //下面的是通过解析xml字符串的
    doc = DocumentHelper.parseText(xml); // 将字符串转为XML  
    Element rootElt = doc.getRootElement(); // 获取根节点    
    Iterator iter = rootElt.elementIterator("results"); // 获取根节点下的子节点results
    String status=rootElt.elementText("status"); //获取状态，如果等于success,表示有数据
    if(!status.equals("success"))
      return "暂无数据";  //如果不存在数据，直接返回
    String date= rootElt.elementText("date");  //获取根节点下的，当天日期
    buff.append(date+"\n");
    //遍历results节点
      while (iter.hasNext()) {
      Element recordEle = (Element) iter.next();
      Iterator iters = recordEle.elementIterator("weather_data"); //
    //遍历results节点下的weather_data节点
      while (iters.hasNext()) {
        Element itemEle = (Element) iters.next();  
        listdate=itemEle.elements("date");
      //将date集合放到listdate中
        listday=itemEle.elements("dayPictureUrl");
        listweather=itemEle.elements("weather");
        listwind=itemEle.elements("wind");
        listtem=itemEle.elements("temperature");
    }    
    for(int i=0; i < listdate.size();i++){     //由于每一个list.size都相等，这里统一处理
      Element eledate=(Element)listdate.get(i); //依次取出date
      Element eleday=(Element)listday.get(i);//..
      Element eleweather=(Element)listweather.get(i);
      Element elewind=(Element)listwind.get(i);
      Element eletem=(Element)listtem.get(i);            
      buff.append(eledate.getText()+"==="+eleweather.getText()+"==="+elewind.getText()+"==="+eletem.getText()+"\n");  //拼接信息
        //*****************如果想用到微信公众号上，还请自己继续写代码，我只能帮到这了，数据已经分离开了。
      //微信天气处理  省略
    }  
    }
    } catch (DocumentException e) {
    e.printStackTrace();
    } catch (Exception e) {
    e.printStackTrace();
    }
    return buff.toString();  
}
    public static void main(String[] args){
    //测试
    System.out.println(GetWeater("郑州").toString());
    }
}
</code></pre>


<p>测试结果：
2014-04-29</p>

<p>周二(今天, 实时：20℃)===晴===微风===13℃</p>

<p>周三===晴===微风===28 ~ 15℃</p>

<p>周四===多云转阴===微风===30 ~ 15℃</p>

<p>周五===阴转多云===微风===25 ~ 15℃</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[开始我的Octopress博客]]></title>
    <link href="http://ashen-zhao.github.io/blog/2015/12/28/startblog/"/>
    <updated>2015-12-28T07:08:39+08:00</updated>
    <id>http://ashen-zhao.github.io/blog/2015/12/28/startblog</id>
    <content type="html"><![CDATA[<h3>&emsp;今天研究了下Octopress 与 github的pages 建立个人博客，感觉还可以，于是就搭建起了自己的个人博客；</h3>

<h3>&emsp;后续我会慢慢将我其他地方的技术文章，一点点的挪过来，我来了，我的个人博客;</h3>

<h3>&emsp;初来乍到，还请各位多多关注;</h3>
]]></content>
  </entry>
  
</feed>
